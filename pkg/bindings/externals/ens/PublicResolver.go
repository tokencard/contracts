// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ens

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PublicResolverABI is the input ABI used to generate the binding from.
const PublicResolverABI = "[{\"inputs\":[{\"internalType\":\"contractENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuthorised\",\"type\":\"bool\"}],\"name\":\"AuthorisationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"record\",\"type\":\"bytes\"}],\"name\":\"DNSRecordChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"DNSRecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"DNSZoneCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lastzonehash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"zonehash\",\"type\":\"bytes\"}],\"name\":\"DNSZonehashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearDNSZone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resource\",\"type\":\"uint16\"}],\"name\":\"dnsRecord\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"hasDNSRecords\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddrCoinType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorised\",\"type\":\"bool\"}],\"name\":\"setAuthorisation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setDNSRecords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setZonehash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"zonehash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// PublicResolverBin is the compiled bytecode used for deploying new contracts.
<<<<<<< HEAD
var PublicResolverBin = "0x60806040523480156200001157600080fd5b50604051620027d5380380620027d583398101604081905262000034916200006d565b600b80546001600160a01b0319166001600160a01b0392909216919091179055620000d6565b80516200006781620000bc565b92915050565b6000602082840312156200008057600080fd5b60006200008e84846200005a565b949350505050565b60006200006782620000b0565b6000620000678262000096565b6001600160a01b031690565b620000c781620000a3565b8114620000d357600080fd5b50565b6126ef80620000e66000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063691f3431116100de578063bc1c58d111610097578063d5fa2b0011610071578063d5fa2b0014610390578063e59d895d146103a3578063f1cb7e06146103b6578063f86bc879146103c95761018e565b8063bc1c58d114610349578063c86902331461035c578063ce3decdc1461037d5761018e565b8063691f3431146102ca57806377372213146102dd57806390a01f2d146102f0578063a8fa568214610303578063ac9650d814610316578063ad5780af146103365761018e565b8063304e6ade1161014b5780634cbf6ba4116101255780634cbf6ba41461027157806359d1d43c146102845780635c98042b146102a4578063623195b0146102b75761018e565b8063304e6ade146102385780633b3b57de1461024b5780633e9ce7941461025e5761018e565b806301ffc9a7146101935780630af179d7146101bc57806310f13a8c146101d1578063124a319c146101e45780632203ab561461020457806329cd62ea14610225575b600080fd5b6101a66101a136600461226f565b6103dc565b6040516101b39190612482565b60405180910390f35b6101cf6101ca3660046120cf565b610409565b005b6101cf6101df366004612125565b6105f6565b6101f76101f236600461206d565b6106a3565b6040516101b39190612455565b610217610212366004611fb7565b6108ce565b6040516101b392919061256b565b6101cf610233366004611fe7565b6109ed565b6101cf6102463660046120cf565b610a6d565b6101f7610259366004611ecf565b610acc565b6101cf61026c366004611f74565b610b01565b6101a661027f366004611fb7565b610b7b565b6102976102923660046120cf565b610bad565b6040516101b391906124d9565b6102976102b2366004611ecf565b610c6f565b6101cf6102c53660046121ac565b610d10565b6102976102d8366004611ecf565b610d8b565b6101cf6102eb3660046120cf565b610df5565b6101cf6102fe366004612214565b610e54565b61029761031136600461202a565b610f19565b610329610324366004611e8d565b610fa6565b6040516101b39190612471565b6101cf610344366004611ecf565b6110cc565b610297610357366004611ecf565b61111f565b61036f61036a366004611ecf565b611187565b6040516101b392919061249e565b6101cf61038b3660046120cf565b6111a1565b6101cf61039e366004611eed565b6112b0565b6101cf6103b136600461209d565b6112d7565b6102976103c4366004611fb7565b611367565b6101a66103d7366004611f27565b611410565b60006001600160e01b03198216631674750f60e21b1480610401575061040182611436565b90505b919050565b826104138161145b565b61041c57600080fd5b6000806060808261042b611bb9565b61047560008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505063ffffffff61152a169050565b90505b61048181611545565b6105995761ffff86166104d9578060400151955061049e81611553565b9350836040516020016104b1919061243e565b6040516020818303038152906040528051906020012091506104d28161157a565b925061058b565b60606104e482611553565b9050816040015161ffff168761ffff1614158061050e575061050c858263ffffffff61159b16565b155b15610589576105628b86898d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050602087015189518c9182900390156115b9565b8160400151965081602001519550809450848051906020012092506105868261157a565b93505b505b610594816117e6565b610478565b508251156105eb576105eb8984878b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505088518b9250828f039150156115b9565b505050505050505050565b846106008161145b565b61060957600080fd5b8282600a6000898152602001908152602001600020878760405161062e929190612431565b908152604051908190036020019020610648929091611c04565b508484604051610659929190612431565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a755087876040516106939291906124c7565b60405180910390a3505050505050565b60008281526007602090815260408083206001600160e01b0319851684529091528120546001600160a01b031680156106dd5790506108c8565b60006106e885610acc565b90506001600160a01b038116610703576000925050506108c8565b60006060826001600160a01b03166301ffc9a760e01b60405160240161072991906124b9565b60408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b1790525161075e919061243e565b600060405180830381855afa9150503d8060008114610799576040519150601f19603f3d011682016040523d82523d6000602084013e61079e565b606091505b50915091508115806107b1575060208151105b806107d5575080601f815181106107c457fe5b01602001516001600160f81b031916155b156107e75760009450505050506108c8565b826001600160a01b03168660405160240161080291906124b9565b60408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b17905251610837919061243e565b600060405180830381855afa9150503d8060008114610872576040519150601f19603f3d011682016040523d82523d6000602084013e610877565b606091505b50909250905081158061088b575060208151105b806108af575080601f8151811061089e57fe5b01602001516001600160f81b031916155b156108c15760009450505050506108c8565b5090925050505b92915050565b600082815260208190526040812060609060015b8481116109cf578085161580159061091a57506000818152602083905260409020546002600019610100600184161502019091160415155b156109c7576000818152602083815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452849391928391908301828280156109b55780601f1061098a576101008083540402835291602001916109b5565b820191906000526020600020905b81548152906001019060200180831161099857829003601f168201915b505050505090509350935050506109e6565b60011b6108e2565b505060408051602081019091526000808252925090505b9250929050565b826109f78161145b565b610a0057600080fd5b6040805180820182528481526020808201858152600088815260099092529083902091518255516001909101555184907f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4690610a5f908690869061249e565b60405180910390a250505050565b82610a778161145b565b610a8057600080fd5b6000848152600260205260409020610a99908484611c04565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610a5f9291906124c7565b60006060610adb83603c611367565b9050805160001415610af1576000915050610404565b610afa816118b9565b9392505050565b6000838152600c60209081526040808320338085529083528184206001600160a01b038716808652935292819020805460ff19168515151790555190919085907fe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df90610b6e908690612482565b60405180910390a4505050565b600091825260066020908152604080842060048352818520548552825280842092845291905290205461ffff16151590565b6060600a60008581526020019081526020016000208383604051610bd2929190612431565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f81018590048502830185019093528282529092909190830182828015610c615780601f10610c3657610100808354040283529160200191610c61565b820191906000526020600020905b815481529060010190602001808311610c4457829003601f168201915b505050505090509392505050565b60008181526003602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b820191906000526020600020905b815481529060010190602001808311610ce757829003601f168201915b50505050509050919050565b83610d1a8161145b565b610d2357600080fd5b6000198401841615610d3457600080fd5b6000858152602081815260408083208784529091529020610d56908484611c04565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b60008181526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b82610dff8161145b565b610e0857600080fd5b6000848152600860205260409020610e21908484611c04565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610a5f9291906124c7565b82610e5e8161145b565b610e6757600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610e9992919061256b565b60405180910390a2603c831415610eeb57837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2610ed5846118b9565b604051610ee29190612463565b60405180910390a25b600084815260016020908152604080832086845282529091208351610f1292850190611c82565b5050505050565b6000838152600560209081526040808320600483528184205484528252808320858452825280832061ffff8516845282529182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610c615780601f10610c3657610100808354040283529160200191610c61565b604080518281526020808402820101909152606090828015610fdc57816020015b6060815260200190600190039081610fc75790505b50905060005b828110156110c5576000606030868685818110610ffb57fe5b602002820190508035601e193684900301811261101757600080fd5b9091016020810191503567ffffffffffffffff81111561103657600080fd5b3681900382131561104657600080fd5b604051611054929190612431565b600060405180830381855af49150503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b5091509150816110a357600080fd5b808484815181106110b057fe5b60209081029190910101525050600101610fe2565b5092915050565b806110d68161145b565b6110df57600080fd5b600082815260046020526040808220805460010190555183917fb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a198391a25050565b600081815260026020818152604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383526060939091830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b600090815260096020526040902080546001909101549091565b826111ab8161145b565b6111b457600080fd5b60008481526003602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156112495780601f1061121e57610100808354040283529160200191611249565b820191906000526020600020905b81548152906001019060200180831161122c57829003601f168201915b505050600088815260036020526040902092935061126c92915086905085611c04565b50847f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f858286866040516112a1939291906124ea565b60405180910390a25050505050565b816112ba8161145b565b6112c357600080fd5b6112d283603c6102fe856118d8565b505050565b826112e18161145b565b6112ea57600080fd5b60008481526007602090815260408083206001600160e01b0319871680855292529182902080546001600160a01b0319166001600160a01b038616179055905185907f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa90611359908690612455565b60405180910390a350505050565b600082815260016020818152604080842085855282529283902080548451600294821615610100026000190190911693909304601f810183900483028401830190945283835260609390918301828280156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b5050505050905092915050565b600c60209081526000938452604080852082529284528284209052825290205460ff1681565b60006001600160e01b0319821663c869023360e01b1480610401575061040182611908565b600b546040516302571be360e01b815260009182916001600160a01b03909116906302571be390611490908690600401612490565b60206040518083038186803b1580156114a857600080fd5b505afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114e09190810190611e67565b90506001600160a01b038116331480610afa57506000838152600c602090815260408083206001600160a01b0385168452825280832033845290915290205460ff16915050919050565b611532611bb9565b82815260c081018290526108c8816117e6565b805151602090910151101590565b602081015181516060916104019161156b908261192d565b8451919063ffffffff61197416565b60a081015160c082015182516060926104019281900363ffffffff61197416565b600081518351148015610afa5750610afa83600084600087516119d6565b60008781526004602090815260409091205487519188019190912060606115e787878763ffffffff61197416565b905083156116e45760008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452909152902054600260001961010060018416150201909116041561166f5760008a815260066020908152604080832086845282528083208584529091529020805461ffff19811661ffff918216600019019091161790555b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c16845290915281206116a591611cf0565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a6040516116d7929190612519565b60405180910390a26117da565b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452909152902054600260001961010060018416150201909116046117615760008a815260066020908152604080832086845282528083208584529091529020805461ffff8082166001011661ffff199091161790555b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c1684528252909120825161179c92840190611c82565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a846040516117d193929190612539565b60405180910390a25b50505050505050505050565b60c081015160208201819052815151116117ff576118b6565b60006118138260000151836020015161192d565b602083015183519101915061182e908263ffffffff6119f916565b61ffff166040830152815160029190910190611850908263ffffffff6119f916565b61ffff166060830152815160029190910190611872908263ffffffff611a1916565b63ffffffff9081166080840152825160049290920191600091611898919084906119f916565b600283810160a086015261ffff9190911690920190910160c0830152505b50565b600081516014146118c957600080fd5b5060200151600160601b900490565b604080516014808252818301909252606091602082018180388339505050600160601b9290920260208301525090565b60006001600160e01b0319821663691f343160e01b1480610401575061040182611a3b565b6000815b8351811061193b57fe5b600061194d858363ffffffff611a7616565b60ff1691820160010191905080611964575061196a565b50611931565b9190910392915050565b60608351828401111561198657600080fd5b6060826040519080825280601f01601f1916602001820160405280156119b3576020820181803883390190505b509050602080820190868601016119cb828287611a94565b509095945050505050565b60006119e3848484611ad2565b6119ee878785611ad2565b149695505050505050565b60008251826002011115611a0c57600080fd5b50016002015161ffff1690565b60008251826004011115611a2c57600080fd5b50016004015163ffffffff1690565b6000604051611a499061244a565b60405180910390206001600160e01b031916826001600160e01b0319161480610401575061040182611aee565b6000828281518110611a8457fe5b016020015160f81c905092915050565b5b60208110611ab4578151835260209283019290910190601f1901611a95565b905182516020929092036101000a6000190180199091169116179052565b600083518284011115611ae457600080fd5b5091016020012090565b60006001600160e01b0319821663547d2b4160e11b1480611b1f57506001600160e01b03198216631711d8df60e21b145b8061040157506104018260006001600160e01b0319821663bc1c58d160e01b148061040157506104018260006001600160e01b03198216631d9dabef60e11b1480611b7a57506001600160e01b031982166378e5bf0360e11b145b8061040157506104018260006001600160e01b03198216631101d5ab60e11b148061040157506301ffc9a760e01b6001600160e01b0319831614610401565b6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c455782800160ff19823516178555611c72565b82800160010185558215611c72579182015b82811115611c72578235825591602001919060010190611c57565b50611c7e929150611d30565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cc357805160ff1916838001178555611c72565b82800160010185558215611c72579182015b82811115611c72578251825591602001919060010190611cd5565b50805460018160011615610100020316600290046000825580601f10611d1657506118b6565b601f0160209004906000526020600020908101906118b691905b611d4a91905b80821115611c7e5760008155600101611d36565b90565b80356108c881612674565b80516108c881612674565b60008083601f840112611d7557600080fd5b50813567ffffffffffffffff811115611d8d57600080fd5b6020830191508360208202830111156109e657600080fd5b80356108c881612688565b80356108c881612691565b80356108c88161269a565b60008083601f840112611dd857600080fd5b50813567ffffffffffffffff811115611df057600080fd5b6020830191508360018202830111156109e657600080fd5b600082601f830112611e1957600080fd5b8135611e2c611e27826125b2565b61258b565b91508082526020830160208301858383011115611e4857600080fd5b611e5383828461262e565b50505092915050565b80356108c8816126a3565b600060208284031215611e7957600080fd5b6000611e858484611d58565b949350505050565b60008060208385031215611ea057600080fd5b823567ffffffffffffffff811115611eb757600080fd5b611ec385828601611d63565b92509250509250929050565b600060208284031215611ee157600080fd5b6000611e858484611db0565b60008060408385031215611f0057600080fd5b6000611f0c8585611db0565b9250506020611f1d85828601611d4d565b9150509250929050565b600080600060608486031215611f3c57600080fd5b6000611f488686611db0565b9350506020611f5986828701611d4d565b9250506040611f6a86828701611d4d565b9150509250925092565b600080600060608486031215611f8957600080fd5b6000611f958686611db0565b9350506020611fa686828701611d4d565b9250506040611f6a86828701611da5565b60008060408385031215611fca57600080fd5b6000611fd68585611db0565b9250506020611f1d85828601611db0565b600080600060608486031215611ffc57600080fd5b60006120088686611db0565b935050602061201986828701611db0565b9250506040611f6a86828701611db0565b60008060006060848603121561203f57600080fd5b600061204b8686611db0565b935050602061205c86828701611db0565b9250506040611f6a86828701611e5c565b6000806040838503121561208057600080fd5b600061208c8585611db0565b9250506020611f1d85828601611dbb565b6000806000606084860312156120b257600080fd5b60006120be8686611db0565b9350506020611f5986828701611dbb565b6000806000604084860312156120e457600080fd5b60006120f08686611db0565b935050602084013567ffffffffffffffff81111561210d57600080fd5b61211986828701611dc6565b92509250509250925092565b60008060008060006060868803121561213d57600080fd5b60006121498888611db0565b955050602086013567ffffffffffffffff81111561216657600080fd5b61217288828901611dc6565b9450945050604086013567ffffffffffffffff81111561219157600080fd5b61219d88828901611dc6565b92509250509295509295909350565b600080600080606085870312156121c257600080fd5b60006121ce8787611db0565b94505060206121df87828801611db0565b935050604085013567ffffffffffffffff8111156121fc57600080fd5b61220887828801611dc6565b95989497509550505050565b60008060006060848603121561222957600080fd5b60006122358686611db0565b935050602061224686828701611db0565b925050604084013567ffffffffffffffff81111561226357600080fd5b611f6a86828701611e08565b60006020828403121561228157600080fd5b6000611e858484611dbb565b6000610afa8383612385565b6122a28161261d565b82525050565b6122a2816125ed565b60006122bc826125e0565b6122c681856125e4565b9350836020820285016122d8856125da565b8060005b8581101561231257848403895281516122f5858261228d565b9450612300836125da565b60209a909a01999250506001016122dc565b5091979650505050505050565b6122a2816125f8565b6122a281611d4a565b6122a2816125fd565b600061234683856125e4565b935061235383858461262e565b61235c8361266a565b9093019392505050565b60006123728385610404565b935061237f83858461262e565b50500190565b6000612390826125e0565b61239a81856125e4565b93506123aa81856020860161263a565b61235c8161266a565b60006123be826125e0565b6123c88185610404565b93506123d881856020860161263a565b9290920192915050565b60006123ef602483610404565b7f696e74657266616365496d706c656d656e74657228627974657333322c6279748152636573342960e01b602082015260240192915050565b6122a28161260a565b6000611e85828486612366565b6000610afa82846123b3565b60006108c8826123e2565b602081016108c882846122a8565b602081016108c88284612299565b60208082528101610afa81846122b1565b602081016108c8828461231f565b602081016108c88284612328565b604081016124ac8285612328565b610afa6020830184612328565b602081016108c88284612331565b60208082528101611e8581848661233a565b60208082528101610afa8184612385565b604080825281016124fb8186612385565b9050818103602083015261251081848661233a565b95945050505050565b6040808252810161252a8185612385565b9050610afa6020830184612428565b6060808252810161254a8186612385565b90506125596020830185612428565b81810360408301526125108184612385565b604081016125798285612328565b8181036020830152611e858184612385565b60405181810167ffffffffffffffff811182821017156125aa57600080fd5b604052919050565b600067ffffffffffffffff8211156125c957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061040182612611565b151590565b6001600160e01b03191690565b61ffff1690565b6001600160a01b031690565b6000610401826000610401826125ed565b82818337506000910152565b60005b8381101561265557818101518382015260200161263d565b83811115612664576000848401525b50505050565b601f01601f191690565b61267d816125ed565b81146118b657600080fd5b61267d816125f8565b61267d81611d4a565b61267d816125fd565b61267d8161260a56fea365627a7a72315820ef3e43f1d9e499c9c6be6d957ada150718679ad709d492db09f521c51c9b41ff6c6578706572696d656e74616cf564736f6c63430005110040"
||||||| constructed merge base
var PublicResolverBin = "0x60806040523480156200001157600080fd5b50604051620027d5380380620027d583398101604081905262000034916200006d565b600b80546001600160a01b0319166001600160a01b0392909216919091179055620000d6565b80516200006781620000bc565b92915050565b6000602082840312156200008057600080fd5b60006200008e84846200005a565b949350505050565b60006200006782620000b0565b6000620000678262000096565b6001600160a01b031690565b620000c781620000a3565b8114620000d357600080fd5b50565b6126ef80620000e66000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063691f3431116100de578063bc1c58d111610097578063d5fa2b0011610071578063d5fa2b0014610390578063e59d895d146103a3578063f1cb7e06146103b6578063f86bc879146103c95761018e565b8063bc1c58d114610349578063c86902331461035c578063ce3decdc1461037d5761018e565b8063691f3431146102ca57806377372213146102dd57806390a01f2d146102f0578063a8fa568214610303578063ac9650d814610316578063ad5780af146103365761018e565b8063304e6ade1161014b5780634cbf6ba4116101255780634cbf6ba41461027157806359d1d43c146102845780635c98042b146102a4578063623195b0146102b75761018e565b8063304e6ade146102385780633b3b57de1461024b5780633e9ce7941461025e5761018e565b806301ffc9a7146101935780630af179d7146101bc57806310f13a8c146101d1578063124a319c146101e45780632203ab561461020457806329cd62ea14610225575b600080fd5b6101a66101a136600461226f565b6103dc565b6040516101b39190612482565b60405180910390f35b6101cf6101ca3660046120cf565b610409565b005b6101cf6101df366004612125565b6105f6565b6101f76101f236600461206d565b6106a3565b6040516101b39190612455565b610217610212366004611fb7565b6108ce565b6040516101b392919061256b565b6101cf610233366004611fe7565b6109ed565b6101cf6102463660046120cf565b610a6d565b6101f7610259366004611ecf565b610acc565b6101cf61026c366004611f74565b610b01565b6101a661027f366004611fb7565b610b7b565b6102976102923660046120cf565b610bad565b6040516101b391906124d9565b6102976102b2366004611ecf565b610c6f565b6101cf6102c53660046121ac565b610d10565b6102976102d8366004611ecf565b610d8b565b6101cf6102eb3660046120cf565b610df5565b6101cf6102fe366004612214565b610e54565b61029761031136600461202a565b610f19565b610329610324366004611e8d565b610fa6565b6040516101b39190612471565b6101cf610344366004611ecf565b6110cc565b610297610357366004611ecf565b61111f565b61036f61036a366004611ecf565b611187565b6040516101b392919061249e565b6101cf61038b3660046120cf565b6111a1565b6101cf61039e366004611eed565b6112b0565b6101cf6103b136600461209d565b6112d7565b6102976103c4366004611fb7565b611367565b6101a66103d7366004611f27565b611410565b60006001600160e01b03198216631674750f60e21b1480610401575061040182611436565b90505b919050565b826104138161145b565b61041c57600080fd5b6000806060808261042b611bb9565b61047560008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505063ffffffff61152a169050565b90505b61048181611545565b6105995761ffff86166104d9578060400151955061049e81611553565b9350836040516020016104b1919061243e565b6040516020818303038152906040528051906020012091506104d28161157a565b925061058b565b60606104e482611553565b9050816040015161ffff168761ffff1614158061050e575061050c858263ffffffff61159b16565b155b15610589576105628b86898d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050602087015189518c9182900390156115b9565b8160400151965081602001519550809450848051906020012092506105868261157a565b93505b505b610594816117e6565b610478565b508251156105eb576105eb8984878b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505088518b9250828f039150156115b9565b505050505050505050565b846106008161145b565b61060957600080fd5b8282600a6000898152602001908152602001600020878760405161062e929190612431565b908152604051908190036020019020610648929091611c04565b508484604051610659929190612431565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a755087876040516106939291906124c7565b60405180910390a3505050505050565b60008281526007602090815260408083206001600160e01b0319851684529091528120546001600160a01b031680156106dd5790506108c8565b60006106e885610acc565b90506001600160a01b038116610703576000925050506108c8565b60006060826001600160a01b03166301ffc9a760e01b60405160240161072991906124b9565b60408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b1790525161075e919061243e565b600060405180830381855afa9150503d8060008114610799576040519150601f19603f3d011682016040523d82523d6000602084013e61079e565b606091505b50915091508115806107b1575060208151105b806107d5575080601f815181106107c457fe5b01602001516001600160f81b031916155b156107e75760009450505050506108c8565b826001600160a01b03168660405160240161080291906124b9565b60408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b17905251610837919061243e565b600060405180830381855afa9150503d8060008114610872576040519150601f19603f3d011682016040523d82523d6000602084013e610877565b606091505b50909250905081158061088b575060208151105b806108af575080601f8151811061089e57fe5b01602001516001600160f81b031916155b156108c15760009450505050506108c8565b5090925050505b92915050565b600082815260208190526040812060609060015b8481116109cf578085161580159061091a57506000818152602083905260409020546002600019610100600184161502019091160415155b156109c7576000818152602083815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452849391928391908301828280156109b55780601f1061098a576101008083540402835291602001916109b5565b820191906000526020600020905b81548152906001019060200180831161099857829003601f168201915b505050505090509350935050506109e6565b60011b6108e2565b505060408051602081019091526000808252925090505b9250929050565b826109f78161145b565b610a0057600080fd5b6040805180820182528481526020808201858152600088815260099092529083902091518255516001909101555184907f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4690610a5f908690869061249e565b60405180910390a250505050565b82610a778161145b565b610a8057600080fd5b6000848152600260205260409020610a99908484611c04565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610a5f9291906124c7565b60006060610adb83603c611367565b9050805160001415610af1576000915050610404565b610afa816118b9565b9392505050565b6000838152600c60209081526040808320338085529083528184206001600160a01b038716808652935292819020805460ff19168515151790555190919085907fe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df90610b6e908690612482565b60405180910390a4505050565b600091825260066020908152604080842060048352818520548552825280842092845291905290205461ffff16151590565b6060600a60008581526020019081526020016000208383604051610bd2929190612431565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f81018590048502830185019093528282529092909190830182828015610c615780601f10610c3657610100808354040283529160200191610c61565b820191906000526020600020905b815481529060010190602001808311610c4457829003601f168201915b505050505090509392505050565b60008181526003602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b820191906000526020600020905b815481529060010190602001808311610ce757829003601f168201915b50505050509050919050565b83610d1a8161145b565b610d2357600080fd5b6000198401841615610d3457600080fd5b6000858152602081815260408083208784529091529020610d56908484611c04565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b60008181526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b82610dff8161145b565b610e0857600080fd5b6000848152600860205260409020610e21908484611c04565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610a5f9291906124c7565b82610e5e8161145b565b610e6757600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610e9992919061256b565b60405180910390a2603c831415610eeb57837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2610ed5846118b9565b604051610ee29190612463565b60405180910390a25b600084815260016020908152604080832086845282529091208351610f1292850190611c82565b5050505050565b6000838152600560209081526040808320600483528184205484528252808320858452825280832061ffff8516845282529182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610c615780601f10610c3657610100808354040283529160200191610c61565b604080518281526020808402820101909152606090828015610fdc57816020015b6060815260200190600190039081610fc75790505b50905060005b828110156110c5576000606030868685818110610ffb57fe5b602002820190508035601e193684900301811261101757600080fd5b9091016020810191503567ffffffffffffffff81111561103657600080fd5b3681900382131561104657600080fd5b604051611054929190612431565b600060405180830381855af49150503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b5091509150816110a357600080fd5b808484815181106110b057fe5b60209081029190910101525050600101610fe2565b5092915050565b806110d68161145b565b6110df57600080fd5b600082815260046020526040808220805460010190555183917fb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a198391a25050565b600081815260026020818152604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383526060939091830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b600090815260096020526040902080546001909101549091565b826111ab8161145b565b6111b457600080fd5b60008481526003602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156112495780601f1061121e57610100808354040283529160200191611249565b820191906000526020600020905b81548152906001019060200180831161122c57829003601f168201915b505050600088815260036020526040902092935061126c92915086905085611c04565b50847f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f858286866040516112a1939291906124ea565b60405180910390a25050505050565b816112ba8161145b565b6112c357600080fd5b6112d283603c6102fe856118d8565b505050565b826112e18161145b565b6112ea57600080fd5b60008481526007602090815260408083206001600160e01b0319871680855292529182902080546001600160a01b0319166001600160a01b038616179055905185907f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa90611359908690612455565b60405180910390a350505050565b600082815260016020818152604080842085855282529283902080548451600294821615610100026000190190911693909304601f810183900483028401830190945283835260609390918301828280156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b5050505050905092915050565b600c60209081526000938452604080852082529284528284209052825290205460ff1681565b60006001600160e01b0319821663c869023360e01b1480610401575061040182611908565b600b546040516302571be360e01b815260009182916001600160a01b03909116906302571be390611490908690600401612490565b60206040518083038186803b1580156114a857600080fd5b505afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114e09190810190611e67565b90506001600160a01b038116331480610afa57506000838152600c602090815260408083206001600160a01b0385168452825280832033845290915290205460ff16915050919050565b611532611bb9565b82815260c081018290526108c8816117e6565b805151602090910151101590565b602081015181516060916104019161156b908261192d565b8451919063ffffffff61197416565b60a081015160c082015182516060926104019281900363ffffffff61197416565b600081518351148015610afa5750610afa83600084600087516119d6565b60008781526004602090815260409091205487519188019190912060606115e787878763ffffffff61197416565b905083156116e45760008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452909152902054600260001961010060018416150201909116041561166f5760008a815260066020908152604080832086845282528083208584529091529020805461ffff19811661ffff918216600019019091161790555b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c16845290915281206116a591611cf0565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a6040516116d7929190612519565b60405180910390a26117da565b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452909152902054600260001961010060018416150201909116046117615760008a815260066020908152604080832086845282528083208584529091529020805461ffff8082166001011661ffff199091161790555b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c1684528252909120825161179c92840190611c82565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a846040516117d193929190612539565b60405180910390a25b50505050505050505050565b60c081015160208201819052815151116117ff576118b6565b60006118138260000151836020015161192d565b602083015183519101915061182e908263ffffffff6119f916565b61ffff166040830152815160029190910190611850908263ffffffff6119f916565b61ffff166060830152815160029190910190611872908263ffffffff611a1916565b63ffffffff9081166080840152825160049290920191600091611898919084906119f916565b600283810160a086015261ffff9190911690920190910160c0830152505b50565b600081516014146118c957600080fd5b5060200151600160601b900490565b604080516014808252818301909252606091602082018180388339505050600160601b9290920260208301525090565b60006001600160e01b0319821663691f343160e01b1480610401575061040182611a3b565b6000815b8351811061193b57fe5b600061194d858363ffffffff611a7616565b60ff1691820160010191905080611964575061196a565b50611931565b9190910392915050565b60608351828401111561198657600080fd5b6060826040519080825280601f01601f1916602001820160405280156119b3576020820181803883390190505b509050602080820190868601016119cb828287611a94565b509095945050505050565b60006119e3848484611ad2565b6119ee878785611ad2565b149695505050505050565b60008251826002011115611a0c57600080fd5b50016002015161ffff1690565b60008251826004011115611a2c57600080fd5b50016004015163ffffffff1690565b6000604051611a499061244a565b60405180910390206001600160e01b031916826001600160e01b0319161480610401575061040182611aee565b6000828281518110611a8457fe5b016020015160f81c905092915050565b5b60208110611ab4578151835260209283019290910190601f1901611a95565b905182516020929092036101000a6000190180199091169116179052565b600083518284011115611ae457600080fd5b5091016020012090565b60006001600160e01b0319821663547d2b4160e11b1480611b1f57506001600160e01b03198216631711d8df60e21b145b8061040157506104018260006001600160e01b0319821663bc1c58d160e01b148061040157506104018260006001600160e01b03198216631d9dabef60e11b1480611b7a57506001600160e01b031982166378e5bf0360e11b145b8061040157506104018260006001600160e01b03198216631101d5ab60e11b148061040157506301ffc9a760e01b6001600160e01b0319831614610401565b6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c455782800160ff19823516178555611c72565b82800160010185558215611c72579182015b82811115611c72578235825591602001919060010190611c57565b50611c7e929150611d30565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cc357805160ff1916838001178555611c72565b82800160010185558215611c72579182015b82811115611c72578251825591602001919060010190611cd5565b50805460018160011615610100020316600290046000825580601f10611d1657506118b6565b601f0160209004906000526020600020908101906118b691905b611d4a91905b80821115611c7e5760008155600101611d36565b90565b80356108c881612674565b80516108c881612674565b60008083601f840112611d7557600080fd5b50813567ffffffffffffffff811115611d8d57600080fd5b6020830191508360208202830111156109e657600080fd5b80356108c881612688565b80356108c881612691565b80356108c88161269a565b60008083601f840112611dd857600080fd5b50813567ffffffffffffffff811115611df057600080fd5b6020830191508360018202830111156109e657600080fd5b600082601f830112611e1957600080fd5b8135611e2c611e27826125b2565b61258b565b91508082526020830160208301858383011115611e4857600080fd5b611e5383828461262e565b50505092915050565b80356108c8816126a3565b600060208284031215611e7957600080fd5b6000611e858484611d58565b949350505050565b60008060208385031215611ea057600080fd5b823567ffffffffffffffff811115611eb757600080fd5b611ec385828601611d63565b92509250509250929050565b600060208284031215611ee157600080fd5b6000611e858484611db0565b60008060408385031215611f0057600080fd5b6000611f0c8585611db0565b9250506020611f1d85828601611d4d565b9150509250929050565b600080600060608486031215611f3c57600080fd5b6000611f488686611db0565b9350506020611f5986828701611d4d565b9250506040611f6a86828701611d4d565b9150509250925092565b600080600060608486031215611f8957600080fd5b6000611f958686611db0565b9350506020611fa686828701611d4d565b9250506040611f6a86828701611da5565b60008060408385031215611fca57600080fd5b6000611fd68585611db0565b9250506020611f1d85828601611db0565b600080600060608486031215611ffc57600080fd5b60006120088686611db0565b935050602061201986828701611db0565b9250506040611f6a86828701611db0565b60008060006060848603121561203f57600080fd5b600061204b8686611db0565b935050602061205c86828701611db0565b9250506040611f6a86828701611e5c565b6000806040838503121561208057600080fd5b600061208c8585611db0565b9250506020611f1d85828601611dbb565b6000806000606084860312156120b257600080fd5b60006120be8686611db0565b9350506020611f5986828701611dbb565b6000806000604084860312156120e457600080fd5b60006120f08686611db0565b935050602084013567ffffffffffffffff81111561210d57600080fd5b61211986828701611dc6565b92509250509250925092565b60008060008060006060868803121561213d57600080fd5b60006121498888611db0565b955050602086013567ffffffffffffffff81111561216657600080fd5b61217288828901611dc6565b9450945050604086013567ffffffffffffffff81111561219157600080fd5b61219d88828901611dc6565b92509250509295509295909350565b600080600080606085870312156121c257600080fd5b60006121ce8787611db0565b94505060206121df87828801611db0565b935050604085013567ffffffffffffffff8111156121fc57600080fd5b61220887828801611dc6565b95989497509550505050565b60008060006060848603121561222957600080fd5b60006122358686611db0565b935050602061224686828701611db0565b925050604084013567ffffffffffffffff81111561226357600080fd5b611f6a86828701611e08565b60006020828403121561228157600080fd5b6000611e858484611dbb565b6000610afa8383612385565b6122a28161261d565b82525050565b6122a2816125ed565b60006122bc826125e0565b6122c681856125e4565b9350836020820285016122d8856125da565b8060005b8581101561231257848403895281516122f5858261228d565b9450612300836125da565b60209a909a01999250506001016122dc565b5091979650505050505050565b6122a2816125f8565b6122a281611d4a565b6122a2816125fd565b600061234683856125e4565b935061235383858461262e565b61235c8361266a565b9093019392505050565b60006123728385610404565b935061237f83858461262e565b50500190565b6000612390826125e0565b61239a81856125e4565b93506123aa81856020860161263a565b61235c8161266a565b60006123be826125e0565b6123c88185610404565b93506123d881856020860161263a565b9290920192915050565b60006123ef602483610404565b7f696e74657266616365496d706c656d656e74657228627974657333322c6279748152636573342960e01b602082015260240192915050565b6122a28161260a565b6000611e85828486612366565b6000610afa82846123b3565b60006108c8826123e2565b602081016108c882846122a8565b602081016108c88284612299565b60208082528101610afa81846122b1565b602081016108c8828461231f565b602081016108c88284612328565b604081016124ac8285612328565b610afa6020830184612328565b602081016108c88284612331565b60208082528101611e8581848661233a565b60208082528101610afa8184612385565b604080825281016124fb8186612385565b9050818103602083015261251081848661233a565b95945050505050565b6040808252810161252a8185612385565b9050610afa6020830184612428565b6060808252810161254a8186612385565b90506125596020830185612428565b81810360408301526125108184612385565b604081016125798285612328565b8181036020830152611e858184612385565b60405181810167ffffffffffffffff811182821017156125aa57600080fd5b604052919050565b600067ffffffffffffffff8211156125c957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061040182612611565b151590565b6001600160e01b03191690565b61ffff1690565b6001600160a01b031690565b6000610401826000610401826125ed565b82818337506000910152565b60005b8381101561265557818101518382015260200161263d565b83811115612664576000848401525b50505050565b601f01601f191690565b61267d816125ed565b81146118b657600080fd5b61267d816125f8565b61267d81611d4a565b61267d816125fd565b61267d8161260a56fea365627a7a72315820df7730a71639c10229d8f85682221a7143b15ba28f5b2e5ddbb57b35b97e468d6c6578706572696d656e74616cf564736f6c634300050f0040"
=======
<<<<<<< HEAD
var PublicResolverBin = "0x60806040523480156200001157600080fd5b50604051620027d5380380620027d583398101604081905262000034916200006d565b600b80546001600160a01b0319166001600160a01b0392909216919091179055620000d6565b80516200006781620000bc565b92915050565b6000602082840312156200008057600080fd5b60006200008e84846200005a565b949350505050565b60006200006782620000b0565b6000620000678262000096565b6001600160a01b031690565b620000c781620000a3565b8114620000d357600080fd5b50565b6126ef80620000e66000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063691f3431116100de578063bc1c58d111610097578063d5fa2b0011610071578063d5fa2b0014610390578063e59d895d146103a3578063f1cb7e06146103b6578063f86bc879146103c95761018e565b8063bc1c58d114610349578063c86902331461035c578063ce3decdc1461037d5761018e565b8063691f3431146102ca57806377372213146102dd57806390a01f2d146102f0578063a8fa568214610303578063ac9650d814610316578063ad5780af146103365761018e565b8063304e6ade1161014b5780634cbf6ba4116101255780634cbf6ba41461027157806359d1d43c146102845780635c98042b146102a4578063623195b0146102b75761018e565b8063304e6ade146102385780633b3b57de1461024b5780633e9ce7941461025e5761018e565b806301ffc9a7146101935780630af179d7146101bc57806310f13a8c146101d1578063124a319c146101e45780632203ab561461020457806329cd62ea14610225575b600080fd5b6101a66101a136600461226f565b6103dc565b6040516101b39190612482565b60405180910390f35b6101cf6101ca3660046120cf565b610409565b005b6101cf6101df366004612125565b6105f6565b6101f76101f236600461206d565b6106a3565b6040516101b39190612455565b610217610212366004611fb7565b6108ce565b6040516101b392919061256b565b6101cf610233366004611fe7565b6109ed565b6101cf6102463660046120cf565b610a6d565b6101f7610259366004611ecf565b610acc565b6101cf61026c366004611f74565b610b01565b6101a661027f366004611fb7565b610b7b565b6102976102923660046120cf565b610bad565b6040516101b391906124d9565b6102976102b2366004611ecf565b610c6f565b6101cf6102c53660046121ac565b610d10565b6102976102d8366004611ecf565b610d8b565b6101cf6102eb3660046120cf565b610df5565b6101cf6102fe366004612214565b610e54565b61029761031136600461202a565b610f19565b610329610324366004611e8d565b610fa6565b6040516101b39190612471565b6101cf610344366004611ecf565b6110cc565b610297610357366004611ecf565b61111f565b61036f61036a366004611ecf565b611187565b6040516101b392919061249e565b6101cf61038b3660046120cf565b6111a1565b6101cf61039e366004611eed565b6112b0565b6101cf6103b136600461209d565b6112d7565b6102976103c4366004611fb7565b611367565b6101a66103d7366004611f27565b611410565b60006001600160e01b03198216631674750f60e21b1480610401575061040182611436565b90505b919050565b826104138161145b565b61041c57600080fd5b6000806060808261042b611bb9565b61047560008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505063ffffffff61152a169050565b90505b61048181611545565b6105995761ffff86166104d9578060400151955061049e81611553565b9350836040516020016104b1919061243e565b6040516020818303038152906040528051906020012091506104d28161157a565b925061058b565b60606104e482611553565b9050816040015161ffff168761ffff1614158061050e575061050c858263ffffffff61159b16565b155b15610589576105628b86898d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050602087015189518c9182900390156115b9565b8160400151965081602001519550809450848051906020012092506105868261157a565b93505b505b610594816117e6565b610478565b508251156105eb576105eb8984878b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505088518b9250828f039150156115b9565b505050505050505050565b846106008161145b565b61060957600080fd5b8282600a6000898152602001908152602001600020878760405161062e929190612431565b908152604051908190036020019020610648929091611c04565b508484604051610659929190612431565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a755087876040516106939291906124c7565b60405180910390a3505050505050565b60008281526007602090815260408083206001600160e01b0319851684529091528120546001600160a01b031680156106dd5790506108c8565b60006106e885610acc565b90506001600160a01b038116610703576000925050506108c8565b60006060826001600160a01b03166301ffc9a760e01b60405160240161072991906124b9565b60408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b1790525161075e919061243e565b600060405180830381855afa9150503d8060008114610799576040519150601f19603f3d011682016040523d82523d6000602084013e61079e565b606091505b50915091508115806107b1575060208151105b806107d5575080601f815181106107c457fe5b01602001516001600160f81b031916155b156107e75760009450505050506108c8565b826001600160a01b03168660405160240161080291906124b9565b60408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b17905251610837919061243e565b600060405180830381855afa9150503d8060008114610872576040519150601f19603f3d011682016040523d82523d6000602084013e610877565b606091505b50909250905081158061088b575060208151105b806108af575080601f8151811061089e57fe5b01602001516001600160f81b031916155b156108c15760009450505050506108c8565b5090925050505b92915050565b600082815260208190526040812060609060015b8481116109cf578085161580159061091a57506000818152602083905260409020546002600019610100600184161502019091160415155b156109c7576000818152602083815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452849391928391908301828280156109b55780601f1061098a576101008083540402835291602001916109b5565b820191906000526020600020905b81548152906001019060200180831161099857829003601f168201915b505050505090509350935050506109e6565b60011b6108e2565b505060408051602081019091526000808252925090505b9250929050565b826109f78161145b565b610a0057600080fd5b6040805180820182528481526020808201858152600088815260099092529083902091518255516001909101555184907f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4690610a5f908690869061249e565b60405180910390a250505050565b82610a778161145b565b610a8057600080fd5b6000848152600260205260409020610a99908484611c04565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610a5f9291906124c7565b60006060610adb83603c611367565b9050805160001415610af1576000915050610404565b610afa816118b9565b9392505050565b6000838152600c60209081526040808320338085529083528184206001600160a01b038716808652935292819020805460ff19168515151790555190919085907fe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df90610b6e908690612482565b60405180910390a4505050565b600091825260066020908152604080842060048352818520548552825280842092845291905290205461ffff16151590565b6060600a60008581526020019081526020016000208383604051610bd2929190612431565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f81018590048502830185019093528282529092909190830182828015610c615780601f10610c3657610100808354040283529160200191610c61565b820191906000526020600020905b815481529060010190602001808311610c4457829003601f168201915b505050505090509392505050565b60008181526003602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b820191906000526020600020905b815481529060010190602001808311610ce757829003601f168201915b50505050509050919050565b83610d1a8161145b565b610d2357600080fd5b6000198401841615610d3457600080fd5b6000858152602081815260408083208784529091529020610d56908484611c04565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b60008181526008602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b82610dff8161145b565b610e0857600080fd5b6000848152600860205260409020610e21908484611c04565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610a5f9291906124c7565b82610e5e8161145b565b610e6757600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610e9992919061256b565b60405180910390a2603c831415610eeb57837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2610ed5846118b9565b604051610ee29190612463565b60405180910390a25b600084815260016020908152604080832086845282529091208351610f1292850190611c82565b5050505050565b6000838152600560209081526040808320600483528184205484528252808320858452825280832061ffff8516845282529182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610c615780601f10610c3657610100808354040283529160200191610c61565b604080518281526020808402820101909152606090828015610fdc57816020015b6060815260200190600190039081610fc75790505b50905060005b828110156110c5576000606030868685818110610ffb57fe5b602002820190508035601e193684900301811261101757600080fd5b9091016020810191503567ffffffffffffffff81111561103657600080fd5b3681900382131561104657600080fd5b604051611054929190612431565b600060405180830381855af49150503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b5091509150816110a357600080fd5b808484815181106110b057fe5b60209081029190910101525050600101610fe2565b5092915050565b806110d68161145b565b6110df57600080fd5b600082815260046020526040808220805460010190555183917fb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a198391a25050565b600081815260026020818152604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383526060939091830182828015610d045780601f10610cd957610100808354040283529160200191610d04565b600090815260096020526040902080546001909101549091565b826111ab8161145b565b6111b457600080fd5b60008481526003602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156112495780601f1061121e57610100808354040283529160200191611249565b820191906000526020600020905b81548152906001019060200180831161122c57829003601f168201915b505050600088815260036020526040902092935061126c92915086905085611c04565b50847f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f858286866040516112a1939291906124ea565b60405180910390a25050505050565b816112ba8161145b565b6112c357600080fd5b6112d283603c6102fe856118d8565b505050565b826112e18161145b565b6112ea57600080fd5b60008481526007602090815260408083206001600160e01b0319871680855292529182902080546001600160a01b0319166001600160a01b038616179055905185907f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa90611359908690612455565b60405180910390a350505050565b600082815260016020818152604080842085855282529283902080548451600294821615610100026000190190911693909304601f810183900483028401830190945283835260609390918301828280156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b5050505050905092915050565b600c60209081526000938452604080852082529284528284209052825290205460ff1681565b60006001600160e01b0319821663c869023360e01b1480610401575061040182611908565b600b546040516302571be360e01b815260009182916001600160a01b03909116906302571be390611490908690600401612490565b60206040518083038186803b1580156114a857600080fd5b505afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114e09190810190611e67565b90506001600160a01b038116331480610afa57506000838152600c602090815260408083206001600160a01b0385168452825280832033845290915290205460ff16915050919050565b611532611bb9565b82815260c081018290526108c8816117e6565b805151602090910151101590565b602081015181516060916104019161156b908261192d565b8451919063ffffffff61197416565b60a081015160c082015182516060926104019281900363ffffffff61197416565b600081518351148015610afa5750610afa83600084600087516119d6565b60008781526004602090815260409091205487519188019190912060606115e787878763ffffffff61197416565b905083156116e45760008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452909152902054600260001961010060018416150201909116041561166f5760008a815260066020908152604080832086845282528083208584529091529020805461ffff19811661ffff918216600019019091161790555b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c16845290915281206116a591611cf0565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a6040516116d7929190612519565b60405180910390a26117da565b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452909152902054600260001961010060018416150201909116046117615760008a815260066020908152604080832086845282528083208584529091529020805461ffff8082166001011661ffff199091161790555b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c1684528252909120825161179c92840190611c82565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a846040516117d193929190612539565b60405180910390a25b50505050505050505050565b60c081015160208201819052815151116117ff576118b6565b60006118138260000151836020015161192d565b602083015183519101915061182e908263ffffffff6119f916565b61ffff166040830152815160029190910190611850908263ffffffff6119f916565b61ffff166060830152815160029190910190611872908263ffffffff611a1916565b63ffffffff9081166080840152825160049290920191600091611898919084906119f916565b600283810160a086015261ffff9190911690920190910160c0830152505b50565b600081516014146118c957600080fd5b5060200151600160601b900490565b604080516014808252818301909252606091602082018180388339505050600160601b9290920260208301525090565b60006001600160e01b0319821663691f343160e01b1480610401575061040182611a3b565b6000815b8351811061193b57fe5b600061194d858363ffffffff611a7616565b60ff1691820160010191905080611964575061196a565b50611931565b9190910392915050565b60608351828401111561198657600080fd5b6060826040519080825280601f01601f1916602001820160405280156119b3576020820181803883390190505b509050602080820190868601016119cb828287611a94565b509095945050505050565b60006119e3848484611ad2565b6119ee878785611ad2565b149695505050505050565b60008251826002011115611a0c57600080fd5b50016002015161ffff1690565b60008251826004011115611a2c57600080fd5b50016004015163ffffffff1690565b6000604051611a499061244a565b60405180910390206001600160e01b031916826001600160e01b0319161480610401575061040182611aee565b6000828281518110611a8457fe5b016020015160f81c905092915050565b5b60208110611ab4578151835260209283019290910190601f1901611a95565b905182516020929092036101000a6000190180199091169116179052565b600083518284011115611ae457600080fd5b5091016020012090565b60006001600160e01b0319821663547d2b4160e11b1480611b1f57506001600160e01b03198216631711d8df60e21b145b8061040157506104018260006001600160e01b0319821663bc1c58d160e01b148061040157506104018260006001600160e01b03198216631d9dabef60e11b1480611b7a57506001600160e01b031982166378e5bf0360e11b145b8061040157506104018260006001600160e01b03198216631101d5ab60e11b148061040157506301ffc9a760e01b6001600160e01b0319831614610401565b6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c455782800160ff19823516178555611c72565b82800160010185558215611c72579182015b82811115611c72578235825591602001919060010190611c57565b50611c7e929150611d30565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cc357805160ff1916838001178555611c72565b82800160010185558215611c72579182015b82811115611c72578251825591602001919060010190611cd5565b50805460018160011615610100020316600290046000825580601f10611d1657506118b6565b601f0160209004906000526020600020908101906118b691905b611d4a91905b80821115611c7e5760008155600101611d36565b90565b80356108c881612674565b80516108c881612674565b60008083601f840112611d7557600080fd5b50813567ffffffffffffffff811115611d8d57600080fd5b6020830191508360208202830111156109e657600080fd5b80356108c881612688565b80356108c881612691565b80356108c88161269a565b60008083601f840112611dd857600080fd5b50813567ffffffffffffffff811115611df057600080fd5b6020830191508360018202830111156109e657600080fd5b600082601f830112611e1957600080fd5b8135611e2c611e27826125b2565b61258b565b91508082526020830160208301858383011115611e4857600080fd5b611e5383828461262e565b50505092915050565b80356108c8816126a3565b600060208284031215611e7957600080fd5b6000611e858484611d58565b949350505050565b60008060208385031215611ea057600080fd5b823567ffffffffffffffff811115611eb757600080fd5b611ec385828601611d63565b92509250509250929050565b600060208284031215611ee157600080fd5b6000611e858484611db0565b60008060408385031215611f0057600080fd5b6000611f0c8585611db0565b9250506020611f1d85828601611d4d565b9150509250929050565b600080600060608486031215611f3c57600080fd5b6000611f488686611db0565b9350506020611f5986828701611d4d565b9250506040611f6a86828701611d4d565b9150509250925092565b600080600060608486031215611f8957600080fd5b6000611f958686611db0565b9350506020611fa686828701611d4d565b9250506040611f6a86828701611da5565b60008060408385031215611fca57600080fd5b6000611fd68585611db0565b9250506020611f1d85828601611db0565b600080600060608486031215611ffc57600080fd5b60006120088686611db0565b935050602061201986828701611db0565b9250506040611f6a86828701611db0565b60008060006060848603121561203f57600080fd5b600061204b8686611db0565b935050602061205c86828701611db0565b9250506040611f6a86828701611e5c565b6000806040838503121561208057600080fd5b600061208c8585611db0565b9250506020611f1d85828601611dbb565b6000806000606084860312156120b257600080fd5b60006120be8686611db0565b9350506020611f5986828701611dbb565b6000806000604084860312156120e457600080fd5b60006120f08686611db0565b935050602084013567ffffffffffffffff81111561210d57600080fd5b61211986828701611dc6565b92509250509250925092565b60008060008060006060868803121561213d57600080fd5b60006121498888611db0565b955050602086013567ffffffffffffffff81111561216657600080fd5b61217288828901611dc6565b9450945050604086013567ffffffffffffffff81111561219157600080fd5b61219d88828901611dc6565b92509250509295509295909350565b600080600080606085870312156121c257600080fd5b60006121ce8787611db0565b94505060206121df87828801611db0565b935050604085013567ffffffffffffffff8111156121fc57600080fd5b61220887828801611dc6565b95989497509550505050565b60008060006060848603121561222957600080fd5b60006122358686611db0565b935050602061224686828701611db0565b925050604084013567ffffffffffffffff81111561226357600080fd5b611f6a86828701611e08565b60006020828403121561228157600080fd5b6000611e858484611dbb565b6000610afa8383612385565b6122a28161261d565b82525050565b6122a2816125ed565b60006122bc826125e0565b6122c681856125e4565b9350836020820285016122d8856125da565b8060005b8581101561231257848403895281516122f5858261228d565b9450612300836125da565b60209a909a01999250506001016122dc565b5091979650505050505050565b6122a2816125f8565b6122a281611d4a565b6122a2816125fd565b600061234683856125e4565b935061235383858461262e565b61235c8361266a565b9093019392505050565b60006123728385610404565b935061237f83858461262e565b50500190565b6000612390826125e0565b61239a81856125e4565b93506123aa81856020860161263a565b61235c8161266a565b60006123be826125e0565b6123c88185610404565b93506123d881856020860161263a565b9290920192915050565b60006123ef602483610404565b7f696e74657266616365496d706c656d656e74657228627974657333322c6279748152636573342960e01b602082015260240192915050565b6122a28161260a565b6000611e85828486612366565b6000610afa82846123b3565b60006108c8826123e2565b602081016108c882846122a8565b602081016108c88284612299565b60208082528101610afa81846122b1565b602081016108c8828461231f565b602081016108c88284612328565b604081016124ac8285612328565b610afa6020830184612328565b602081016108c88284612331565b60208082528101611e8581848661233a565b60208082528101610afa8184612385565b604080825281016124fb8186612385565b9050818103602083015261251081848661233a565b95945050505050565b6040808252810161252a8185612385565b9050610afa6020830184612428565b6060808252810161254a8186612385565b90506125596020830185612428565b81810360408301526125108184612385565b604081016125798285612328565b8181036020830152611e858184612385565b60405181810167ffffffffffffffff811182821017156125aa57600080fd5b604052919050565b600067ffffffffffffffff8211156125c957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061040182612611565b151590565b6001600160e01b03191690565b61ffff1690565b6001600160a01b031690565b6000610401826000610401826125ed565b82818337506000910152565b60005b8381101561265557818101518382015260200161263d565b83811115612664576000848401525b50505050565b601f01601f191690565b61267d816125ed565b81146118b657600080fd5b61267d816125f8565b61267d81611d4a565b61267d816125fd565b61267d8161260a56fea365627a7a72315820df7730a71639c10229d8f85682221a7143b15ba28f5b2e5ddbb57b35b97e468d6c6578706572696d656e74616cf564736f6c634300050f0040"
||||||| constructed merge base
var PublicResolverBin = "0x608060405234801561001057600080fd5b5060405161149d38038061149d8339818101604052602081101561003357600080fd5b5051600780546001600160a01b0319166001600160a01b0390921691909117905561143a806100636000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806359d1d43c116100a2578063bc1c58d111610071578063bc1c58d1146105e2578063c8690233146105ff578063d5fa2b0014610635578063e59d895d14610661578063f86bc8791461069d5761010b565b806359d1d43c146103ec578063623195b0146104d6578063691f343114610550578063773722131461056d5761010b565b806329cd62ea116100de57806329cd62ea146102fd578063304e6ade146103265780633b3b57de1461039b5780633e9ce794146103b85761010b565b806301ffc9a71461011057806310f13a8c1461014b578063124a319c146102125780632203ab561461025b575b600080fd5b6101376004803603602081101561012657600080fd5b50356001600160e01b0319166106d1565b604080519115158252519081900360200190f35b6102106004803603606081101561016157600080fd5b81359190810190604081016020820135600160201b81111561018257600080fd5b82018360208201111561019457600080fd5b803590602001918460018302840111600160201b831117156101b557600080fd5b919390929091602081019035600160201b8111156101d257600080fd5b8201836020820111156101e457600080fd5b803590602001918460018302840111600160201b8311171561020557600080fd5b5090925090506106fc565b005b61023f6004803603604081101561022857600080fd5b50803590602001356001600160e01b0319166107ec565b604080516001600160a01b039092168252519081900360200190f35b61027e6004803603604081101561027157600080fd5b5080359060200135610aa2565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102c15781810151838201526020016102a9565b50505050905090810190601f1680156102ee5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6102106004803603606081101561031357600080fd5b5080359060208101359060400135610bc1565b6102106004803603604081101561033c57600080fd5b81359190810190604081016020820135600160201b81111561035d57600080fd5b82018360208201111561036f57600080fd5b803590602001918460018302840111600160201b8311171561039057600080fd5b509092509050610c3f565b61023f600480360360208110156103b157600080fd5b5035610cd3565b610210600480360360608110156103ce57600080fd5b508035906001600160a01b0360208201351690604001351515610cee565b6104616004803603604081101561040257600080fd5b81359190810190604081016020820135600160201b81111561042357600080fd5b82018360208201111561043557600080fd5b803590602001918460018302840111600160201b8311171561045657600080fd5b509092509050610d67565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049b578181015183820152602001610483565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610210600480360360608110156104ec57600080fd5b813591602081013591810190606081016040820135600160201b81111561051257600080fd5b82018360208201111561052457600080fd5b803590602001918460018302840111600160201b8311171561054557600080fd5b509092509050610e2e565b6104616004803603602081101561056657600080fd5b5035610ea9565b6102106004803603604081101561058357600080fd5b81359190810190604081016020820135600160201b8111156105a457600080fd5b8201836020820111156105b657600080fd5b803590602001918460018302840111600160201b831117156105d757600080fd5b509092509050610f4a565b610461600480360360208110156105f857600080fd5b5035610fde565b61061c6004803603602081101561061557600080fd5b5035611046565b6040805192835260208301919091528051918290030190f35b6102106004803603604081101561064b57600080fd5b50803590602001356001600160a01b0316611060565b6102106004803603606081101561067757600080fd5b5080359060208101356001600160e01b03191690604001356001600160a01b03166110d8565b610137600480360360608110156106b357600080fd5b508035906001600160a01b0360208201358116916040013516611164565b60006001600160e01b03198216631674750f60e21b14806106f657506106f68261118a565b92915050565b84610706816111af565b61070f57600080fd5b828260066000898152602001908152602001600020878760405180838380828437808301925050509250505090815260200160405180910390209190610756929190611346565b50857fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550868688886040518080602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600083820152604051601f909101601f19169092018290039850909650505050505050a2505050505050565b60008281526003602090815260408083206001600160e01b0319851684529091528120546001600160a01b031680156108265790506106f6565b600061083185610cd3565b90506001600160a01b03811661084c576000925050506106f6565b604080516301ffc9a760e01b602480830182905283518084039091018152604490920183526020820180516001600160e01b03169091178152915181516000936060936001600160a01b038716939092909182918083835b602083106108c35780518252601f1990920191602091820191016108a4565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610923576040519150601f19603f3d011682016040523d82523d6000602084013e610928565b606091505b509150915081158061093b575060208151105b8061095f575080601f8151811061094e57fe5b01602001516001600160f81b031916155b156109715760009450505050506106f6565b604080516001600160e01b0319881660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b178152915181516001600160a01b0387169382918083835b602083106109e85780518252601f1990920191602091820191016109c9565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610a48576040519150601f19603f3d011682016040523d82523d6000602084013e610a4d565b606091505b509092509050811580610a61575060208151105b80610a85575080601f81518110610a7457fe5b01602001516001600160f81b031916155b15610a975760009450505050506106f6565b509095945050505050565b600082815260208190526040812060609060015b848111610ba35780851615801590610aee57506000818152602083905260409020546002600019610100600184161502019091160415155b15610b9b576000818152602083815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845284939192839190830182828015610b895780601f10610b5e57610100808354040283529160200191610b89565b820191906000526020600020905b815481529060010190602001808311610b6c57829003601f168201915b50505050509050935093505050610bba565b60011b610ab6565b505060408051602081019091526000808252925090505b9250929050565b82610bcb816111af565b610bd457600080fd5b604080518082018252848152602080820185815260008881526005835284902092518355516001909201919091558151858152908101849052815186927f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46928290030190a250505050565b82610c49816111af565b610c5257600080fd5b6000848152600260205260409020610c6b908484611346565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a250505050565b6000908152600160205260409020546001600160a01b031690565b6000838152600860209081526040808320338085529083528184206001600160a01b03871680865290845293829020805460ff191686151590811790915582519081529151909287927fe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df929081900390910190a4505050565b6060600660008581526020019081526020016000208383604051808383808284379190910194855250506040805160209481900385018120805460026001821615610100026000190190911604601f81018790048702830187019093528282529094909350909150830182828015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b505050505090509392505050565b83610e38816111af565b610e4157600080fd5b6000198401841615610e5257600080fd5b6000858152602081815260408083208784529091529020610e74908484611346565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b60008181526004602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610f3e5780601f10610f1357610100808354040283529160200191610f3e565b820191906000526020600020905b815481529060010190602001808311610f2157829003601f168201915b50505050509050919050565b82610f54816111af565b610f5d57600080fd5b6000848152600460205260409020610f76908484611346565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a250505050565b600081815260026020818152604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383526060939091830182828015610f3e5780601f10610f1357610100808354040283529160200191610f3e565b600090815260056020526040902080546001909101549091565b8161106a816111af565b61107357600080fd5b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251908152915185927f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd292908290030190a2505050565b826110e2816111af565b6110eb57600080fd5b60008481526003602090815260408083206001600160e01b031987168085529083529281902080546001600160a01b0319166001600160a01b0387169081179091558151908152905187927f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa928290030190a350505050565b600860209081526000938452604080852082529284528284209052825290205460ff1681565b60006001600160e01b0319821663c869023360e01b14806106f657506106f682611276565b600754604080516302571be360e01b815260048101849052905160009283926001600160a01b03909116916302571be391602480820192602092909190829003018186803b15801561120057600080fd5b505afa158015611214573d6000803e3d6000fd5b505050506040513d602081101561122a57600080fd5b505190506001600160a01b03811633148061126f575060008381526008602090815260408083206001600160a01b0385168452825280832033845290915290205460ff165b9392505050565b60006001600160e01b0319821663691f343160e01b14806106f657506106f682600060405180806113e260249139602401905060405180910390206001600160e01b031916826001600160e01b03191614806106f657506106f68260006001600160e01b0319821663bc1c58d160e01b14806106f657506106f68260006001600160e01b03198216631d9dabef60e11b14806106f657506106f68260006001600160e01b03198216631101d5ab60e11b14806106f657506301ffc9a760e01b6001600160e01b03198316146106f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113875782800160ff198235161785556113b4565b828001600101855582156113b4579182015b828111156113b4578235825591602001919060010190611399565b506113c09291506113c4565b5090565b6113de91905b808211156113c057600081556001016113ca565b9056fe696e74657266616365496d706c656d656e74657228627974657333322c62797465733429a265627a7a72315820a0854949b651614d36f257bad72c1ab9e76ff633572c86514d9729549800f0ae64736f6c634300050f0032"
=======
var PublicResolverBin = "0x608060405234801561001057600080fd5b5060405161149d38038061149d8339818101604052602081101561003357600080fd5b5051600780546001600160a01b0319166001600160a01b0390921691909117905561143a806100636000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806359d1d43c116100a2578063bc1c58d111610071578063bc1c58d1146105e2578063c8690233146105ff578063d5fa2b0014610635578063e59d895d14610661578063f86bc8791461069d5761010b565b806359d1d43c146103ec578063623195b0146104d6578063691f343114610550578063773722131461056d5761010b565b806329cd62ea116100de57806329cd62ea146102fd578063304e6ade146103265780633b3b57de1461039b5780633e9ce794146103b85761010b565b806301ffc9a71461011057806310f13a8c1461014b578063124a319c146102125780632203ab561461025b575b600080fd5b6101376004803603602081101561012657600080fd5b50356001600160e01b0319166106d1565b604080519115158252519081900360200190f35b6102106004803603606081101561016157600080fd5b81359190810190604081016020820135600160201b81111561018257600080fd5b82018360208201111561019457600080fd5b803590602001918460018302840111600160201b831117156101b557600080fd5b919390929091602081019035600160201b8111156101d257600080fd5b8201836020820111156101e457600080fd5b803590602001918460018302840111600160201b8311171561020557600080fd5b5090925090506106fc565b005b61023f6004803603604081101561022857600080fd5b50803590602001356001600160e01b0319166107ec565b604080516001600160a01b039092168252519081900360200190f35b61027e6004803603604081101561027157600080fd5b5080359060200135610aa2565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102c15781810151838201526020016102a9565b50505050905090810190601f1680156102ee5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6102106004803603606081101561031357600080fd5b5080359060208101359060400135610bc1565b6102106004803603604081101561033c57600080fd5b81359190810190604081016020820135600160201b81111561035d57600080fd5b82018360208201111561036f57600080fd5b803590602001918460018302840111600160201b8311171561039057600080fd5b509092509050610c3f565b61023f600480360360208110156103b157600080fd5b5035610cd3565b610210600480360360608110156103ce57600080fd5b508035906001600160a01b0360208201351690604001351515610cee565b6104616004803603604081101561040257600080fd5b81359190810190604081016020820135600160201b81111561042357600080fd5b82018360208201111561043557600080fd5b803590602001918460018302840111600160201b8311171561045657600080fd5b509092509050610d67565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049b578181015183820152602001610483565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610210600480360360608110156104ec57600080fd5b813591602081013591810190606081016040820135600160201b81111561051257600080fd5b82018360208201111561052457600080fd5b803590602001918460018302840111600160201b8311171561054557600080fd5b509092509050610e2e565b6104616004803603602081101561056657600080fd5b5035610ea9565b6102106004803603604081101561058357600080fd5b81359190810190604081016020820135600160201b8111156105a457600080fd5b8201836020820111156105b657600080fd5b803590602001918460018302840111600160201b831117156105d757600080fd5b509092509050610f4a565b610461600480360360208110156105f857600080fd5b5035610fde565b61061c6004803603602081101561061557600080fd5b5035611046565b6040805192835260208301919091528051918290030190f35b6102106004803603604081101561064b57600080fd5b50803590602001356001600160a01b0316611060565b6102106004803603606081101561067757600080fd5b5080359060208101356001600160e01b03191690604001356001600160a01b03166110d8565b610137600480360360608110156106b357600080fd5b508035906001600160a01b0360208201358116916040013516611164565b60006001600160e01b03198216631674750f60e21b14806106f657506106f68261118a565b92915050565b84610706816111af565b61070f57600080fd5b828260066000898152602001908152602001600020878760405180838380828437808301925050509250505090815260200160405180910390209190610756929190611346565b50857fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550868688886040518080602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600083820152604051601f909101601f19169092018290039850909650505050505050a2505050505050565b60008281526003602090815260408083206001600160e01b0319851684529091528120546001600160a01b031680156108265790506106f6565b600061083185610cd3565b90506001600160a01b03811661084c576000925050506106f6565b604080516301ffc9a760e01b602480830182905283518084039091018152604490920183526020820180516001600160e01b03169091178152915181516000936060936001600160a01b038716939092909182918083835b602083106108c35780518252601f1990920191602091820191016108a4565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610923576040519150601f19603f3d011682016040523d82523d6000602084013e610928565b606091505b509150915081158061093b575060208151105b8061095f575080601f8151811061094e57fe5b01602001516001600160f81b031916155b156109715760009450505050506106f6565b604080516001600160e01b0319881660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b178152915181516001600160a01b0387169382918083835b602083106109e85780518252601f1990920191602091820191016109c9565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610a48576040519150601f19603f3d011682016040523d82523d6000602084013e610a4d565b606091505b509092509050811580610a61575060208151105b80610a85575080601f81518110610a7457fe5b01602001516001600160f81b031916155b15610a975760009450505050506106f6565b509095945050505050565b600082815260208190526040812060609060015b848111610ba35780851615801590610aee57506000818152602083905260409020546002600019610100600184161502019091160415155b15610b9b576000818152602083815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845284939192839190830182828015610b895780601f10610b5e57610100808354040283529160200191610b89565b820191906000526020600020905b815481529060010190602001808311610b6c57829003601f168201915b50505050509050935093505050610bba565b60011b610ab6565b505060408051602081019091526000808252925090505b9250929050565b82610bcb816111af565b610bd457600080fd5b604080518082018252848152602080820185815260008881526005835284902092518355516001909201919091558151858152908101849052815186927f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46928290030190a250505050565b82610c49816111af565b610c5257600080fd5b6000848152600260205260409020610c6b908484611346565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a250505050565b6000908152600160205260409020546001600160a01b031690565b6000838152600860209081526040808320338085529083528184206001600160a01b03871680865290845293829020805460ff191686151590811790915582519081529151909287927fe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df929081900390910190a4505050565b6060600660008581526020019081526020016000208383604051808383808284379190910194855250506040805160209481900385018120805460026001821615610100026000190190911604601f81018790048702830187019093528282529094909350909150830182828015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b505050505090509392505050565b83610e38816111af565b610e4157600080fd5b6000198401841615610e5257600080fd5b6000858152602081815260408083208784529091529020610e74908484611346565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b60008181526004602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015610f3e5780601f10610f1357610100808354040283529160200191610f3e565b820191906000526020600020905b815481529060010190602001808311610f2157829003601f168201915b50505050509050919050565b82610f54816111af565b610f5d57600080fd5b6000848152600460205260409020610f76908484611346565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a250505050565b600081815260026020818152604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383526060939091830182828015610f3e5780601f10610f1357610100808354040283529160200191610f3e565b600090815260056020526040902080546001909101549091565b8161106a816111af565b61107357600080fd5b60008381526001602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251908152915185927f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd292908290030190a2505050565b826110e2816111af565b6110eb57600080fd5b60008481526003602090815260408083206001600160e01b031987168085529083529281902080546001600160a01b0319166001600160a01b0387169081179091558151908152905187927f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa928290030190a350505050565b600860209081526000938452604080852082529284528284209052825290205460ff1681565b60006001600160e01b0319821663c869023360e01b14806106f657506106f682611276565b600754604080516302571be360e01b815260048101849052905160009283926001600160a01b03909116916302571be391602480820192602092909190829003018186803b15801561120057600080fd5b505afa158015611214573d6000803e3d6000fd5b505050506040513d602081101561122a57600080fd5b505190506001600160a01b03811633148061126f575060008381526008602090815260408083206001600160a01b0385168452825280832033845290915290205460ff165b9392505050565b60006001600160e01b0319821663691f343160e01b14806106f657506106f682600060405180806113e260249139602401905060405180910390206001600160e01b031916826001600160e01b03191614806106f657506106f68260006001600160e01b0319821663bc1c58d160e01b14806106f657506106f68260006001600160e01b03198216631d9dabef60e11b14806106f657506106f68260006001600160e01b03198216631101d5ab60e11b14806106f657506301ffc9a760e01b6001600160e01b03198316146106f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113875782800160ff198235161785556113b4565b828001600101855582156113b4579182015b828111156113b4578235825591602001919060010190611399565b506113c09291506113c4565b5090565b6113de91905b808211156113c057600081556001016113ca565b9056fe696e74657266616365496d706c656d656e74657228627974657333322c62797465733429a265627a7a723158209a85bf874b0e6e6e9c152587f457db751e7a35b866a14a64a10c90b8283cb39e64736f6c63430005110032"
>>>>>>> Upgrade to solc 0.6.4 for Wallet
>>>>>>> Upgrade to solc 0.6.4 for Wallet

// DeployPublicResolver deploys a new Ethereum contract, binding an instance of PublicResolver to it.
func DeployPublicResolver(auth *bind.TransactOpts, backend bind.ContractBackend, _ens common.Address) (common.Address, *types.Transaction, *PublicResolver, error) {
	parsed, err := abi.JSON(strings.NewReader(PublicResolverABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PublicResolverBin), backend, _ens)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PublicResolver{PublicResolverCaller: PublicResolverCaller{contract: contract}, PublicResolverTransactor: PublicResolverTransactor{contract: contract}, PublicResolverFilterer: PublicResolverFilterer{contract: contract}}, nil
}

// PublicResolver is an auto generated Go binding around an Ethereum contract.
type PublicResolver struct {
	PublicResolverCaller     // Read-only binding to the contract
	PublicResolverTransactor // Write-only binding to the contract
	PublicResolverFilterer   // Log filterer for contract events
}

// PublicResolverCaller is an auto generated read-only Go binding around an Ethereum contract.
type PublicResolverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicResolverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PublicResolverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicResolverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PublicResolverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicResolverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PublicResolverSession struct {
	Contract     *PublicResolver   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PublicResolverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PublicResolverCallerSession struct {
	Contract *PublicResolverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// PublicResolverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PublicResolverTransactorSession struct {
	Contract     *PublicResolverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// PublicResolverRaw is an auto generated low-level Go binding around an Ethereum contract.
type PublicResolverRaw struct {
	Contract *PublicResolver // Generic contract binding to access the raw methods on
}

// PublicResolverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PublicResolverCallerRaw struct {
	Contract *PublicResolverCaller // Generic read-only contract binding to access the raw methods on
}

// PublicResolverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PublicResolverTransactorRaw struct {
	Contract *PublicResolverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPublicResolver creates a new instance of PublicResolver, bound to a specific deployed contract.
func NewPublicResolver(address common.Address, backend bind.ContractBackend) (*PublicResolver, error) {
	contract, err := bindPublicResolver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PublicResolver{PublicResolverCaller: PublicResolverCaller{contract: contract}, PublicResolverTransactor: PublicResolverTransactor{contract: contract}, PublicResolverFilterer: PublicResolverFilterer{contract: contract}}, nil
}

// NewPublicResolverCaller creates a new read-only instance of PublicResolver, bound to a specific deployed contract.
func NewPublicResolverCaller(address common.Address, caller bind.ContractCaller) (*PublicResolverCaller, error) {
	contract, err := bindPublicResolver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PublicResolverCaller{contract: contract}, nil
}

// NewPublicResolverTransactor creates a new write-only instance of PublicResolver, bound to a specific deployed contract.
func NewPublicResolverTransactor(address common.Address, transactor bind.ContractTransactor) (*PublicResolverTransactor, error) {
	contract, err := bindPublicResolver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PublicResolverTransactor{contract: contract}, nil
}

// NewPublicResolverFilterer creates a new log filterer instance of PublicResolver, bound to a specific deployed contract.
func NewPublicResolverFilterer(address common.Address, filterer bind.ContractFilterer) (*PublicResolverFilterer, error) {
	contract, err := bindPublicResolver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PublicResolverFilterer{contract: contract}, nil
}

// bindPublicResolver binds a generic wrapper to an already deployed contract.
func bindPublicResolver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PublicResolverABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicResolver *PublicResolverRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _PublicResolver.Contract.PublicResolverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicResolver *PublicResolverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicResolver.Contract.PublicResolverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicResolver *PublicResolverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicResolver.Contract.PublicResolverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicResolver *PublicResolverCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _PublicResolver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicResolver *PublicResolverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicResolver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicResolver *PublicResolverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicResolver.Contract.contract.Transact(opts, method, params...)
}

// ABI is a free data retrieval call binding the contract method 0x2203ab56.
//
// Solidity: function ABI(bytes32 node, uint256 contentTypes) constant returns(uint256, bytes)
func (_PublicResolver *PublicResolverCaller) ABI(opts *bind.CallOpts, node [32]byte, contentTypes *big.Int) (*big.Int, []byte, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _PublicResolver.contract.Call(opts, out, "ABI", node, contentTypes)
	return *ret0, *ret1, err
}

// ABI is a free data retrieval call binding the contract method 0x2203ab56.
//
// Solidity: function ABI(bytes32 node, uint256 contentTypes) constant returns(uint256, bytes)
func (_PublicResolver *PublicResolverSession) ABI(node [32]byte, contentTypes *big.Int) (*big.Int, []byte, error) {
	return _PublicResolver.Contract.ABI(&_PublicResolver.CallOpts, node, contentTypes)
}

// ABI is a free data retrieval call binding the contract method 0x2203ab56.
//
// Solidity: function ABI(bytes32 node, uint256 contentTypes) constant returns(uint256, bytes)
func (_PublicResolver *PublicResolverCallerSession) ABI(node [32]byte, contentTypes *big.Int) (*big.Int, []byte, error) {
	return _PublicResolver.Contract.ABI(&_PublicResolver.CallOpts, node, contentTypes)
}

// Addr is a free data retrieval call binding the contract method 0x3b3b57de.
//
// Solidity: function addr(bytes32 node) constant returns(address)
func (_PublicResolver *PublicResolverCaller) Addr(opts *bind.CallOpts, node [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "addr", node)
	return *ret0, err
}

// Addr is a free data retrieval call binding the contract method 0x3b3b57de.
//
// Solidity: function addr(bytes32 node) constant returns(address)
func (_PublicResolver *PublicResolverSession) Addr(node [32]byte) (common.Address, error) {
	return _PublicResolver.Contract.Addr(&_PublicResolver.CallOpts, node)
}

// Addr is a free data retrieval call binding the contract method 0x3b3b57de.
//
// Solidity: function addr(bytes32 node) constant returns(address)
func (_PublicResolver *PublicResolverCallerSession) Addr(node [32]byte) (common.Address, error) {
	return _PublicResolver.Contract.Addr(&_PublicResolver.CallOpts, node)
}

// Addr0 is a free data retrieval call binding the contract method 0xf1cb7e06.
//
// Solidity: function addr(bytes32 node, uint256 coinType) constant returns(bytes)
func (_PublicResolver *PublicResolverCaller) Addr0(opts *bind.CallOpts, node [32]byte, coinType *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "addr0", node, coinType)
	return *ret0, err
}

// Addr0 is a free data retrieval call binding the contract method 0xf1cb7e06.
//
// Solidity: function addr(bytes32 node, uint256 coinType) constant returns(bytes)
func (_PublicResolver *PublicResolverSession) Addr0(node [32]byte, coinType *big.Int) ([]byte, error) {
	return _PublicResolver.Contract.Addr0(&_PublicResolver.CallOpts, node, coinType)
}

// Addr0 is a free data retrieval call binding the contract method 0xf1cb7e06.
//
// Solidity: function addr(bytes32 node, uint256 coinType) constant returns(bytes)
func (_PublicResolver *PublicResolverCallerSession) Addr0(node [32]byte, coinType *big.Int) ([]byte, error) {
	return _PublicResolver.Contract.Addr0(&_PublicResolver.CallOpts, node, coinType)
}

// Authorisations is a free data retrieval call binding the contract method 0xf86bc879.
//
// Solidity: function authorisations(bytes32 , address , address ) constant returns(bool)
func (_PublicResolver *PublicResolverCaller) Authorisations(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address, arg2 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "authorisations", arg0, arg1, arg2)
	return *ret0, err
}

// Authorisations is a free data retrieval call binding the contract method 0xf86bc879.
//
// Solidity: function authorisations(bytes32 , address , address ) constant returns(bool)
func (_PublicResolver *PublicResolverSession) Authorisations(arg0 [32]byte, arg1 common.Address, arg2 common.Address) (bool, error) {
	return _PublicResolver.Contract.Authorisations(&_PublicResolver.CallOpts, arg0, arg1, arg2)
}

// Authorisations is a free data retrieval call binding the contract method 0xf86bc879.
//
// Solidity: function authorisations(bytes32 , address , address ) constant returns(bool)
func (_PublicResolver *PublicResolverCallerSession) Authorisations(arg0 [32]byte, arg1 common.Address, arg2 common.Address) (bool, error) {
	return _PublicResolver.Contract.Authorisations(&_PublicResolver.CallOpts, arg0, arg1, arg2)
}

// Contenthash is a free data retrieval call binding the contract method 0xbc1c58d1.
//
// Solidity: function contenthash(bytes32 node) constant returns(bytes)
func (_PublicResolver *PublicResolverCaller) Contenthash(opts *bind.CallOpts, node [32]byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "contenthash", node)
	return *ret0, err
}

// Contenthash is a free data retrieval call binding the contract method 0xbc1c58d1.
//
// Solidity: function contenthash(bytes32 node) constant returns(bytes)
func (_PublicResolver *PublicResolverSession) Contenthash(node [32]byte) ([]byte, error) {
	return _PublicResolver.Contract.Contenthash(&_PublicResolver.CallOpts, node)
}

// Contenthash is a free data retrieval call binding the contract method 0xbc1c58d1.
//
// Solidity: function contenthash(bytes32 node) constant returns(bytes)
func (_PublicResolver *PublicResolverCallerSession) Contenthash(node [32]byte) ([]byte, error) {
	return _PublicResolver.Contract.Contenthash(&_PublicResolver.CallOpts, node)
}

// DnsRecord is a free data retrieval call binding the contract method 0xa8fa5682.
//
// Solidity: function dnsRecord(bytes32 node, bytes32 name, uint16 resource) constant returns(bytes)
func (_PublicResolver *PublicResolverCaller) DnsRecord(opts *bind.CallOpts, node [32]byte, name [32]byte, resource uint16) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "dnsRecord", node, name, resource)
	return *ret0, err
}

// DnsRecord is a free data retrieval call binding the contract method 0xa8fa5682.
//
// Solidity: function dnsRecord(bytes32 node, bytes32 name, uint16 resource) constant returns(bytes)
func (_PublicResolver *PublicResolverSession) DnsRecord(node [32]byte, name [32]byte, resource uint16) ([]byte, error) {
	return _PublicResolver.Contract.DnsRecord(&_PublicResolver.CallOpts, node, name, resource)
}

// DnsRecord is a free data retrieval call binding the contract method 0xa8fa5682.
//
// Solidity: function dnsRecord(bytes32 node, bytes32 name, uint16 resource) constant returns(bytes)
func (_PublicResolver *PublicResolverCallerSession) DnsRecord(node [32]byte, name [32]byte, resource uint16) ([]byte, error) {
	return _PublicResolver.Contract.DnsRecord(&_PublicResolver.CallOpts, node, name, resource)
}

// HasDNSRecords is a free data retrieval call binding the contract method 0x4cbf6ba4.
//
// Solidity: function hasDNSRecords(bytes32 node, bytes32 name) constant returns(bool)
func (_PublicResolver *PublicResolverCaller) HasDNSRecords(opts *bind.CallOpts, node [32]byte, name [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "hasDNSRecords", node, name)
	return *ret0, err
}

// HasDNSRecords is a free data retrieval call binding the contract method 0x4cbf6ba4.
//
// Solidity: function hasDNSRecords(bytes32 node, bytes32 name) constant returns(bool)
func (_PublicResolver *PublicResolverSession) HasDNSRecords(node [32]byte, name [32]byte) (bool, error) {
	return _PublicResolver.Contract.HasDNSRecords(&_PublicResolver.CallOpts, node, name)
}

// HasDNSRecords is a free data retrieval call binding the contract method 0x4cbf6ba4.
//
// Solidity: function hasDNSRecords(bytes32 node, bytes32 name) constant returns(bool)
func (_PublicResolver *PublicResolverCallerSession) HasDNSRecords(node [32]byte, name [32]byte) (bool, error) {
	return _PublicResolver.Contract.HasDNSRecords(&_PublicResolver.CallOpts, node, name)
}

// InterfaceImplementer is a free data retrieval call binding the contract method 0x124a319c.
//
// Solidity: function interfaceImplementer(bytes32 node, bytes4 interfaceID) constant returns(address)
func (_PublicResolver *PublicResolverCaller) InterfaceImplementer(opts *bind.CallOpts, node [32]byte, interfaceID [4]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "interfaceImplementer", node, interfaceID)
	return *ret0, err
}

// InterfaceImplementer is a free data retrieval call binding the contract method 0x124a319c.
//
// Solidity: function interfaceImplementer(bytes32 node, bytes4 interfaceID) constant returns(address)
func (_PublicResolver *PublicResolverSession) InterfaceImplementer(node [32]byte, interfaceID [4]byte) (common.Address, error) {
	return _PublicResolver.Contract.InterfaceImplementer(&_PublicResolver.CallOpts, node, interfaceID)
}

// InterfaceImplementer is a free data retrieval call binding the contract method 0x124a319c.
//
// Solidity: function interfaceImplementer(bytes32 node, bytes4 interfaceID) constant returns(address)
func (_PublicResolver *PublicResolverCallerSession) InterfaceImplementer(node [32]byte, interfaceID [4]byte) (common.Address, error) {
	return _PublicResolver.Contract.InterfaceImplementer(&_PublicResolver.CallOpts, node, interfaceID)
}

// Name is a free data retrieval call binding the contract method 0x691f3431.
//
// Solidity: function name(bytes32 node) constant returns(string)
func (_PublicResolver *PublicResolverCaller) Name(opts *bind.CallOpts, node [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "name", node)
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x691f3431.
//
// Solidity: function name(bytes32 node) constant returns(string)
func (_PublicResolver *PublicResolverSession) Name(node [32]byte) (string, error) {
	return _PublicResolver.Contract.Name(&_PublicResolver.CallOpts, node)
}

// Name is a free data retrieval call binding the contract method 0x691f3431.
//
// Solidity: function name(bytes32 node) constant returns(string)
func (_PublicResolver *PublicResolverCallerSession) Name(node [32]byte) (string, error) {
	return _PublicResolver.Contract.Name(&_PublicResolver.CallOpts, node)
}

// Pubkey is a free data retrieval call binding the contract method 0xc8690233.
//
// Solidity: function pubkey(bytes32 node) constant returns(bytes32 x, bytes32 y)
func (_PublicResolver *PublicResolverCaller) Pubkey(opts *bind.CallOpts, node [32]byte) (struct {
	X [32]byte
	Y [32]byte
}, error) {
	ret := new(struct {
		X [32]byte
		Y [32]byte
	})
	out := ret
	err := _PublicResolver.contract.Call(opts, out, "pubkey", node)
	return *ret, err
}

// Pubkey is a free data retrieval call binding the contract method 0xc8690233.
//
// Solidity: function pubkey(bytes32 node) constant returns(bytes32 x, bytes32 y)
func (_PublicResolver *PublicResolverSession) Pubkey(node [32]byte) (struct {
	X [32]byte
	Y [32]byte
}, error) {
	return _PublicResolver.Contract.Pubkey(&_PublicResolver.CallOpts, node)
}

// Pubkey is a free data retrieval call binding the contract method 0xc8690233.
//
// Solidity: function pubkey(bytes32 node) constant returns(bytes32 x, bytes32 y)
func (_PublicResolver *PublicResolverCallerSession) Pubkey(node [32]byte) (struct {
	X [32]byte
	Y [32]byte
}, error) {
	return _PublicResolver.Contract.Pubkey(&_PublicResolver.CallOpts, node)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) constant returns(bool)
func (_PublicResolver *PublicResolverCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "supportsInterface", interfaceID)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) constant returns(bool)
func (_PublicResolver *PublicResolverSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _PublicResolver.Contract.SupportsInterface(&_PublicResolver.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) constant returns(bool)
func (_PublicResolver *PublicResolverCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _PublicResolver.Contract.SupportsInterface(&_PublicResolver.CallOpts, interfaceID)
}

// Text is a free data retrieval call binding the contract method 0x59d1d43c.
//
// Solidity: function text(bytes32 node, string key) constant returns(string)
func (_PublicResolver *PublicResolverCaller) Text(opts *bind.CallOpts, node [32]byte, key string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "text", node, key)
	return *ret0, err
}

// Text is a free data retrieval call binding the contract method 0x59d1d43c.
//
// Solidity: function text(bytes32 node, string key) constant returns(string)
func (_PublicResolver *PublicResolverSession) Text(node [32]byte, key string) (string, error) {
	return _PublicResolver.Contract.Text(&_PublicResolver.CallOpts, node, key)
}

// Text is a free data retrieval call binding the contract method 0x59d1d43c.
//
// Solidity: function text(bytes32 node, string key) constant returns(string)
func (_PublicResolver *PublicResolverCallerSession) Text(node [32]byte, key string) (string, error) {
	return _PublicResolver.Contract.Text(&_PublicResolver.CallOpts, node, key)
}

// Zonehash is a free data retrieval call binding the contract method 0x5c98042b.
//
// Solidity: function zonehash(bytes32 node) constant returns(bytes)
func (_PublicResolver *PublicResolverCaller) Zonehash(opts *bind.CallOpts, node [32]byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _PublicResolver.contract.Call(opts, out, "zonehash", node)
	return *ret0, err
}

// Zonehash is a free data retrieval call binding the contract method 0x5c98042b.
//
// Solidity: function zonehash(bytes32 node) constant returns(bytes)
func (_PublicResolver *PublicResolverSession) Zonehash(node [32]byte) ([]byte, error) {
	return _PublicResolver.Contract.Zonehash(&_PublicResolver.CallOpts, node)
}

// Zonehash is a free data retrieval call binding the contract method 0x5c98042b.
//
// Solidity: function zonehash(bytes32 node) constant returns(bytes)
func (_PublicResolver *PublicResolverCallerSession) Zonehash(node [32]byte) ([]byte, error) {
	return _PublicResolver.Contract.Zonehash(&_PublicResolver.CallOpts, node)
}

// ClearDNSZone is a paid mutator transaction binding the contract method 0xad5780af.
//
// Solidity: function clearDNSZone(bytes32 node) returns()
func (_PublicResolver *PublicResolverTransactor) ClearDNSZone(opts *bind.TransactOpts, node [32]byte) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "clearDNSZone", node)
}

// ClearDNSZone is a paid mutator transaction binding the contract method 0xad5780af.
//
// Solidity: function clearDNSZone(bytes32 node) returns()
func (_PublicResolver *PublicResolverSession) ClearDNSZone(node [32]byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.ClearDNSZone(&_PublicResolver.TransactOpts, node)
}

// ClearDNSZone is a paid mutator transaction binding the contract method 0xad5780af.
//
// Solidity: function clearDNSZone(bytes32 node) returns()
func (_PublicResolver *PublicResolverTransactorSession) ClearDNSZone(node [32]byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.ClearDNSZone(&_PublicResolver.TransactOpts, node)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_PublicResolver *PublicResolverTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_PublicResolver *PublicResolverSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.Multicall(&_PublicResolver.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_PublicResolver *PublicResolverTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.Multicall(&_PublicResolver.TransactOpts, data)
}

// SetABI is a paid mutator transaction binding the contract method 0x623195b0.
//
// Solidity: function setABI(bytes32 node, uint256 contentType, bytes data) returns()
func (_PublicResolver *PublicResolverTransactor) SetABI(opts *bind.TransactOpts, node [32]byte, contentType *big.Int, data []byte) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setABI", node, contentType, data)
}

// SetABI is a paid mutator transaction binding the contract method 0x623195b0.
//
// Solidity: function setABI(bytes32 node, uint256 contentType, bytes data) returns()
func (_PublicResolver *PublicResolverSession) SetABI(node [32]byte, contentType *big.Int, data []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetABI(&_PublicResolver.TransactOpts, node, contentType, data)
}

// SetABI is a paid mutator transaction binding the contract method 0x623195b0.
//
// Solidity: function setABI(bytes32 node, uint256 contentType, bytes data) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetABI(node [32]byte, contentType *big.Int, data []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetABI(&_PublicResolver.TransactOpts, node, contentType, data)
}

// SetAddr is a paid mutator transaction binding the contract method 0xd5fa2b00.
//
// Solidity: function setAddr(bytes32 node, address a) returns()
func (_PublicResolver *PublicResolverTransactor) SetAddr(opts *bind.TransactOpts, node [32]byte, a common.Address) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setAddr", node, a)
}

// SetAddr is a paid mutator transaction binding the contract method 0xd5fa2b00.
//
// Solidity: function setAddr(bytes32 node, address a) returns()
func (_PublicResolver *PublicResolverSession) SetAddr(node [32]byte, a common.Address) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetAddr(&_PublicResolver.TransactOpts, node, a)
}

// SetAddr is a paid mutator transaction binding the contract method 0xd5fa2b00.
//
// Solidity: function setAddr(bytes32 node, address a) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetAddr(node [32]byte, a common.Address) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetAddr(&_PublicResolver.TransactOpts, node, a)
}

// SetAddrCoinType is a paid mutator transaction binding the contract method 0x90a01f2d.
//
// Solidity: function setAddrCoinType(bytes32 node, uint256 coinType, bytes a) returns()
func (_PublicResolver *PublicResolverTransactor) SetAddrCoinType(opts *bind.TransactOpts, node [32]byte, coinType *big.Int, a []byte) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setAddrCoinType", node, coinType, a)
}

// SetAddrCoinType is a paid mutator transaction binding the contract method 0x90a01f2d.
//
// Solidity: function setAddrCoinType(bytes32 node, uint256 coinType, bytes a) returns()
func (_PublicResolver *PublicResolverSession) SetAddrCoinType(node [32]byte, coinType *big.Int, a []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetAddrCoinType(&_PublicResolver.TransactOpts, node, coinType, a)
}

// SetAddrCoinType is a paid mutator transaction binding the contract method 0x90a01f2d.
//
// Solidity: function setAddrCoinType(bytes32 node, uint256 coinType, bytes a) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetAddrCoinType(node [32]byte, coinType *big.Int, a []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetAddrCoinType(&_PublicResolver.TransactOpts, node, coinType, a)
}

// SetAuthorisation is a paid mutator transaction binding the contract method 0x3e9ce794.
//
// Solidity: function setAuthorisation(bytes32 node, address target, bool isAuthorised) returns()
func (_PublicResolver *PublicResolverTransactor) SetAuthorisation(opts *bind.TransactOpts, node [32]byte, target common.Address, isAuthorised bool) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setAuthorisation", node, target, isAuthorised)
}

// SetAuthorisation is a paid mutator transaction binding the contract method 0x3e9ce794.
//
// Solidity: function setAuthorisation(bytes32 node, address target, bool isAuthorised) returns()
func (_PublicResolver *PublicResolverSession) SetAuthorisation(node [32]byte, target common.Address, isAuthorised bool) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetAuthorisation(&_PublicResolver.TransactOpts, node, target, isAuthorised)
}

// SetAuthorisation is a paid mutator transaction binding the contract method 0x3e9ce794.
//
// Solidity: function setAuthorisation(bytes32 node, address target, bool isAuthorised) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetAuthorisation(node [32]byte, target common.Address, isAuthorised bool) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetAuthorisation(&_PublicResolver.TransactOpts, node, target, isAuthorised)
}

// SetContenthash is a paid mutator transaction binding the contract method 0x304e6ade.
//
// Solidity: function setContenthash(bytes32 node, bytes hash) returns()
func (_PublicResolver *PublicResolverTransactor) SetContenthash(opts *bind.TransactOpts, node [32]byte, hash []byte) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setContenthash", node, hash)
}

// SetContenthash is a paid mutator transaction binding the contract method 0x304e6ade.
//
// Solidity: function setContenthash(bytes32 node, bytes hash) returns()
func (_PublicResolver *PublicResolverSession) SetContenthash(node [32]byte, hash []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetContenthash(&_PublicResolver.TransactOpts, node, hash)
}

// SetContenthash is a paid mutator transaction binding the contract method 0x304e6ade.
//
// Solidity: function setContenthash(bytes32 node, bytes hash) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetContenthash(node [32]byte, hash []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetContenthash(&_PublicResolver.TransactOpts, node, hash)
}

// SetDNSRecords is a paid mutator transaction binding the contract method 0x0af179d7.
//
// Solidity: function setDNSRecords(bytes32 node, bytes data) returns()
func (_PublicResolver *PublicResolverTransactor) SetDNSRecords(opts *bind.TransactOpts, node [32]byte, data []byte) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setDNSRecords", node, data)
}

// SetDNSRecords is a paid mutator transaction binding the contract method 0x0af179d7.
//
// Solidity: function setDNSRecords(bytes32 node, bytes data) returns()
func (_PublicResolver *PublicResolverSession) SetDNSRecords(node [32]byte, data []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetDNSRecords(&_PublicResolver.TransactOpts, node, data)
}

// SetDNSRecords is a paid mutator transaction binding the contract method 0x0af179d7.
//
// Solidity: function setDNSRecords(bytes32 node, bytes data) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetDNSRecords(node [32]byte, data []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetDNSRecords(&_PublicResolver.TransactOpts, node, data)
}

// SetInterface is a paid mutator transaction binding the contract method 0xe59d895d.
//
// Solidity: function setInterface(bytes32 node, bytes4 interfaceID, address implementer) returns()
func (_PublicResolver *PublicResolverTransactor) SetInterface(opts *bind.TransactOpts, node [32]byte, interfaceID [4]byte, implementer common.Address) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setInterface", node, interfaceID, implementer)
}

// SetInterface is a paid mutator transaction binding the contract method 0xe59d895d.
//
// Solidity: function setInterface(bytes32 node, bytes4 interfaceID, address implementer) returns()
func (_PublicResolver *PublicResolverSession) SetInterface(node [32]byte, interfaceID [4]byte, implementer common.Address) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetInterface(&_PublicResolver.TransactOpts, node, interfaceID, implementer)
}

// SetInterface is a paid mutator transaction binding the contract method 0xe59d895d.
//
// Solidity: function setInterface(bytes32 node, bytes4 interfaceID, address implementer) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetInterface(node [32]byte, interfaceID [4]byte, implementer common.Address) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetInterface(&_PublicResolver.TransactOpts, node, interfaceID, implementer)
}

// SetName is a paid mutator transaction binding the contract method 0x77372213.
//
// Solidity: function setName(bytes32 node, string name) returns()
func (_PublicResolver *PublicResolverTransactor) SetName(opts *bind.TransactOpts, node [32]byte, name string) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setName", node, name)
}

// SetName is a paid mutator transaction binding the contract method 0x77372213.
//
// Solidity: function setName(bytes32 node, string name) returns()
func (_PublicResolver *PublicResolverSession) SetName(node [32]byte, name string) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetName(&_PublicResolver.TransactOpts, node, name)
}

// SetName is a paid mutator transaction binding the contract method 0x77372213.
//
// Solidity: function setName(bytes32 node, string name) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetName(node [32]byte, name string) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetName(&_PublicResolver.TransactOpts, node, name)
}

// SetPubkey is a paid mutator transaction binding the contract method 0x29cd62ea.
//
// Solidity: function setPubkey(bytes32 node, bytes32 x, bytes32 y) returns()
func (_PublicResolver *PublicResolverTransactor) SetPubkey(opts *bind.TransactOpts, node [32]byte, x [32]byte, y [32]byte) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setPubkey", node, x, y)
}

// SetPubkey is a paid mutator transaction binding the contract method 0x29cd62ea.
//
// Solidity: function setPubkey(bytes32 node, bytes32 x, bytes32 y) returns()
func (_PublicResolver *PublicResolverSession) SetPubkey(node [32]byte, x [32]byte, y [32]byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetPubkey(&_PublicResolver.TransactOpts, node, x, y)
}

// SetPubkey is a paid mutator transaction binding the contract method 0x29cd62ea.
//
// Solidity: function setPubkey(bytes32 node, bytes32 x, bytes32 y) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetPubkey(node [32]byte, x [32]byte, y [32]byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetPubkey(&_PublicResolver.TransactOpts, node, x, y)
}

// SetText is a paid mutator transaction binding the contract method 0x10f13a8c.
//
// Solidity: function setText(bytes32 node, string key, string value) returns()
func (_PublicResolver *PublicResolverTransactor) SetText(opts *bind.TransactOpts, node [32]byte, key string, value string) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setText", node, key, value)
}

// SetText is a paid mutator transaction binding the contract method 0x10f13a8c.
//
// Solidity: function setText(bytes32 node, string key, string value) returns()
func (_PublicResolver *PublicResolverSession) SetText(node [32]byte, key string, value string) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetText(&_PublicResolver.TransactOpts, node, key, value)
}

// SetText is a paid mutator transaction binding the contract method 0x10f13a8c.
//
// Solidity: function setText(bytes32 node, string key, string value) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetText(node [32]byte, key string, value string) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetText(&_PublicResolver.TransactOpts, node, key, value)
}

// SetZonehash is a paid mutator transaction binding the contract method 0xce3decdc.
//
// Solidity: function setZonehash(bytes32 node, bytes hash) returns()
func (_PublicResolver *PublicResolverTransactor) SetZonehash(opts *bind.TransactOpts, node [32]byte, hash []byte) (*types.Transaction, error) {
	return _PublicResolver.contract.Transact(opts, "setZonehash", node, hash)
}

// SetZonehash is a paid mutator transaction binding the contract method 0xce3decdc.
//
// Solidity: function setZonehash(bytes32 node, bytes hash) returns()
func (_PublicResolver *PublicResolverSession) SetZonehash(node [32]byte, hash []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetZonehash(&_PublicResolver.TransactOpts, node, hash)
}

// SetZonehash is a paid mutator transaction binding the contract method 0xce3decdc.
//
// Solidity: function setZonehash(bytes32 node, bytes hash) returns()
func (_PublicResolver *PublicResolverTransactorSession) SetZonehash(node [32]byte, hash []byte) (*types.Transaction, error) {
	return _PublicResolver.Contract.SetZonehash(&_PublicResolver.TransactOpts, node, hash)
}

// PublicResolverABIChangedIterator is returned from FilterABIChanged and is used to iterate over the raw logs and unpacked data for ABIChanged events raised by the PublicResolver contract.
type PublicResolverABIChangedIterator struct {
	Event *PublicResolverABIChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverABIChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverABIChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverABIChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverABIChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverABIChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverABIChanged represents a ABIChanged event raised by the PublicResolver contract.
type PublicResolverABIChanged struct {
	Node        [32]byte
	ContentType *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterABIChanged is a free log retrieval operation binding the contract event 0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3.
//
// Solidity: event ABIChanged(bytes32 indexed node, uint256 indexed contentType)
func (_PublicResolver *PublicResolverFilterer) FilterABIChanged(opts *bind.FilterOpts, node [][32]byte, contentType []*big.Int) (*PublicResolverABIChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var contentTypeRule []interface{}
	for _, contentTypeItem := range contentType {
		contentTypeRule = append(contentTypeRule, contentTypeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "ABIChanged", nodeRule, contentTypeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverABIChangedIterator{contract: _PublicResolver.contract, event: "ABIChanged", logs: logs, sub: sub}, nil
}

// WatchABIChanged is a free log subscription operation binding the contract event 0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3.
//
// Solidity: event ABIChanged(bytes32 indexed node, uint256 indexed contentType)
func (_PublicResolver *PublicResolverFilterer) WatchABIChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverABIChanged, node [][32]byte, contentType []*big.Int) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var contentTypeRule []interface{}
	for _, contentTypeItem := range contentType {
		contentTypeRule = append(contentTypeRule, contentTypeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "ABIChanged", nodeRule, contentTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverABIChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "ABIChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseABIChanged is a log parse operation binding the contract event 0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3.
//
// Solidity: event ABIChanged(bytes32 indexed node, uint256 indexed contentType)
func (_PublicResolver *PublicResolverFilterer) ParseABIChanged(log types.Log) (*PublicResolverABIChanged, error) {
	event := new(PublicResolverABIChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "ABIChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverAddrChangedIterator is returned from FilterAddrChanged and is used to iterate over the raw logs and unpacked data for AddrChanged events raised by the PublicResolver contract.
type PublicResolverAddrChangedIterator struct {
	Event *PublicResolverAddrChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverAddrChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverAddrChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverAddrChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverAddrChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverAddrChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverAddrChanged represents a AddrChanged event raised by the PublicResolver contract.
type PublicResolverAddrChanged struct {
	Node [32]byte
	A    common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddrChanged is a free log retrieval operation binding the contract event 0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2.
//
// Solidity: event AddrChanged(bytes32 indexed node, address a)
func (_PublicResolver *PublicResolverFilterer) FilterAddrChanged(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverAddrChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "AddrChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverAddrChangedIterator{contract: _PublicResolver.contract, event: "AddrChanged", logs: logs, sub: sub}, nil
}

// WatchAddrChanged is a free log subscription operation binding the contract event 0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2.
//
// Solidity: event AddrChanged(bytes32 indexed node, address a)
func (_PublicResolver *PublicResolverFilterer) WatchAddrChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverAddrChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "AddrChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverAddrChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "AddrChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddrChanged is a log parse operation binding the contract event 0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2.
//
// Solidity: event AddrChanged(bytes32 indexed node, address a)
func (_PublicResolver *PublicResolverFilterer) ParseAddrChanged(log types.Log) (*PublicResolverAddrChanged, error) {
	event := new(PublicResolverAddrChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "AddrChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverAddressChangedIterator is returned from FilterAddressChanged and is used to iterate over the raw logs and unpacked data for AddressChanged events raised by the PublicResolver contract.
type PublicResolverAddressChangedIterator struct {
	Event *PublicResolverAddressChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverAddressChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverAddressChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverAddressChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverAddressChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverAddressChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverAddressChanged represents a AddressChanged event raised by the PublicResolver contract.
type PublicResolverAddressChanged struct {
	Node       [32]byte
	CoinType   *big.Int
	NewAddress []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddressChanged is a free log retrieval operation binding the contract event 0x65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752.
//
// Solidity: event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress)
func (_PublicResolver *PublicResolverFilterer) FilterAddressChanged(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverAddressChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "AddressChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverAddressChangedIterator{contract: _PublicResolver.contract, event: "AddressChanged", logs: logs, sub: sub}, nil
}

// WatchAddressChanged is a free log subscription operation binding the contract event 0x65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752.
//
// Solidity: event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress)
func (_PublicResolver *PublicResolverFilterer) WatchAddressChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverAddressChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "AddressChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverAddressChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "AddressChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressChanged is a log parse operation binding the contract event 0x65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752.
//
// Solidity: event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress)
func (_PublicResolver *PublicResolverFilterer) ParseAddressChanged(log types.Log) (*PublicResolverAddressChanged, error) {
	event := new(PublicResolverAddressChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "AddressChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverAuthorisationChangedIterator is returned from FilterAuthorisationChanged and is used to iterate over the raw logs and unpacked data for AuthorisationChanged events raised by the PublicResolver contract.
type PublicResolverAuthorisationChangedIterator struct {
	Event *PublicResolverAuthorisationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverAuthorisationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverAuthorisationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverAuthorisationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverAuthorisationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverAuthorisationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverAuthorisationChanged represents a AuthorisationChanged event raised by the PublicResolver contract.
type PublicResolverAuthorisationChanged struct {
	Node         [32]byte
	Owner        common.Address
	Target       common.Address
	IsAuthorised bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAuthorisationChanged is a free log retrieval operation binding the contract event 0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df.
//
// Solidity: event AuthorisationChanged(bytes32 indexed node, address indexed owner, address indexed target, bool isAuthorised)
func (_PublicResolver *PublicResolverFilterer) FilterAuthorisationChanged(opts *bind.FilterOpts, node [][32]byte, owner []common.Address, target []common.Address) (*PublicResolverAuthorisationChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "AuthorisationChanged", nodeRule, ownerRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverAuthorisationChangedIterator{contract: _PublicResolver.contract, event: "AuthorisationChanged", logs: logs, sub: sub}, nil
}

// WatchAuthorisationChanged is a free log subscription operation binding the contract event 0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df.
//
// Solidity: event AuthorisationChanged(bytes32 indexed node, address indexed owner, address indexed target, bool isAuthorised)
func (_PublicResolver *PublicResolverFilterer) WatchAuthorisationChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverAuthorisationChanged, node [][32]byte, owner []common.Address, target []common.Address) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "AuthorisationChanged", nodeRule, ownerRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverAuthorisationChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "AuthorisationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorisationChanged is a log parse operation binding the contract event 0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df.
//
// Solidity: event AuthorisationChanged(bytes32 indexed node, address indexed owner, address indexed target, bool isAuthorised)
func (_PublicResolver *PublicResolverFilterer) ParseAuthorisationChanged(log types.Log) (*PublicResolverAuthorisationChanged, error) {
	event := new(PublicResolverAuthorisationChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "AuthorisationChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverContenthashChangedIterator is returned from FilterContenthashChanged and is used to iterate over the raw logs and unpacked data for ContenthashChanged events raised by the PublicResolver contract.
type PublicResolverContenthashChangedIterator struct {
	Event *PublicResolverContenthashChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverContenthashChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverContenthashChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverContenthashChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverContenthashChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverContenthashChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverContenthashChanged represents a ContenthashChanged event raised by the PublicResolver contract.
type PublicResolverContenthashChanged struct {
	Node [32]byte
	Hash []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContenthashChanged is a free log retrieval operation binding the contract event 0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578.
//
// Solidity: event ContenthashChanged(bytes32 indexed node, bytes hash)
func (_PublicResolver *PublicResolverFilterer) FilterContenthashChanged(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverContenthashChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "ContenthashChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverContenthashChangedIterator{contract: _PublicResolver.contract, event: "ContenthashChanged", logs: logs, sub: sub}, nil
}

// WatchContenthashChanged is a free log subscription operation binding the contract event 0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578.
//
// Solidity: event ContenthashChanged(bytes32 indexed node, bytes hash)
func (_PublicResolver *PublicResolverFilterer) WatchContenthashChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverContenthashChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "ContenthashChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverContenthashChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "ContenthashChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContenthashChanged is a log parse operation binding the contract event 0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578.
//
// Solidity: event ContenthashChanged(bytes32 indexed node, bytes hash)
func (_PublicResolver *PublicResolverFilterer) ParseContenthashChanged(log types.Log) (*PublicResolverContenthashChanged, error) {
	event := new(PublicResolverContenthashChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "ContenthashChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverDNSRecordChangedIterator is returned from FilterDNSRecordChanged and is used to iterate over the raw logs and unpacked data for DNSRecordChanged events raised by the PublicResolver contract.
type PublicResolverDNSRecordChangedIterator struct {
	Event *PublicResolverDNSRecordChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverDNSRecordChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverDNSRecordChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverDNSRecordChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverDNSRecordChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverDNSRecordChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverDNSRecordChanged represents a DNSRecordChanged event raised by the PublicResolver contract.
type PublicResolverDNSRecordChanged struct {
	Node     [32]byte
	Name     []byte
	Resource uint16
	Record   []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDNSRecordChanged is a free log retrieval operation binding the contract event 0x52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b.
//
// Solidity: event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record)
func (_PublicResolver *PublicResolverFilterer) FilterDNSRecordChanged(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverDNSRecordChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "DNSRecordChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverDNSRecordChangedIterator{contract: _PublicResolver.contract, event: "DNSRecordChanged", logs: logs, sub: sub}, nil
}

// WatchDNSRecordChanged is a free log subscription operation binding the contract event 0x52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b.
//
// Solidity: event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record)
func (_PublicResolver *PublicResolverFilterer) WatchDNSRecordChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverDNSRecordChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "DNSRecordChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverDNSRecordChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "DNSRecordChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDNSRecordChanged is a log parse operation binding the contract event 0x52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b.
//
// Solidity: event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record)
func (_PublicResolver *PublicResolverFilterer) ParseDNSRecordChanged(log types.Log) (*PublicResolverDNSRecordChanged, error) {
	event := new(PublicResolverDNSRecordChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "DNSRecordChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverDNSRecordDeletedIterator is returned from FilterDNSRecordDeleted and is used to iterate over the raw logs and unpacked data for DNSRecordDeleted events raised by the PublicResolver contract.
type PublicResolverDNSRecordDeletedIterator struct {
	Event *PublicResolverDNSRecordDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverDNSRecordDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverDNSRecordDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverDNSRecordDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverDNSRecordDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverDNSRecordDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverDNSRecordDeleted represents a DNSRecordDeleted event raised by the PublicResolver contract.
type PublicResolverDNSRecordDeleted struct {
	Node     [32]byte
	Name     []byte
	Resource uint16
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDNSRecordDeleted is a free log retrieval operation binding the contract event 0x03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a1207.
//
// Solidity: event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource)
func (_PublicResolver *PublicResolverFilterer) FilterDNSRecordDeleted(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverDNSRecordDeletedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "DNSRecordDeleted", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverDNSRecordDeletedIterator{contract: _PublicResolver.contract, event: "DNSRecordDeleted", logs: logs, sub: sub}, nil
}

// WatchDNSRecordDeleted is a free log subscription operation binding the contract event 0x03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a1207.
//
// Solidity: event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource)
func (_PublicResolver *PublicResolverFilterer) WatchDNSRecordDeleted(opts *bind.WatchOpts, sink chan<- *PublicResolverDNSRecordDeleted, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "DNSRecordDeleted", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverDNSRecordDeleted)
				if err := _PublicResolver.contract.UnpackLog(event, "DNSRecordDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDNSRecordDeleted is a log parse operation binding the contract event 0x03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a1207.
//
// Solidity: event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource)
func (_PublicResolver *PublicResolverFilterer) ParseDNSRecordDeleted(log types.Log) (*PublicResolverDNSRecordDeleted, error) {
	event := new(PublicResolverDNSRecordDeleted)
	if err := _PublicResolver.contract.UnpackLog(event, "DNSRecordDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverDNSZoneClearedIterator is returned from FilterDNSZoneCleared and is used to iterate over the raw logs and unpacked data for DNSZoneCleared events raised by the PublicResolver contract.
type PublicResolverDNSZoneClearedIterator struct {
	Event *PublicResolverDNSZoneCleared // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverDNSZoneClearedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverDNSZoneCleared)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverDNSZoneCleared)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverDNSZoneClearedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverDNSZoneClearedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverDNSZoneCleared represents a DNSZoneCleared event raised by the PublicResolver contract.
type PublicResolverDNSZoneCleared struct {
	Node [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDNSZoneCleared is a free log retrieval operation binding the contract event 0xb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a1983.
//
// Solidity: event DNSZoneCleared(bytes32 indexed node)
func (_PublicResolver *PublicResolverFilterer) FilterDNSZoneCleared(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverDNSZoneClearedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "DNSZoneCleared", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverDNSZoneClearedIterator{contract: _PublicResolver.contract, event: "DNSZoneCleared", logs: logs, sub: sub}, nil
}

// WatchDNSZoneCleared is a free log subscription operation binding the contract event 0xb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a1983.
//
// Solidity: event DNSZoneCleared(bytes32 indexed node)
func (_PublicResolver *PublicResolverFilterer) WatchDNSZoneCleared(opts *bind.WatchOpts, sink chan<- *PublicResolverDNSZoneCleared, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "DNSZoneCleared", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverDNSZoneCleared)
				if err := _PublicResolver.contract.UnpackLog(event, "DNSZoneCleared", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDNSZoneCleared is a log parse operation binding the contract event 0xb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a1983.
//
// Solidity: event DNSZoneCleared(bytes32 indexed node)
func (_PublicResolver *PublicResolverFilterer) ParseDNSZoneCleared(log types.Log) (*PublicResolverDNSZoneCleared, error) {
	event := new(PublicResolverDNSZoneCleared)
	if err := _PublicResolver.contract.UnpackLog(event, "DNSZoneCleared", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverDNSZonehashChangedIterator is returned from FilterDNSZonehashChanged and is used to iterate over the raw logs and unpacked data for DNSZonehashChanged events raised by the PublicResolver contract.
type PublicResolverDNSZonehashChangedIterator struct {
	Event *PublicResolverDNSZonehashChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverDNSZonehashChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverDNSZonehashChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverDNSZonehashChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverDNSZonehashChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverDNSZonehashChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverDNSZonehashChanged represents a DNSZonehashChanged event raised by the PublicResolver contract.
type PublicResolverDNSZonehashChanged struct {
	Node         [32]byte
	Lastzonehash []byte
	Zonehash     []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDNSZonehashChanged is a free log retrieval operation binding the contract event 0x8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f85.
//
// Solidity: event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash)
func (_PublicResolver *PublicResolverFilterer) FilterDNSZonehashChanged(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverDNSZonehashChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "DNSZonehashChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverDNSZonehashChangedIterator{contract: _PublicResolver.contract, event: "DNSZonehashChanged", logs: logs, sub: sub}, nil
}

// WatchDNSZonehashChanged is a free log subscription operation binding the contract event 0x8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f85.
//
// Solidity: event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash)
func (_PublicResolver *PublicResolverFilterer) WatchDNSZonehashChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverDNSZonehashChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "DNSZonehashChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverDNSZonehashChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "DNSZonehashChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDNSZonehashChanged is a log parse operation binding the contract event 0x8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f85.
//
// Solidity: event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash)
func (_PublicResolver *PublicResolverFilterer) ParseDNSZonehashChanged(log types.Log) (*PublicResolverDNSZonehashChanged, error) {
	event := new(PublicResolverDNSZonehashChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "DNSZonehashChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverInterfaceChangedIterator is returned from FilterInterfaceChanged and is used to iterate over the raw logs and unpacked data for InterfaceChanged events raised by the PublicResolver contract.
type PublicResolverInterfaceChangedIterator struct {
	Event *PublicResolverInterfaceChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverInterfaceChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverInterfaceChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverInterfaceChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverInterfaceChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverInterfaceChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverInterfaceChanged represents a InterfaceChanged event raised by the PublicResolver contract.
type PublicResolverInterfaceChanged struct {
	Node        [32]byte
	InterfaceID [4]byte
	Implementer common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterInterfaceChanged is a free log retrieval operation binding the contract event 0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa.
//
// Solidity: event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer)
func (_PublicResolver *PublicResolverFilterer) FilterInterfaceChanged(opts *bind.FilterOpts, node [][32]byte, interfaceID [][4]byte) (*PublicResolverInterfaceChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var interfaceIDRule []interface{}
	for _, interfaceIDItem := range interfaceID {
		interfaceIDRule = append(interfaceIDRule, interfaceIDItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "InterfaceChanged", nodeRule, interfaceIDRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverInterfaceChangedIterator{contract: _PublicResolver.contract, event: "InterfaceChanged", logs: logs, sub: sub}, nil
}

// WatchInterfaceChanged is a free log subscription operation binding the contract event 0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa.
//
// Solidity: event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer)
func (_PublicResolver *PublicResolverFilterer) WatchInterfaceChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverInterfaceChanged, node [][32]byte, interfaceID [][4]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var interfaceIDRule []interface{}
	for _, interfaceIDItem := range interfaceID {
		interfaceIDRule = append(interfaceIDRule, interfaceIDItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "InterfaceChanged", nodeRule, interfaceIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverInterfaceChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "InterfaceChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInterfaceChanged is a log parse operation binding the contract event 0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa.
//
// Solidity: event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer)
func (_PublicResolver *PublicResolverFilterer) ParseInterfaceChanged(log types.Log) (*PublicResolverInterfaceChanged, error) {
	event := new(PublicResolverInterfaceChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "InterfaceChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverNameChangedIterator is returned from FilterNameChanged and is used to iterate over the raw logs and unpacked data for NameChanged events raised by the PublicResolver contract.
type PublicResolverNameChangedIterator struct {
	Event *PublicResolverNameChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverNameChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverNameChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverNameChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverNameChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverNameChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverNameChanged represents a NameChanged event raised by the PublicResolver contract.
type PublicResolverNameChanged struct {
	Node [32]byte
	Name string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterNameChanged is a free log retrieval operation binding the contract event 0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7.
//
// Solidity: event NameChanged(bytes32 indexed node, string name)
func (_PublicResolver *PublicResolverFilterer) FilterNameChanged(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverNameChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "NameChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverNameChangedIterator{contract: _PublicResolver.contract, event: "NameChanged", logs: logs, sub: sub}, nil
}

// WatchNameChanged is a free log subscription operation binding the contract event 0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7.
//
// Solidity: event NameChanged(bytes32 indexed node, string name)
func (_PublicResolver *PublicResolverFilterer) WatchNameChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverNameChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "NameChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverNameChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "NameChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNameChanged is a log parse operation binding the contract event 0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7.
//
// Solidity: event NameChanged(bytes32 indexed node, string name)
func (_PublicResolver *PublicResolverFilterer) ParseNameChanged(log types.Log) (*PublicResolverNameChanged, error) {
	event := new(PublicResolverNameChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "NameChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverPubkeyChangedIterator is returned from FilterPubkeyChanged and is used to iterate over the raw logs and unpacked data for PubkeyChanged events raised by the PublicResolver contract.
type PublicResolverPubkeyChangedIterator struct {
	Event *PublicResolverPubkeyChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverPubkeyChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverPubkeyChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverPubkeyChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverPubkeyChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverPubkeyChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverPubkeyChanged represents a PubkeyChanged event raised by the PublicResolver contract.
type PublicResolverPubkeyChanged struct {
	Node [32]byte
	X    [32]byte
	Y    [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPubkeyChanged is a free log retrieval operation binding the contract event 0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46.
//
// Solidity: event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y)
func (_PublicResolver *PublicResolverFilterer) FilterPubkeyChanged(opts *bind.FilterOpts, node [][32]byte) (*PublicResolverPubkeyChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "PubkeyChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverPubkeyChangedIterator{contract: _PublicResolver.contract, event: "PubkeyChanged", logs: logs, sub: sub}, nil
}

// WatchPubkeyChanged is a free log subscription operation binding the contract event 0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46.
//
// Solidity: event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y)
func (_PublicResolver *PublicResolverFilterer) WatchPubkeyChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverPubkeyChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "PubkeyChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverPubkeyChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "PubkeyChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePubkeyChanged is a log parse operation binding the contract event 0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46.
//
// Solidity: event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y)
func (_PublicResolver *PublicResolverFilterer) ParsePubkeyChanged(log types.Log) (*PublicResolverPubkeyChanged, error) {
	event := new(PublicResolverPubkeyChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "PubkeyChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PublicResolverTextChangedIterator is returned from FilterTextChanged and is used to iterate over the raw logs and unpacked data for TextChanged events raised by the PublicResolver contract.
type PublicResolverTextChangedIterator struct {
	Event *PublicResolverTextChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicResolverTextChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicResolverTextChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicResolverTextChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicResolverTextChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicResolverTextChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicResolverTextChanged represents a TextChanged event raised by the PublicResolver contract.
type PublicResolverTextChanged struct {
	Node       [32]byte
	IndexedKey common.Hash
	Key        string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTextChanged is a free log retrieval operation binding the contract event 0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550.
//
// Solidity: event TextChanged(bytes32 indexed node, string indexed indexedKey, string key)
func (_PublicResolver *PublicResolverFilterer) FilterTextChanged(opts *bind.FilterOpts, node [][32]byte, indexedKey []string) (*PublicResolverTextChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var indexedKeyRule []interface{}
	for _, indexedKeyItem := range indexedKey {
		indexedKeyRule = append(indexedKeyRule, indexedKeyItem)
	}

	logs, sub, err := _PublicResolver.contract.FilterLogs(opts, "TextChanged", nodeRule, indexedKeyRule)
	if err != nil {
		return nil, err
	}
	return &PublicResolverTextChangedIterator{contract: _PublicResolver.contract, event: "TextChanged", logs: logs, sub: sub}, nil
}

// WatchTextChanged is a free log subscription operation binding the contract event 0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550.
//
// Solidity: event TextChanged(bytes32 indexed node, string indexed indexedKey, string key)
func (_PublicResolver *PublicResolverFilterer) WatchTextChanged(opts *bind.WatchOpts, sink chan<- *PublicResolverTextChanged, node [][32]byte, indexedKey []string) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var indexedKeyRule []interface{}
	for _, indexedKeyItem := range indexedKey {
		indexedKeyRule = append(indexedKeyRule, indexedKeyItem)
	}

	logs, sub, err := _PublicResolver.contract.WatchLogs(opts, "TextChanged", nodeRule, indexedKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicResolverTextChanged)
				if err := _PublicResolver.contract.UnpackLog(event, "TextChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTextChanged is a log parse operation binding the contract event 0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550.
//
// Solidity: event TextChanged(bytes32 indexed node, string indexed indexedKey, string key)
func (_PublicResolver *PublicResolverFilterer) ParseTextChanged(log types.Log) (*PublicResolverTextChanged, error) {
	event := new(PublicResolverTextChanged)
	if err := _PublicResolver.contract.UnpackLog(event, "TextChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}
