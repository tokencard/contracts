// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// OracleV2ABI is the input ABI used to generate the binding from.
const OracleV2ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tknLabel\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"mockTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenID\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIDs\",\"type\":\"address[]\"},{\"name\":\"labels\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8[]\"}],\"name\":\"addTokenBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenID\",\"type\":\"address\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"supported\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oraclizeAddrResolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenID\",\"type\":\"address\"}],\"name\":\"TokenRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"TokenAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogNewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"string\"}],\"name\":\"RateUpdated\",\"type\":\"event\"}]"

// OracleV2Bin is the compiled bytecode used for deploying new contracts.
const OracleV2Bin = `0x608060405234801561001057600080fd5b506040516020806133978339810180604052810190808051906020019092919050505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1614156100ab57736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47590505b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061329c806100fb6000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e146100a95780633263b5451461012057806338bbfa501461018d5780633c3821f41461024a57806351163c78146102545780635fa7b584146102f157806381620d9d14610334578063de6a48e514610423578063e4860339146104b9578063f77c479114610594575b600080fd5b3480156100b557600080fd5b5061011e6004803603810190808035600019169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506105eb565b005b34801561012c57600080fd5b5061014b6004803603810190808035906020019092919050505061062e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019957600080fd5b506102486004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061066c565b005b61025261091d565b005b34801561026057600080fd5b506102db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610dd6565b6040518082815260200191505060405180910390f35b3480156102fd57600080fd5b50610332600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ee2565b005b34801561034057600080fd5b5061042160048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611176565b005b34801561042f57600080fd5b506104b7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050611557565b005b3480156104c557600080fd5b506104fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611802565b60405180806020018560ff1660ff16815260200184815260200183151515158152602001828103825286818151815260200191508051906020019080838360005b8381101561055657808201518184015260208101905061053b565b50505050905090810190601f1680156105835780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156105a057600080fd5b506105a96118e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61062a828260006040519080825280601f01601f1916602001820160405280156106245781602001602082028038833980820191505090505b5061066c565b5050565b60068181548110151561063d57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61067461190a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106ad57600080fd5b6005600060086000866000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16151561074357600080fd5b61074e826012611c68565b6005600060086000876000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060086000846000191660001916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557fceaae6a94c328f73acb9c0621635ced22cd56e23b1d20b8e02c2cb1c030b586d60086000856000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108dd5780820151818401526020810190506108c2565b50505050905090810190601f16801561090a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050565b6000610927613105565b61092f613105565b6000610939613105565b6060600060068054905096503073ffffffffffffffffffffffffffffffffffffffff16318761099c6040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250611f5c565b021115610a5c577f621c2856e3b87f81235f8ac8a22bbb40a0142961960710d00b2b6c380902b57e60405180806020018281038252604b8152602001807f4f7261636c697a6520717565727920776173204e4f542073656e742c20706c6581526020017f6173652061646420736f6d652045544820746f20636f76657220666f7220746881526020017f652071756572792066656500000000000000000000000000000000000000000081525060600191505060405180910390a1610dcd565b610ac1606060405190810160405280603781526020017f6a736f6e2868747470733a2f2f6d696e2d6170692e63727970746f636f6d706181526020017f72652e636f6d2f646174612f70726963653f6673796d3d00000000000000000081525061232c565b9550610b016040805190810160405280601981526020017f267473796d733d455448267369676e3d74727565292e4554480000000000000081525061232c565b9450600093505b86841015610dcc57610c2c60056000600687815481101515610b2657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c225780601f10610bf757610100808354040283529160200191610c22565b820191906000526020600020905b815481529060010190602001808311610c0557829003601f168201915b505050505061232c565b9250610c5b85610c4d610c48868a61235a90919063ffffffff16565b61232c565b61235a90919063ffffffff16565b9150610c9c6040805190810160405280600381526020017f55524c0000000000000000000000000000000000000000000000000000000000815250836123dc565b9050600684815481101515610cad57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660086000836000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f621c2856e3b87f81235f8ac8a22bbb40a0142961960710d00b2b6c380902b57e6040518080602001828103825260368152602001807f4f7261636c697a65207175657279207761732073656e742c207374616e64696e81526020017f6720627920666f722074686520616e737765722e2e2e0000000000000000000081525060400191505060405180910390a18380600101945050610b08565b5b50505050505050565b600080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610e7884600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1660ff16611c68565b029050600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1660ff1681811515610ed857fe5b0491505092915050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4157600080fd5b82600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff161515610f9d57600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81549060ff02191690556001600680549050039250600091505b82821015611117578373ffffffffffffffffffffffffffffffffffffffff1660068381548110151561102d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561110a5760068381548110151561108357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006838154811015156110bd57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611117565b8180600101925050610fff565b600680548091906001900361112c919061311f565b508373ffffffffffffffffffffffffffffffffffffffff167fa8126e187bf99b9fce567e2b20717579dc5a34b14b89437ca936562010549f2460405160405180910390a250505050565b61117e613105565b611186613105565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111e557600080fd5b845187511415156111f557600080fd5b6111fe8661232c565b935061123e6040805190810160405280600181526020017f2e0000000000000000000000000000000000000000000000000000000000000081525061232c565b92506001611255848661297e90919063ffffffff16565b01915084518214151561126757600080fd5b600090505b8181101561154e5760056000888381518110151561128657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16151561154157600687828151811015156112f157fe5b9060200190602002015190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061137961137484866129f590919063ffffffff16565b612a0f565b60056000898481518110151561138b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190805190602001906113e592919061314b565b5084818151811015156113f457fe5b9060200190602002015160056000898481518110151561141057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff021916908360ff160217905550600060056000898481518110151561148357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060016005600089848151811015156114e257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083151502179055505b808060010191505061126c565b50505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b357600080fd5b82600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615151561161057600080fd5b60068490806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506080604051908101604052808481526020018360ff1681526020016000815260200160011515815250600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906116fa9291906131cb565b5060208201518160010160006101000a81548160ff021916908360ff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff167fb15f3463ccfabee279e5c9e8e571431d0b63adec617b178892a26259613007d9846040518080602001828103825283818151815260200191508051906020019080838360005b838110156117c25780820151818401526020810190506117a7565b50505050905090810190601f1680156117ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390a250505050565b6005602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118ae5780601f10611883576101008083540402835291602001916118ae565b820191906000526020600020905b81548152906001019060200180831161189157829003601f168201915b5050505050908060010160009054906101000a900460ff16908060020154908060030160009054906101000a900460ff16905084565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061197a575060006119786000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612a71565b145b1561198b576119896000612a7c565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611a1057600080fd5b505af1158015611a24573d6000803e3d6000fd5b505050506040513d6020811015611a3a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611ba2576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611b2657600080fd5b505af1158015611b3a573d6000803e3d6000fd5b505050506040513d6020811015611b5057600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c2857600080fd5b505af1158015611c3c573d6000803e3d6000fd5b505050506040513d6020811015611c5257600080fd5b8101908080519060200190929190505050905090565b6000606060008060008693506000925060009150600090505b8351811015611f3d5760307f0100000000000000000000000000000000000000000000000000000000000000028482815181101515611cbc57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015611dd4575060397f0100000000000000000000000000000000000000000000000000000000000000028482815181101515611d6457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b15611e85578115611df7576000861415611ded57611f3d565b8580600190039650505b600a8302925060308482815181101515611e0d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040383019250611f30565b602e7f0100000000000000000000000000000000000000000000000000000000000000028482815181101515611eb757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415611f2f57600191505b5b8080600101915050611c81565b6000861115611f4f5785600a0a830292505b8294505050505092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611fcc57506000611fca6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612a71565b145b15611fdd57611fdb6000612a7c565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561206257600080fd5b505af1158015612076573d6000803e3d6000fd5b505050506040513d602081101561208c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156121f4576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561217857600080fd5b505af115801561218c573d6000803e3d6000fd5b505050506040513d60208110156121a257600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561229e578082015181840152602081019050612283565b50505050905090810190601f1680156122cb5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156122ea57600080fd5b505af11580156122fe573d6000803e3d6000fd5b505050506040513d602081101561231457600080fd5b81019080805190602001909291905050509050919050565b612334613105565b600060208301905060408051908101604052808451815260200182815250915050919050565b606080600083600001518560000151016040519080825280601f01601f19166020018201604052801561239c5781602001602082028038833980820191505090505b5091506020820190506123b88186602001518760000151612a8d565b6123d18560000151820185602001518660000151612a8d565b819250505092915050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061244e5750600061244c6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612a71565b145b1561245f5761245d6000612a7c565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156124e457600080fd5b505af11580156124f8573d6000803e3d6000fd5b505050506040513d602081101561250e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612676576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b505050506040513d602081101561262457600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612720578082015181840152602081019050612705565b50505050905090810190601f16801561274d5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561276c57600080fd5b505af1158015612780573d6000803e3d6000fd5b505050506040513d602081101561279657600080fd5b8101908080519060200190929190505050905062030d403a02670de0b6b3a7640000018111156127cc5760006001029150612977565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015612884578082015181840152602081019050612869565b50505050905090810190601f1680156128b15780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156128ea5780820151818401526020810190506128cf565b50505050905090810190601f1680156129175780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b15801561293857600080fd5b505af115801561294c573d6000803e3d6000fd5b50505050506040513d602081101561296357600080fd5b810190808051906020019092919050505091505b5092915050565b60008082600001516129a28560000151866020015186600001518760200151612ad8565b0190505b8360000151846020015101811115156129ee57818060010192505082600001516129e6856020015183038660000151038386600001518760200151612ad8565b0190506129a6565b5092915050565b6129fd613105565b612a08838383612bbe565b5092915050565b606080600083600001516040519080825280601f01601f191660200182016040528015612a4b5781602001602082028038833980820191505090505b509150602082019050612a678185602001518660000151612a8d565b8192505050919050565b6000813b9050919050565b6000612a86612c5c565b9050919050565b60005b602082101515612ab55782518452602084019350602083019250602082039150612a90565b6001826020036101000a0390508019835116818551168181178652505050505050565b60008060008060008060008060008b97508c8b111515612ba85760208b111515612b625760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b84600019168360001916141515612b5a578388101515612b47578c8c019850612bae565b8780600101985050858851169250612b23565b879850612bae565b8a8a209150600096505b8a8d0387111515612ba7578a88209050806000191682600019161415612b9457879850612bae565b6001880197508680600101975050612b6c565b5b8c8c0198505b5050505050505050949350505050565b612bc6613105565b6000612be48560000151866020015186600001518760200151612ad8565b90508460200151836020018181525050846020015181038360000181815250508460000151856020015101811415612c26576000856000018181525050612c51565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b600080612c7c731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612a71565b1115612d1d57731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d146040805190810160405280600b81526020017f6574685f6d61696e6e65740000000000000000000000000000000000000000008152506130eb565b600190506130e8565b6000612d3c73c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612a71565b1115612ddd5773c03a2615d5efaf5f49f60b7bb6583eaec212fdf16000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612dd46040805190810160405280600c81526020017f6574685f726f707374656e3300000000000000000000000000000000000000008152506130eb565b600190506130e8565b6000612dfc73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612a71565b1115612e9d5773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e946040805190810160405280600981526020017f6574685f6b6f76616e00000000000000000000000000000000000000000000008152506130eb565b600190506130e8565b6000612ebc73146500cfd35b22e4a392fe0adc06de1a1368ed48612a71565b1115612f5d5773146500cfd35b22e4a392fe0adc06de1a1368ed486000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f546040805190810160405280600b81526020017f6574685f72696e6b6562790000000000000000000000000000000000000000008152506130eb565b600190506130e8565b6000612f7c736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612a71565b1115612fdf57736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506130e8565b6000612ffe7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612a71565b1115613061577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506130e8565b60006130807351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612a71565b11156130e3577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506130e8565b600090505b90565b806002908051906020019061310192919061314b565b5050565b604080519081016040528060008152602001600081525090565b81548183558181111561314657818360005260206000209182019101613145919061324b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061318c57805160ff19168380011785556131ba565b828001600101855582156131ba579182015b828111156131b957825182559160200191906001019061319e565b5b5090506131c7919061324b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061320c57805160ff191683800117855561323a565b8280016001018555821561323a579182015b8281111561323957825182559160200191906001019061321e565b5b509050613247919061324b565b5090565b61326d91905b80821115613269576000816000905550600101613251565b5090565b905600a165627a7a7230582084452731ac61fcc42a43cb9883f6fad40577e4e8f205a16528063279e706441f0029`

// DeployOracleV2 deploys a new Ethereum contract, binding an instance of OracleV2 to it.
func DeployOracleV2(auth *bind.TransactOpts, backend bind.ContractBackend, _oraclizeAddrResolver common.Address) (common.Address, *types.Transaction, *OracleV2, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleV2Bin), backend, _oraclizeAddrResolver)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OracleV2{OracleV2Caller: OracleV2Caller{contract: contract}, OracleV2Transactor: OracleV2Transactor{contract: contract}, OracleV2Filterer: OracleV2Filterer{contract: contract}}, nil
}

// OracleV2 is an auto generated Go binding around an Ethereum contract.
type OracleV2 struct {
	OracleV2Caller     // Read-only binding to the contract
	OracleV2Transactor // Write-only binding to the contract
	OracleV2Filterer   // Log filterer for contract events
}

// OracleV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type OracleV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleV2Session struct {
	Contract     *OracleV2         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleV2CallerSession struct {
	Contract *OracleV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// OracleV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleV2TransactorSession struct {
	Contract     *OracleV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// OracleV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type OracleV2Raw struct {
	Contract *OracleV2 // Generic contract binding to access the raw methods on
}

// OracleV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleV2CallerRaw struct {
	Contract *OracleV2Caller // Generic read-only contract binding to access the raw methods on
}

// OracleV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleV2TransactorRaw struct {
	Contract *OracleV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewOracleV2 creates a new instance of OracleV2, bound to a specific deployed contract.
func NewOracleV2(address common.Address, backend bind.ContractBackend) (*OracleV2, error) {
	contract, err := bindOracleV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OracleV2{OracleV2Caller: OracleV2Caller{contract: contract}, OracleV2Transactor: OracleV2Transactor{contract: contract}, OracleV2Filterer: OracleV2Filterer{contract: contract}}, nil
}

// NewOracleV2Caller creates a new read-only instance of OracleV2, bound to a specific deployed contract.
func NewOracleV2Caller(address common.Address, caller bind.ContractCaller) (*OracleV2Caller, error) {
	contract, err := bindOracleV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleV2Caller{contract: contract}, nil
}

// NewOracleV2Transactor creates a new write-only instance of OracleV2, bound to a specific deployed contract.
func NewOracleV2Transactor(address common.Address, transactor bind.ContractTransactor) (*OracleV2Transactor, error) {
	contract, err := bindOracleV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleV2Transactor{contract: contract}, nil
}

// NewOracleV2Filterer creates a new log filterer instance of OracleV2, bound to a specific deployed contract.
func NewOracleV2Filterer(address common.Address, filterer bind.ContractFilterer) (*OracleV2Filterer, error) {
	contract, err := bindOracleV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleV2Filterer{contract: contract}, nil
}

// bindOracleV2 binds a generic wrapper to an already deployed contract.
func bindOracleV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OracleV2 *OracleV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OracleV2.Contract.OracleV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OracleV2 *OracleV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OracleV2.Contract.OracleV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OracleV2 *OracleV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OracleV2.Contract.OracleV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OracleV2 *OracleV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OracleV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OracleV2 *OracleV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OracleV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OracleV2 *OracleV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OracleV2.Contract.contract.Transact(opts, method, params...)
}

// ContractAddresses is a free data retrieval call binding the contract method 0x3263b545.
//
// Solidity: function contractAddresses( uint256) constant returns(address)
func (_OracleV2 *OracleV2Caller) ContractAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _OracleV2.contract.Call(opts, out, "contractAddresses", arg0)
	return *ret0, err
}

// ContractAddresses is a free data retrieval call binding the contract method 0x3263b545.
//
// Solidity: function contractAddresses( uint256) constant returns(address)
func (_OracleV2 *OracleV2Session) ContractAddresses(arg0 *big.Int) (common.Address, error) {
	return _OracleV2.Contract.ContractAddresses(&_OracleV2.CallOpts, arg0)
}

// ContractAddresses is a free data retrieval call binding the contract method 0x3263b545.
//
// Solidity: function contractAddresses( uint256) constant returns(address)
func (_OracleV2 *OracleV2CallerSession) ContractAddresses(arg0 *big.Int) (common.Address, error) {
	return _OracleV2.Contract.ContractAddresses(&_OracleV2.CallOpts, arg0)
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() constant returns(address)
func (_OracleV2 *OracleV2Caller) Controller(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _OracleV2.contract.Call(opts, out, "controller")
	return *ret0, err
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() constant returns(address)
func (_OracleV2 *OracleV2Session) Controller() (common.Address, error) {
	return _OracleV2.Contract.Controller(&_OracleV2.CallOpts)
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() constant returns(address)
func (_OracleV2 *OracleV2CallerSession) Controller() (common.Address, error) {
	return _OracleV2.Contract.Controller(&_OracleV2.CallOpts)
}

// MockTransaction is a free data retrieval call binding the contract method 0x51163c78.
//
// Solidity: function mockTransaction(tknLabel address, amount string) constant returns(uint256)
func (_OracleV2 *OracleV2Caller) MockTransaction(opts *bind.CallOpts, tknLabel common.Address, amount string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _OracleV2.contract.Call(opts, out, "mockTransaction", tknLabel, amount)
	return *ret0, err
}

// MockTransaction is a free data retrieval call binding the contract method 0x51163c78.
//
// Solidity: function mockTransaction(tknLabel address, amount string) constant returns(uint256)
func (_OracleV2 *OracleV2Session) MockTransaction(tknLabel common.Address, amount string) (*big.Int, error) {
	return _OracleV2.Contract.MockTransaction(&_OracleV2.CallOpts, tknLabel, amount)
}

// MockTransaction is a free data retrieval call binding the contract method 0x51163c78.
//
// Solidity: function mockTransaction(tknLabel address, amount string) constant returns(uint256)
func (_OracleV2 *OracleV2CallerSession) MockTransaction(tknLabel common.Address, amount string) (*big.Int, error) {
	return _OracleV2.Contract.MockTransaction(&_OracleV2.CallOpts, tknLabel, amount)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, supported bool)
func (_OracleV2 *OracleV2Caller) Tokens(opts *bind.CallOpts, arg0 common.Address) (struct {
	Label     string
	Decimals  uint8
	Rate      *big.Int
	Supported bool
}, error) {
	ret := new(struct {
		Label     string
		Decimals  uint8
		Rate      *big.Int
		Supported bool
	})
	out := ret
	err := _OracleV2.contract.Call(opts, out, "tokens", arg0)
	return *ret, err
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, supported bool)
func (_OracleV2 *OracleV2Session) Tokens(arg0 common.Address) (struct {
	Label     string
	Decimals  uint8
	Rate      *big.Int
	Supported bool
}, error) {
	return _OracleV2.Contract.Tokens(&_OracleV2.CallOpts, arg0)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, supported bool)
func (_OracleV2 *OracleV2CallerSession) Tokens(arg0 common.Address) (struct {
	Label     string
	Decimals  uint8
	Rate      *big.Int
	Supported bool
}, error) {
	return _OracleV2.Contract.Tokens(&_OracleV2.CallOpts, arg0)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(queryId bytes32, result string, proof bytes) returns()
func (_OracleV2 *OracleV2Transactor) Callback(opts *bind.TransactOpts, queryId [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _OracleV2.contract.Transact(opts, "__callback", queryId, result, proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(queryId bytes32, result string, proof bytes) returns()
func (_OracleV2 *OracleV2Session) Callback(queryId [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _OracleV2.Contract.Callback(&_OracleV2.TransactOpts, queryId, result, proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(queryId bytes32, result string, proof bytes) returns()
func (_OracleV2 *OracleV2TransactorSession) Callback(queryId [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _OracleV2.Contract.Callback(&_OracleV2.TransactOpts, queryId, result, proof)
}

// AddToken is a paid mutator transaction binding the contract method 0xde6a48e5.
//
// Solidity: function addToken(tokenID address, label string, decimals uint8) returns()
func (_OracleV2 *OracleV2Transactor) AddToken(opts *bind.TransactOpts, tokenID common.Address, label string, decimals uint8) (*types.Transaction, error) {
	return _OracleV2.contract.Transact(opts, "addToken", tokenID, label, decimals)
}

// AddToken is a paid mutator transaction binding the contract method 0xde6a48e5.
//
// Solidity: function addToken(tokenID address, label string, decimals uint8) returns()
func (_OracleV2 *OracleV2Session) AddToken(tokenID common.Address, label string, decimals uint8) (*types.Transaction, error) {
	return _OracleV2.Contract.AddToken(&_OracleV2.TransactOpts, tokenID, label, decimals)
}

// AddToken is a paid mutator transaction binding the contract method 0xde6a48e5.
//
// Solidity: function addToken(tokenID address, label string, decimals uint8) returns()
func (_OracleV2 *OracleV2TransactorSession) AddToken(tokenID common.Address, label string, decimals uint8) (*types.Transaction, error) {
	return _OracleV2.Contract.AddToken(&_OracleV2.TransactOpts, tokenID, label, decimals)
}

// AddTokenBatch is a paid mutator transaction binding the contract method 0x81620d9d.
//
// Solidity: function addTokenBatch(tokenIDs address[], labels string, decimals uint8[]) returns()
func (_OracleV2 *OracleV2Transactor) AddTokenBatch(opts *bind.TransactOpts, tokenIDs []common.Address, labels string, decimals []uint8) (*types.Transaction, error) {
	return _OracleV2.contract.Transact(opts, "addTokenBatch", tokenIDs, labels, decimals)
}

// AddTokenBatch is a paid mutator transaction binding the contract method 0x81620d9d.
//
// Solidity: function addTokenBatch(tokenIDs address[], labels string, decimals uint8[]) returns()
func (_OracleV2 *OracleV2Session) AddTokenBatch(tokenIDs []common.Address, labels string, decimals []uint8) (*types.Transaction, error) {
	return _OracleV2.Contract.AddTokenBatch(&_OracleV2.TransactOpts, tokenIDs, labels, decimals)
}

// AddTokenBatch is a paid mutator transaction binding the contract method 0x81620d9d.
//
// Solidity: function addTokenBatch(tokenIDs address[], labels string, decimals uint8[]) returns()
func (_OracleV2 *OracleV2TransactorSession) AddTokenBatch(tokenIDs []common.Address, labels string, decimals []uint8) (*types.Transaction, error) {
	return _OracleV2.Contract.AddTokenBatch(&_OracleV2.TransactOpts, tokenIDs, labels, decimals)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(tokenID address) returns()
func (_OracleV2 *OracleV2Transactor) RemoveToken(opts *bind.TransactOpts, tokenID common.Address) (*types.Transaction, error) {
	return _OracleV2.contract.Transact(opts, "removeToken", tokenID)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(tokenID address) returns()
func (_OracleV2 *OracleV2Session) RemoveToken(tokenID common.Address) (*types.Transaction, error) {
	return _OracleV2.Contract.RemoveToken(&_OracleV2.TransactOpts, tokenID)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(tokenID address) returns()
func (_OracleV2 *OracleV2TransactorSession) RemoveToken(tokenID common.Address) (*types.Transaction, error) {
	return _OracleV2.Contract.RemoveToken(&_OracleV2.TransactOpts, tokenID)
}

// UpdateRates is a paid mutator transaction binding the contract method 0x3c3821f4.
//
// Solidity: function updateRates() returns()
func (_OracleV2 *OracleV2Transactor) UpdateRates(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OracleV2.contract.Transact(opts, "updateRates")
}

// UpdateRates is a paid mutator transaction binding the contract method 0x3c3821f4.
//
// Solidity: function updateRates() returns()
func (_OracleV2 *OracleV2Session) UpdateRates() (*types.Transaction, error) {
	return _OracleV2.Contract.UpdateRates(&_OracleV2.TransactOpts)
}

// UpdateRates is a paid mutator transaction binding the contract method 0x3c3821f4.
//
// Solidity: function updateRates() returns()
func (_OracleV2 *OracleV2TransactorSession) UpdateRates() (*types.Transaction, error) {
	return _OracleV2.Contract.UpdateRates(&_OracleV2.TransactOpts)
}

// OracleV2LogNewOraclizeQueryIterator is returned from FilterLogNewOraclizeQuery and is used to iterate over the raw logs and unpacked data for LogNewOraclizeQuery events raised by the OracleV2 contract.
type OracleV2LogNewOraclizeQueryIterator struct {
	Event *OracleV2LogNewOraclizeQuery // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleV2LogNewOraclizeQueryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleV2LogNewOraclizeQuery)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleV2LogNewOraclizeQuery)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleV2LogNewOraclizeQueryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleV2LogNewOraclizeQueryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleV2LogNewOraclizeQuery represents a LogNewOraclizeQuery event raised by the OracleV2 contract.
type OracleV2LogNewOraclizeQuery struct {
	Description string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogNewOraclizeQuery is a free log retrieval operation binding the contract event 0x621c2856e3b87f81235f8ac8a22bbb40a0142961960710d00b2b6c380902b57e.
//
// Solidity: e LogNewOraclizeQuery(description string)
func (_OracleV2 *OracleV2Filterer) FilterLogNewOraclizeQuery(opts *bind.FilterOpts) (*OracleV2LogNewOraclizeQueryIterator, error) {

	logs, sub, err := _OracleV2.contract.FilterLogs(opts, "LogNewOraclizeQuery")
	if err != nil {
		return nil, err
	}
	return &OracleV2LogNewOraclizeQueryIterator{contract: _OracleV2.contract, event: "LogNewOraclizeQuery", logs: logs, sub: sub}, nil
}

// WatchLogNewOraclizeQuery is a free log subscription operation binding the contract event 0x621c2856e3b87f81235f8ac8a22bbb40a0142961960710d00b2b6c380902b57e.
//
// Solidity: e LogNewOraclizeQuery(description string)
func (_OracleV2 *OracleV2Filterer) WatchLogNewOraclizeQuery(opts *bind.WatchOpts, sink chan<- *OracleV2LogNewOraclizeQuery) (event.Subscription, error) {

	logs, sub, err := _OracleV2.contract.WatchLogs(opts, "LogNewOraclizeQuery")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleV2LogNewOraclizeQuery)
				if err := _OracleV2.contract.UnpackLog(event, "LogNewOraclizeQuery", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleV2RateUpdatedIterator is returned from FilterRateUpdated and is used to iterate over the raw logs and unpacked data for RateUpdated events raised by the OracleV2 contract.
type OracleV2RateUpdatedIterator struct {
	Event *OracleV2RateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleV2RateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleV2RateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleV2RateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleV2RateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleV2RateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleV2RateUpdated represents a RateUpdated event raised by the OracleV2 contract.
type OracleV2RateUpdated struct {
	TokenAddress common.Address
	Rate         string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRateUpdated is a free log retrieval operation binding the contract event 0xceaae6a94c328f73acb9c0621635ced22cd56e23b1d20b8e02c2cb1c030b586d.
//
// Solidity: e RateUpdated(tokenAddress address, rate string)
func (_OracleV2 *OracleV2Filterer) FilterRateUpdated(opts *bind.FilterOpts) (*OracleV2RateUpdatedIterator, error) {

	logs, sub, err := _OracleV2.contract.FilterLogs(opts, "RateUpdated")
	if err != nil {
		return nil, err
	}
	return &OracleV2RateUpdatedIterator{contract: _OracleV2.contract, event: "RateUpdated", logs: logs, sub: sub}, nil
}

// WatchRateUpdated is a free log subscription operation binding the contract event 0xceaae6a94c328f73acb9c0621635ced22cd56e23b1d20b8e02c2cb1c030b586d.
//
// Solidity: e RateUpdated(tokenAddress address, rate string)
func (_OracleV2 *OracleV2Filterer) WatchRateUpdated(opts *bind.WatchOpts, sink chan<- *OracleV2RateUpdated) (event.Subscription, error) {

	logs, sub, err := _OracleV2.contract.WatchLogs(opts, "RateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleV2RateUpdated)
				if err := _OracleV2.contract.UnpackLog(event, "RateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleV2TokenAdditionIterator is returned from FilterTokenAddition and is used to iterate over the raw logs and unpacked data for TokenAddition events raised by the OracleV2 contract.
type OracleV2TokenAdditionIterator struct {
	Event *OracleV2TokenAddition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleV2TokenAdditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleV2TokenAddition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleV2TokenAddition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleV2TokenAdditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleV2TokenAdditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleV2TokenAddition represents a TokenAddition event raised by the OracleV2 contract.
type OracleV2TokenAddition struct {
	TokenID common.Address
	Label   string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTokenAddition is a free log retrieval operation binding the contract event 0xb15f3463ccfabee279e5c9e8e571431d0b63adec617b178892a26259613007d9.
//
// Solidity: e TokenAddition(tokenID indexed address, label string)
func (_OracleV2 *OracleV2Filterer) FilterTokenAddition(opts *bind.FilterOpts, tokenID []common.Address) (*OracleV2TokenAdditionIterator, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _OracleV2.contract.FilterLogs(opts, "TokenAddition", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &OracleV2TokenAdditionIterator{contract: _OracleV2.contract, event: "TokenAddition", logs: logs, sub: sub}, nil
}

// WatchTokenAddition is a free log subscription operation binding the contract event 0xb15f3463ccfabee279e5c9e8e571431d0b63adec617b178892a26259613007d9.
//
// Solidity: e TokenAddition(tokenID indexed address, label string)
func (_OracleV2 *OracleV2Filterer) WatchTokenAddition(opts *bind.WatchOpts, sink chan<- *OracleV2TokenAddition, tokenID []common.Address) (event.Subscription, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _OracleV2.contract.WatchLogs(opts, "TokenAddition", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleV2TokenAddition)
				if err := _OracleV2.contract.UnpackLog(event, "TokenAddition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleV2TokenRemovalIterator is returned from FilterTokenRemoval and is used to iterate over the raw logs and unpacked data for TokenRemoval events raised by the OracleV2 contract.
type OracleV2TokenRemovalIterator struct {
	Event *OracleV2TokenRemoval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleV2TokenRemovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleV2TokenRemoval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleV2TokenRemoval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleV2TokenRemovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleV2TokenRemovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleV2TokenRemoval represents a TokenRemoval event raised by the OracleV2 contract.
type OracleV2TokenRemoval struct {
	TokenID common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTokenRemoval is a free log retrieval operation binding the contract event 0xa8126e187bf99b9fce567e2b20717579dc5a34b14b89437ca936562010549f24.
//
// Solidity: e TokenRemoval(tokenID indexed address)
func (_OracleV2 *OracleV2Filterer) FilterTokenRemoval(opts *bind.FilterOpts, tokenID []common.Address) (*OracleV2TokenRemovalIterator, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _OracleV2.contract.FilterLogs(opts, "TokenRemoval", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &OracleV2TokenRemovalIterator{contract: _OracleV2.contract, event: "TokenRemoval", logs: logs, sub: sub}, nil
}

// WatchTokenRemoval is a free log subscription operation binding the contract event 0xa8126e187bf99b9fce567e2b20717579dc5a34b14b89437ca936562010549f24.
//
// Solidity: e TokenRemoval(tokenID indexed address)
func (_OracleV2 *OracleV2Filterer) WatchTokenRemoval(opts *bind.WatchOpts, sink chan<- *OracleV2TokenRemoval, tokenID []common.Address) (event.Subscription, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _OracleV2.contract.WatchLogs(opts, "TokenRemoval", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleV2TokenRemoval)
				if err := _OracleV2.contract.UnpackLog(event, "TokenRemoval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
