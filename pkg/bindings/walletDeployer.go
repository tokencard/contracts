// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WalletDeployerABI is the input ABI used to generate the binding from.
const WalletDeployerABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_oldWallet\",\"type\":\"address\"},{\"name\":\"_initializedSpendLimit\",\"type\":\"bool\"},{\"name\":\"_initializedGasTopUpLimit\",\"type\":\"bool\"},{\"name\":\"_initializedWhitelist\",\"type\":\"bool\"},{\"name\":\"_spendLimit\",\"type\":\"uint256\"},{\"name\":\"_gasTopUpLimit\",\"type\":\"uint256\"},{\"name\":\"_whitelistedAddresses\",\"type\":\"address[]\"}],\"name\":\"migrateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cacheWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cachedWalletsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"licenceNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployedWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultSpendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deployWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_defaultSpendLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CachedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"DeployedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"MigratedWallet\",\"type\":\"event\"}]"

// WalletDeployerBin is the compiled bytecode used for deploying new contracts.
var WalletDeployerBin = "0x608060405234801561001057600080fd5b50604051615eab380380615eab8339818101604052604081101561003357600080fd5b508051602090910151600180546001600160a01b039384166001600160a01b031991821681179283905560008054831693909516929092179093557f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976002556005805490931617909155600655615dfc806100af6000396000f3fe608060405260043610620000b65760003560e01c806380a12c0e116200006d57806380a12c0e1462000222578063877337b01462000259578063a7a7d3bc1462000271578063c8cc2fc21462000289578063e2b4ce9714620002c0578063fc6cabe714620002d857620000b6565b806317ca930514620000b85780633f15457f146200017c57806360dbc5de14620001b057806371b9076a14620001c8578063747c31d614620001f25780637d73b231146200020a575b005b348015620000c557600080fd5b50620000b66004803603610100811015620000df57600080fd5b6001600160a01b03823581169260208101359091169160408201351515916060810135151591608082013515159160a08101359160c08201359190810190610100810160e08201356401000000008111156200013a57600080fd5b8201836020820111156200014d57600080fd5b803590602001918460208302840111640100000000831117156200017057600080fd5b50909250905062000306565b3480156200018957600080fd5b506200019462000625565b604080516001600160a01b039092168252519081900360200190f35b348015620001bd57600080fd5b50620000b662000634565b348015620001d557600080fd5b50620001e0620007a8565b60408051918252519081900360200190f35b348015620001ff57600080fd5b50620001e0620007ae565b3480156200021757600080fd5b5062000194620007d2565b3480156200022f57600080fd5b5062000194600480360360208110156200024857600080fd5b50356001600160a01b0316620007e1565b3480156200026657600080fd5b50620001e0620007fc565b3480156200027e57600080fd5b50620001e062000820565b3480156200029657600080fd5b50620000b660048036036020811015620002af57600080fd5b50356001600160a01b031662000826565b348015620002cd57600080fd5b50620001e0620009cd565b348015620002e557600080fd5b506200019460048036036020811015620002fe57600080fd5b5035620009f1565b620003113362000a19565b62000363576040805162461bcd60e51b815260206004820152601a60248201527f73656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015290519081900360640190fd5b6004546001111562000379576200037962000634565b600480546000919060001981019081106200039057fe5b600091825260209091200154600480546001600160a01b0390921692509080620003b657fe5b600082815260209020810160001990810180546001600160a01b031916905501905587156200044057806001600160a01b0316633c672eb7866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156200042657600080fd5b505af11580156200043b573d6000803e3d6000fd5b505050505b8615620004a857806001600160a01b0316630f3a85d8856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156200048e57600080fd5b505af1158015620004a3573d6000803e3d6000fd5b505050505b85156200053f57806001600160a01b031663f421764884846040518363ffffffff1660e01b815260040180806020018281038252848482818152602001925060200280828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b1580156200052557600080fd5b505af11580156200053a573d6000803e3d6000fd5b505050505b60408051632c90b94d60e21b81526001600160a01b038c8116600483015260006024830181905292519084169263b242e534926044808201939182900301818387803b1580156200058f57600080fd5b505af1158015620005a4573d6000803e3d6000fd5b505050506001600160a01b038a811660008181526003602090815260409182902080546001600160a01b0319168686169081179091558251908152938d169084015282810191909152517f628666dc1e342232638fe725b30d07a00b36d24d32af174fdaea535df6c1eff0916060908290030190a150505050505050505050565b6005546001600160a01b031681565b60055460065460405160009230926001926001600160a01b03909216917fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d396917f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d5893697917fd0ff8bd67f6e25e4e4b010df582a36a0ee9b78e49afe6cc1cff5dd5a830403309190620006c39062000b78565b6001600160a01b0397881681529515156020870152939095166040808601919091526060850192909252608084015260a083019390935260c082015290519081900360e001906000f0801580156200071f573d6000803e3d6000fd5b50600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0383166001600160a01b0319909116811790915560408051918252519192507f9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e919081900360200190a150565b60045490565b7fd0ff8bd67f6e25e4e4b010df582a36a0ee9b78e49afe6cc1cff5dd5a8304033081565b6001546001600160a01b031690565b6003602052600090815260409020546001600160a01b031681565b7fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d39681565b60065481565b620008313362000a19565b62000883576040805162461bcd60e51b815260206004820152601a60248201527f73656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015290519081900360640190fd5b6004546001111562000899576200089962000634565b60048054600091906000198101908110620008b057fe5b600091825260209091200154600480546001600160a01b0390921692509080620008d657fe5b600082815260208120820160001990810180546001600160a01b031916905590910190915560408051632c90b94d60e21b81526001600160a01b0385811660048301526024820184905291519184169263b242e5349260448084019382900301818387803b1580156200094857600080fd5b505af11580156200095d573d6000803e3d6000fd5b5050506001600160a01b0380841660008181526003602090815260409182902080549487166001600160a01b031990951685179055815193845283019190915280517fc02db5f4164f89d90905928336769906e16d79c4a77342126eb647ca9440d0789350918290030190a15050565b7f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d589369781565b60048181548110620009ff57fe5b6000918252602090912001546001600160a01b0316905081565b600062000a2860025462000ab2565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801562000a7e57600080fd5b505afa15801562000a93573d6000803e3d6000fd5b505050506040513d602081101562000aaa57600080fd5b505192915050565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b15801562000b0057600080fd5b505afa15801562000b15573d6000803e3d6000fd5b505050506040513d602081101562000b2c57600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b15801562000a7e57600080fd5b6152418062000b878339019056fe60806040523480156200001157600080fd5b506040516200524138038062005241833981810160405260e08110156200003757600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151600180546001600160a01b038087166001600160a01b03199283161792839055600080548316938216939093179092556002849055600380548815157401000000000000000000000000000000000000000090810260ff60a01b19958c1692909416919091179390931691909117908190559697959694959394929392889188918791879186918491839188918891900460ff166200012f57604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b60408051600081526001600160a01b038416602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a150506040805160a080820183528382526020808301859052428385018190526000606080860182905260809586018290526009889055600a97909755600b829055600c819055600d805460ff19908116909155600e98909855855193840186526706f05b59d3b200008085529284018390529483018190529482018490529101829052600f81905560105560119190915560128190556013805490921690915594506200022e9350506001600160e01b03620002cf16915050565b505050505091505060008111620002a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f737461626c65636f696e206e6f74207365740000000000000000000000000000604482015290519081900360640190fd5b620002be61271082026001600160e01b03620003e516565b5050601a55506200055f9350505050565b6060600080600080600080620002ed600e546200043360201b60201c565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156200032657600080fd5b505afa1580156200033b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156200036557600080fd5b8101908080516401000000008111156200037e57600080fd5b820160208101848111156200039257600080fd5b8151640100000000811182820187101715620003ad57600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949f939e50919c509a509850919650945092505050565b60148190556040805160a0810182528281526020810183905242918101829052600060608201819052608090910181905260158390556016929092556017556018556019805460ff19169055565b60008054604080517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156200049a57600080fd5b505afa158015620004af573d6000803e3d6000fd5b505050506040513d6020811015620004c657600080fd5b5051604080517f3b3b57de0000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b1580156200052b57600080fd5b505afa15801562000540573d6000803e3d6000fd5b505050506040513d60208110156200055757600080fd5b505192915050565b614cd2806200056f6000396000f3fe6080604052600436106103355760003560e01c80637d7d0046116101ab578063cbd2ac68116100f7578063e2b4ce9711610095578063f36febda1161006f578063f36febda14610d7d578063f40b51f814610db6578063f41c431914610de0578063f421764814610e0a57610335565b8063e2b4ce9714610d14578063e61c51ca14610d29578063eadd3cea14610d5357610335565b8063ce0b5bd5116100d1578063ce0b5bd514610c96578063d251fefc14610cc0578063da84b1ed14610cea578063de212bf314610cff57610335565b8063cbd2ac6814610ba9578063cc0e7e5614610bd3578063cd7958dd14610be857610335565b8063b221f31611610164578063be40ba791161013e578063be40ba7914610b27578063beabacc814610b3c578063c4856cd914610b7f578063c785141814610b9457610335565b8063b221f31614610a89578063b242e53414610ab3578063b87e21ef14610aee57610335565b80637d7d0046146108ef5780637fd004fa14610904578063877337b01461097f5780638da5cb5b146109945780639b0dfd27146109a9578063a20506d9146109be57610335565b806332531c3c116102855780635adc02ab11610223578063715018a6116101fd578063715018a61461086a57806374624c551461087f578063747c31d6146108a95780637d73b231146108be57610335565b80635adc02ab146107b05780635d2362a8146107da5780636137d670146107ef57610335565b80633c672eb71161025f5780633c672eb7146106cc5780633f579f42146106f657806347b55a9d146107865780634aa46fde1461079b57610335565b806332531c3c146106435780633a43199f146106765780633bfec254146106a257610335565b80631efd0299116102f2578063227149a3116102cc578063227149a31461059f5780632587a6a2146105b457806326d05ab2146105c9578063294f4025146105de57610335565b80631efd02991461054b5780632121dc751461056057806321ce918d1461057557610335565b806301ffc9a714610371578063027ef3eb146103b95780630f3a85d8146103e0578063100f23fd1461040c5780631127b57e146104365780631aa21fba146104c0575b6040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b34801561037d57600080fd5b506103a56004803603602081101561039457600080fd5b50356001600160e01b031916610e85565b604080519115158252519081900360200190f35b3480156103c557600080fd5b506103ce610e9f565b60408051918252519081900360200190f35b3480156103ec57600080fd5b5061040a6004803603602081101561040357600080fd5b5035610ea6565b005b34801561041857600080fd5b5061040a6004803603602081101561042f57600080fd5b5035610f97565b34801561044257600080fd5b5061044b611132565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561048557818101518382015260200161046d565b50505050905090810190601f1680156104b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104cc57600080fd5b5061040a600480360360408110156104e357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561050d57600080fd5b82018360208201111561051f57600080fd5b803590602001918460208302840111600160201b8311171561054057600080fd5b509092509050611153565b34801561055757600080fd5b506103ce6112d3565b34801561056c57600080fd5b506103a56112e4565b34801561058157600080fd5b5061040a6004803603602081101561059857600080fd5b50356112f4565b3480156105ab57600080fd5b506103a5611383565b3480156105c057600080fd5b506103ce61138c565b3480156105d557600080fd5b506103a5611392565b3480156105ea57600080fd5b506105f361139b565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561062f578181015183820152602001610617565b505050509050019250505060405180910390f35b34801561064f57600080fd5b506103a56004803603602081101561066657600080fd5b50356001600160a01b03166113fd565b61040a6004803603604081101561068c57600080fd5b506001600160a01b038135169060200135611412565b3480156106ae57600080fd5b5061040a600480360360208110156106c557600080fd5b5035611641565b3480156106d857600080fd5b5061040a600480360360208110156106ef57600080fd5b503561172c565b34801561070257600080fd5b5061044b6004803603606081101561071957600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561074857600080fd5b82018360208201111561075a57600080fd5b803590602001918460018302840111600160201b8311171561077b57600080fd5b5090925090506117c3565b34801561079257600080fd5b506105f3611c2e565b3480156107a757600080fd5b506103a5611c8e565b3480156107bc57600080fd5b5061040a600480360360208110156107d357600080fd5b5035611c97565b3480156107e657600080fd5b506103ce611f59565b3480156107fb57600080fd5b5061040a6004803603602081101561081257600080fd5b810190602081018135600160201b81111561082c57600080fd5b82018360208201111561083e57600080fd5b803590602001918460208302840111600160201b8311171561085f57600080fd5b509092509050611f65565b34801561087657600080fd5b5061040a61214c565b34801561088b57600080fd5b5061040a600480360360208110156108a257600080fd5b503561223f565b3480156108b557600080fd5b506103ce612328565b3480156108ca57600080fd5b506108d361232e565b604080516001600160a01b039092168252519081900360200190f35b3480156108fb57600080fd5b506103ce61233d565b34801561091057600080fd5b5061040a6004803603602081101561092757600080fd5b810190602081018135600160201b81111561094157600080fd5b82018360208201111561095357600080fd5b803590602001918460208302840111600160201b8311171561097457600080fd5b509092509050612349565b34801561098b57600080fd5b506103ce612632565b3480156109a057600080fd5b506108d3612638565b3480156109b557600080fd5b506103ce612647565b3480156109ca57600080fd5b5061040a600480360360408110156109e157600080fd5b810190602081018135600160201b8111156109fb57600080fd5b820183602082011115610a0d57600080fd5b803590602001918460018302840111600160201b83111715610a2e57600080fd5b919390929091602081019035600160201b811115610a4b57600080fd5b820183602082011115610a5d57600080fd5b803590602001918460018302840111600160201b83111715610a7e57600080fd5b50909250905061264d565b348015610a9557600080fd5b5061040a60048036036020811015610aac57600080fd5b50356127bc565b348015610abf57600080fd5b5061040a60048036036040811015610ad657600080fd5b506001600160a01b038135169060200135151561289f565b348015610afa57600080fd5b506103ce60048036036040811015610b1157600080fd5b506001600160a01b038135169060200135612a4e565b348015610b3357600080fd5b506103a5612ae9565b348015610b4857600080fd5b5061040a60048036036060811015610b5f57600080fd5b506001600160a01b03813581169160208101359091169060400135612af8565b348015610b8b57600080fd5b506103ce612c99565b348015610ba057600080fd5b506103a5612c9f565b348015610bb557600080fd5b5061040a60048036036020811015610bcc57600080fd5b5035612ca8565b348015610bdf57600080fd5b506103ce613017565b348015610bf457600080fd5b506103ce60048036036020811015610c0b57600080fd5b810190602081018135600160201b811115610c2557600080fd5b820183602082011115610c3757600080fd5b803590602001918460208302840111600160201b83111715610c5857600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061301d945050505050565b348015610ca257600080fd5b5061040a60048036036020811015610cb957600080fd5b5035613077565b348015610ccc57600080fd5b506108d360048036036020811015610ce357600080fd5b5035613216565b348015610cf657600080fd5b506103ce61323d565b348015610d0b57600080fd5b506103a5613243565b348015610d2057600080fd5b506103ce613251565b348015610d3557600080fd5b5061040a60048036036020811015610d4c57600080fd5b5035613257565b348015610d5f57600080fd5b5061040a60048036036020811015610d7657600080fd5b50356133bb565b348015610d8957600080fd5b506103ce60048036036040811015610da057600080fd5b506001600160a01b038135169060200135613414565b348015610dc257600080fd5b5061040a60048036036020811015610dd957600080fd5b50356135d9565b348015610dec57600080fd5b5061040a60048036036020811015610e0357600080fd5b5035613632565b348015610e1657600080fd5b5061040a60048036036020811015610e2d57600080fd5b810190602081018135600160201b811115610e4757600080fd5b820183602082011115610e5957600080fd5b803590602001918460208302840111600160201b83111715610e7a57600080fd5b50909250905061368b565b6001600160e01b031981166301ffc9a760e01b145b919050565b600c545b90565b610eaf3361394a565b610eee576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b8066038d7ea4c6800011158015610f0d57506706f05b59d3b200008111155b610f485760405162461bcd60e51b815260040180806020018281038252602e81526020018061490d602e913960400191505060405180910390fd5b610f59600f8263ffffffff61395e16565b604080513381526020810183905281517f41ff5d5ce3b7935893a4e7269ec5caae9cca5e3bf0eb4b21d2f443489667112e929181900390910190a150565b610fa03361394a565b80610faf5750610faf336139d3565b610ffd576040805162461bcd60e51b815260206004820152601a60248201527932b4ba3432b91037bbb732b91037b91031b7b73a3937b63632b960311b604482015290519081900360640190fd5b60085460ff1661103e5760405162461bcd60e51b8152600401808060200182810382526029815260200180614abb6029913960400191505060405180910390fd5b6110a1600680548060200260200160405190810160405280929190818152602001828054801561109757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611079575b505050505061301d565b81146110de5760405162461bcd60e51b8152600401808060200182810382526035815260200180614b546035913960400191505060405180910390fd5b6110ea600660006147de565b6008805460ff19169055604080513381526020810183905281517f7794eff834d760583543e6e510e717a5e66d2c064e225f4db448343c3e66afcf929181900390910190a150565b604051806040016040528060058152602001640322e322e360dc1b81525081565b61115c3361394a565b61119b576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b806111ed576040805162461bcd60e51b815260206004820152601f60248201527f61737365742061727261792073686f756c64206265206e6f6e2d656d70747900604482015290519081900360640190fd5b60005b8181101561125057600061121f3085858581811061120a57fe5b905060200201356001600160a01b0316613a67565b90506112478585858581811061123157fe5b905060200201356001600160a01b031683612af8565b506001016111f0565b507fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad83838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b60006112df6015613b12565b905090565b600354600160a01b900460ff1690565b6112fd3361394a565b61133c576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b61134d60098263ffffffff613b4716565b6040805182815290517f4b1b970c8a0fa761e7803ed70c13d7aca71904b13df60fbe03f981da1730da919181900360200190a150565b60195460ff1690565b600f5490565b60085460ff1681565b606060078054806020026020016040519081016040528092919081815260200182805480156113f357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113d5575b5050505050905090565b60046020526000908152604090205460ff1681565b61141b3361394a565b61145a576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b61146382613ba8565b6114a9576040805162461bcd60e51b8152602060048201526012602482015271746f6b656e206e6f74206c6f616461626c6560701b604482015290519081900360640190fd5b60006114b58383613414565b90506114c860158263ffffffff613bc216565b60006114d5601a54613c2f565b90506001600160a01b0384161561157d576115006001600160a01b038516828563ffffffff613cf116565b806001600160a01b0316631b3c96b485856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561156057600080fd5b505af1158015611574573d6000803e3d6000fd5b505050506115f7565b806001600160a01b0316631b3c96b48486866040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001828152602001925050506000604051808303818588803b1580156115dd57600080fd5b505af11580156115f1573d6000803e3d6000fd5b50505050505b604080516001600160a01b03861681526020810185905281517f5f65674bec9af81f71be68674135a0ea3f163fb91984e3893d06da9f6ea2ce8a929181900390910190a150505050565b61164a3361394a565b611689576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b8066038d7ea4c68000111580156116a257506014548111155b6116dd5760405162461bcd60e51b815260040180806020018281038252602d815260200180614c71602d913960400191505060405180910390fd5b6116ee60158263ffffffff61395e16565b604080513381526020810183905281517f0b05243483e17c3f3377aee82b7d47e5700b48288695fc08b7ecc2759afa44ef929181900390910190a150565b6117353361394a565b611774576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b61178560098263ffffffff61395e16565b604080513381526020810183905281517f068f112e5ec923d412be64779fe69e0fcbb6784c6617e94cccc8fd348f2e0f21929181900390910190a150565b60606117ce3361394a565b61180d576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b6001600160a01b03851660009081526004602052604090205460ff1661183e5761183e60098563ffffffff613bc216565b611850856001600160a01b0316613e09565b8015611860575061186085613e0f565b15611a7f576000806118a88786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613e2992505050565b6001600160a01b038216600090815260046020526040902054919350915060ff166118ee5760006118d98883612a4e565b90506118ec60098263ffffffff613bc216565b505b61193e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b038b169291505063ffffffff613f3316565b604080516020808252818301909252606091602082018180388339019050509050600160f81b81601f8151811061197157fe5b60200101906001600160f81b031916908160001a9053507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b613888888888560405180866001600160a01b03166001600160a01b03168152602001858152602001806020018060200183810383528686828181526020019250808284376000838201819052601f909101601f191690920185810384528651815286516020918201939188019250908190849084905b83811015611a36578181015183820152602001611a1e565b50505050905090810190601f168015611a635780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a19250611c26915050565b60006060866001600160a01b0316868686604051808383808284376040519201945060009350909150508083038185875af1925050503d8060008114611ae1576040519150601f19603f3d011682016040523d82523d6000602084013e611ae6565b606091505b509150915081611b35576040805162461bcd60e51b81526020600482015260156024820152741b1bddcb5b195d995b0818d85b1b0819985a5b1959605a1b604482015290519081900360640190fd5b7ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b613878787878560405180866001600160a01b03166001600160a01b03168152602001858152602001806020018060200183810383528686828181526020019250808284376000838201819052601f909101601f191690920185810384528651815286516020918201939188019250908190849084905b83811015611be3578181015183820152602001611bcb565b50505050905090810190601f168015611c105780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a19150505b949350505050565b606060068054806020026020016040519081016040528092919081815260200182805480156113f3576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116113d5575050505050905090565b600d5460ff1690565b611ca0336139d3565b611cdf576040805162461bcd60e51b815260206004820152601a60248201526000805160206149ce833981519152604482015290519081900360640190fd5b60085460ff16611d205760405162461bcd60e51b8152600401808060200182810382526029815260200180614abb6029913960400191505060405180910390fd5b611d816006805480602002602001604051908101604052809291908181526020018280548015611097576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161107957505050505061301d565b8114611dbe5760405162461bcd60e51b8152600401808060200182810382526033815260200180614b896033913960400191505060405180910390fd5b60005b600654811015611ea5576004600060068381548110611ddc57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16611e9d5760016004600060068481548110611e1b57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600680546005919083908110611e6157fe5b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b600101611dc1565b507fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a33600660405180836001600160a01b03166001600160a01b03168152602001806020018281038252838181548152602001915080548015611f3157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f13575b5050935050505060405180910390a1611f4c600660006147de565b506008805460ff19169055565b60006112df6009613b12565b611f6e3361394a565b611fad576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b60085460ff16158015611fc85750600854610100900460ff16155b6120035760405162461bcd60e51b815260040180806020018281038252602e8152602001806149ee602e913960400191505060405180910390fd5b60085462010000900460ff1661204a5760405162461bcd60e51b81526004018080602001828103825260228152602001806149646022913960400191505060405180910390fd5b806120865760405162461bcd60e51b8152600401808060200182810382526022815260200180614b326022913960400191505060405180910390fd5b612092600783836147fc565b506008805461ff00191661010017905560408051602080840282810182019093528382527ffbc0e5ca6c7e4858daf0fdb185ef5186203e74ec9c64737e93c0aeaec596e1d192859285926121019285918591829185019084908082843760009201919091525061301d92505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b6121553361394a565b612194576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b600354600160a01b900460ff166121f2576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600380546001600160a01b0319169055604080516000808252602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a1565b6122483361394a565b612287576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b8066038d7ea4c68000111580156122a657506706f05b59d3b200008111155b6122e15760405162461bcd60e51b815260040180806020018281038252602e81526020018061490d602e913960400191505060405180910390fd5b6122f2600f8263ffffffff613b4716565b6040805182815290517faf2a77cd04c3cc155588dd3bf67b310ab4fb3b1da3cf6b8d7d4d2aa1d09b794c9181900360200190a150565b601a5490565b6001546001600160a01b031690565b60006112df600f613b12565b6123523361394a565b612391576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b60085460ff161580156123ac5750600854610100900460ff16155b6123e75760405162461bcd60e51b815260040180806020018281038252602e8152602001806149ee602e913960400191505060405180910390fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b81518110156124e95761244082828151811061243357fe5b602002602001015161394a565b1561247c5760405162461bcd60e51b815260040180806020018281038252602d815260200180614b05602d913960400191505060405180910390fd5b60006001600160a01b031682828151811061249357fe5b60200260200101516001600160a01b031614156124e15760405162461bcd60e51b815260040180806020018281038252602c8152602001806148be602c913960400191505060405180910390fd5b60010161241b565b5060085462010000900460ff166125315760405162461bcd60e51b81526004018080602001828103825260228152602001806149646022913960400191505060405180910390fd5b8161256d5760405162461bcd60e51b81526004018080602001828103825260238152602001806148ea6023913960400191505060405180910390fd5b612579600684846147fc565b506008805460ff1916600117905560408051602080850282810182019093528482527f9c80b3b5f68b3e017766d59e8d09b34efe6462b05c398f35cab9e271d9bc3b9c92869286926125e69285918591829185019084908082843760009201919091525061301d92505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b600e5490565b6003546001600160a01b031690565b60095490565b612656336139d3565b612695576040805162461bcd60e51b815260206004820152601a60248201526000805160206149ce833981519152604482015290519081900360640190fd5b60008484604051602001808383808284378083019250505092505050604051602081830303815290604052805190602001209050600061271c84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061271092508691506140f19050565b9063ffffffff61414216565b90506127278161394a565b612778576040805162461bcd60e51b815260206004820152601f60248201527f6d657373616765206e6f74207369676e656420627920746865206f776e657200604482015290519081900360640190fd5b604080516001600160a01b038316815290517fe17b8b13fa8129dfcce398634df2e90466c9a53e5ec65a9a9fea1b664f600fa69181900360200190a1505050505050565b6127c53361394a565b612804576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b8066038d7ea4c680001115801561281d57506014548111155b6128585760405162461bcd60e51b815260040180806020018281038252602d815260200180614c71602d913960400191505060405180910390fd5b61286960158263ffffffff613b4716565b6040805182815290517fc178d379965e5657b6fc57494e392f121a14119215dfb422aad7db4cc03f2d109181900360200190a150565b6128a83361394a565b6128e7576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b600354600160a01b900460ff16612945576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b6001600160a01b03821661298a5760405162461bcd60e51b8152600401808060200182810382526023815260200180614bbc6023913960400191505060405180910390fd5b6003805460ff60a01b1916600160a01b83151502179055806129e357604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b600354604080516001600160a01b039283168152918416602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080612a5d86614230565b505050935093509350508015612adb5781612ab1576040805162461bcd60e51b815260206004820152600f60248201526e0746f6b656e2072617465206973203608c1b604482015290519081900360640190fd5b612ad183612ac5878563ffffffff61435b16565b9063ffffffff6143bb16565b9350505050612ae3565b600093505050505b92915050565b60085462010000900460ff1681565b612b013361394a565b612b40576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b8080612b93576040805162461bcd60e51b815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b6001600160a01b038416612bee576040805162461bcd60e51b815260206004820181905260248201527f5f746f20616464726573732063616e6e6f742062652073657420746f20307830604482015290519081900360640190fd5b6001600160a01b03841660009081526004602052604090205460ff16612c3e57816001600160a01b03841615612c2b57612c288484612a4e565b90505b612c3c60098263ffffffff613bc216565b505b612c49848484614425565b604080516001600160a01b0380871682528516602082015280820184905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a150505050565b60185490565b60135460ff1690565b612cb1336139d3565b612cf0576040805162461bcd60e51b815260206004820152601a60248201526000805160206149ce833981519152604482015290519081900360640190fd5b600854610100900460ff16612d365760405162461bcd60e51b81526004018080602001828103825260288152602001806149a66028913960400191505060405180910390fd5b612d976007805480602002602001604051908101604052809291908181526020018280548015611097576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161107957505050505061301d565b8114612dd45760405162461bcd60e51b8152600401808060200182810382526047815260200180614a746047913960600191505060405180910390fd5b60005b600754811015612f62576004600060078381548110612df257fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615612f5a5760006004600060078481548110612e3257fe5b6000918252602080832091909101546001600160a01b031683528201929092526040018120805460ff1916921515929092179091555b600554612e7c90600163ffffffff61448916565b811015612f445760078281548110612e9057fe5b600091825260209091200154600580546001600160a01b039092169183908110612eb657fe5b6000918252602090912001546001600160a01b03161415612f3c57600580546000198101908110612ee357fe5b600091825260209091200154600580546001600160a01b039092169183908110612f0957fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550612f44565b600101612e68565b506005805490612f5890600019830161485f565b505b600101612dd7565b507fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b33600760405180836001600160a01b03166001600160a01b03168152602001806020018281038252838181548152602001915080548015612fee57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fd0575b5050935050505060405180910390a1613009600760006147de565b506008805461ff0019169055565b60125490565b60008160405160200180828051906020019060200280838360005b83811015613050578181015183820152602001613038565b50505050905001915050604051602081830303815290604052805190602001209050919050565b6130803361394a565b8061308f575061308f336139d3565b6130dd576040805162461bcd60e51b815260206004820152601a60248201527932b4ba3432b91037bbb732b91037b91031b7b73a3937b63632b960311b604482015290519081900360640190fd5b600854610100900460ff166131235760405162461bcd60e51b81526004018080602001828103825260288152602001806149a66028913960400191505060405180910390fd5b6131846007805480602002602001604051908101604052809291908181526020018280548015611097576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161107957505050505061301d565b81146131c15760405162461bcd60e51b8152600401808060200182810382526032815260200180614c096032913960400191505060405180910390fd5b6131cd600760006147de565b6008805461ff0019169055604080513381526020810183905281517f13c935eb475aa0f6e931fece83e2ac44569ce2d53460d29a6dedab40b965c8a3929181900390910190a150565b6005818154811061322357fe5b6000918252602090912001546001600160a01b0316905081565b60155490565b600854610100900460ff1681565b60025490565b80806132aa576040805162461bcd60e51b815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b6132b33361394a565b806132c257506132c2336139d3565b613310576040805162461bcd60e51b815260206004820152601a60248201527932b4ba3432b91037bbb732b91037b91031b7b73a3937b63632b960311b604482015290519081900360640190fd5b613321600f8363ffffffff613bc216565b613329612638565b6001600160a01b03166108fc839081150290604051600060405180830381858888f19350505050158015613361573d6000803e3d6000fd5b507f611b7c0d84fda988026215bef9b3e4d81cbceced7e679be6d5e044b588467c0e3361338c612638565b604080516001600160a01b03938416815291909216602082015280820185905290519081900360600190a15050565b6133c4336139d3565b613403576040805162461bcd60e51b815260206004820152601a60248201526000805160206149ce833981519152604482015290519081900360640190fd5b61178560098263ffffffff6144e616565b600061341e61453a565b6001600160a01b0316836001600160a01b0316141561343e575080612ae3565b816001600160a01b0384161561350f57600080600061345c87614230565b50505093509350935050806134b1576040805162461bcd60e51b8152602060048201526016602482015275746f6b656e206973206e6f7420617661696c61626c6560501b604482015290519081900360640190fd5b816134f5576040805162461bcd60e51b815260206004820152600f60248201526e0746f6b656e2072617465206973203608c1b604482015290519081900360640190fd5b61350983612ac5888563ffffffff61435b16565b93505050505b600080600061351c6145b0565b5050509350935093505080613571576040805162461bcd60e51b8152602060048201526016602482015275746f6b656e206973206e6f7420617661696c61626c6560501b604482015290519081900360640190fd5b816135ba576040805162461bcd60e51b81526020600482015260146024820152730737461626c65636f696e207261746520697320360641b604482015290519081900360640190fd5b6135ce82612ac5868663ffffffff61435b16565b979650505050505050565b6135e2336139d3565b613621576040805162461bcd60e51b815260206004820152601a60248201526000805160206149ce833981519152604482015290519081900360640190fd5b6116ee60158263ffffffff6144e616565b61363b336139d3565b61367a576040805162461bcd60e51b815260206004820152601a60248201526000805160206149ce833981519152604482015290519081900360640190fd5b610f59600f8263ffffffff6144e616565b6136943361394a565b6136d3576040805162461bcd60e51b81526020600482015260166024820152600080516020614986833981519152604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b81518110156137c85761371f82828151811061243357fe5b1561375b5760405162461bcd60e51b815260040180806020018281038252602d815260200180614b05602d913960400191505060405180910390fd5b60006001600160a01b031682828151811061377257fe5b60200260200101516001600160a01b031614156137c05760405162461bcd60e51b815260040180806020018281038252602c8152602001806148be602c913960400191505060405180910390fd5b600101613707565b5060085462010000900460ff16156138115760405162461bcd60e51b8152600401808060200182810382526026815260200180614a4e6026913960400191505060405180910390fd5b60005b828110156138c65760016004600086868581811061382e57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600584848381811061388357fe5b835460018181018655600095865260209586902090910180546001600160a01b0319166001600160a01b0396909302949094013594909416179091555001613814565b506008805462ff0000191662010000179055604080513380825260208083018481529383018690527fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a9391928792879260608301908590850280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b6003546001600160a01b0390811691161490565b600482015460ff16156139b8576040805162461bcd60e51b815260206004820152601a60248201527f6461696c79206c696d6974206e6f742075706461746561626c65000000000000604482015290519081900360640190fd5b6139c282826146b6565b50600401805460ff19166001179055565b60006139e0600254613c2f565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613a3557600080fd5b505afa158015613a49573d6000803e3d6000fd5b505050506040513d6020811015613a5f57600080fd5b505192915050565b60006001600160a01b03821615613b0157816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613ace57600080fd5b505afa158015613ae2573d6000803e3d6000fd5b505050506040513d6020811015613af857600080fd5b50519050612ae3565b506001600160a01b03821631612ae3565b6002810154600090613b2d906201518063ffffffff6146d916565b421115613b3c57508054610e9a565b506001810154610e9a565b600482015460ff16613ba0576040805162461bcd60e51b815260206004820152601f60248201527f6461696c79206c696d6974206973207374696c6c2075706461746561626c6500604482015290519081900360640190fd5b600390910155565b600080613bb483614230565b509098975050505050505050565b613bcb82614733565b8082600101541015613c0e5760405162461bcd60e51b8152600401808060200182810382526032815260200180614a1c6032913960400191505060405180910390fd5b6001820154613c23908263ffffffff61448916565b82600101819055505050565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015613c7c57600080fd5b505afa158015613c90573d6000803e3d6000fd5b505050506040513d6020811015613ca657600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015613a3557600080fd5b801580613d77575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015613d4957600080fd5b505afa158015613d5d573d6000803e3d6000fd5b505050506040513d6020811015613d7357600080fd5b5051155b613db25760405162461bcd60e51b8152600401808060200182810382526036815260200180614c3b6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052613e04908490613f33565b505050565b3b151590565b600080613e1b83614230565b509198975050505050505050565b600080613e37600e54613c2f565b6001600160a01b031663afc72e9385856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613eab578181015183820152602001613e93565b50505050905090810190601f168015613ed85780820380516001836020036101000a031916815260200191505b509350505050604080518083038186803b158015613ef557600080fd5b505afa158015613f09573d6000803e3d6000fd5b505050506040513d6040811015613f1f57600080fd5b508051602090910151909590945092505050565b613f45826001600160a01b0316613e09565b613f96576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310613fd45780518252601f199092019160209182019101613fb5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614036576040519150601f19603f3d011682016040523d82523d6000602084013e61403b565b606091505b509150915081614092576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156140eb578080602001905160208110156140ae57600080fd5b50516140eb5760405162461bcd60e51b815260040180806020018281038252602a815260200180614bdf602a913960400191505060405180910390fd5b50505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b6000815160411461415557506000612ae3565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561419b5760009350505050612ae3565b8060ff16601b141580156141b357508060ff16601c14155b156141c45760009350505050612ae3565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa15801561421b573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6060600080600080600080614246600e54613c2f565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b15801561429b57600080fd5b505afa1580156142af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156142d857600080fd5b810190808051600160201b8111156142ef57600080fd5b8201602081018481111561430257600080fd5b8151600160201b81118282018710171561431b57600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949e50929c50909a509850965090945092505050919395979092949650565b60008261436a57506000612ae3565b8282028284828161437757fe5b04146143b45760405162461bcd60e51b8152600401808060200182810382526021815260200180614ae46021913960400191505060405180910390fd5b9392505050565b6000808211614411576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b600082848161441c57fe5b04949350505050565b6001600160a01b03821661446f576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015614469573d6000803e3d6000fd5b50613e04565b613e046001600160a01b038316848363ffffffff61478c16565b6000828211156144e0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b808260030154146145285760405162461bcd60e51b815260040180806020018281038252602981526020018061493b6029913960400191505060405180910390fd5b6145368283600301546146b6565b5050565b6000614547600e54613c2f565b6001600160a01b031663e9cbd8226040518163ffffffff1660e01b815260040160206040518083038186803b15801561457f57600080fd5b505afa158015614593573d6000803e3d6000fd5b505050506040513d60208110156145a957600080fd5b5051905090565b60606000806000806000806145c6600e54613c2f565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156145fe57600080fd5b505afa158015614612573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561463b57600080fd5b810190808051600160201b81111561465257600080fd5b8201602081018481111561466557600080fd5b8151600160201b81118282018710171561467e57600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949f939e50919c509a509850919650945092505050565b6146bf82614733565b808255600182015481101561453657815460018301555050565b6000828201838110156143b4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600281015461474b906201518063ffffffff6146d916565b42111561478957426002820155805460018201556040517fe93bc25276d408d390778e7a8b926f2f67209c43ed540081b951fe128f0d3cd290600090a15b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052613e04908490613f33565b5080546000825590600052602060002090810190614789919061487f565b82805482825590600052602060002090810192821561484f579160200282015b8281111561484f5781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061481c565b5061485b929150614899565b5090565b815481835581811115613e0457600083815260209020613e049181019083015b610ea391905b8082111561485b5760008155600101614885565b610ea391905b8082111561485b5780546001600160a01b031916815560010161489f56fe70726f76696465642077686974656c69737420636f6e7461696e7320746865207a65726f206164647265737370656e64696e672077686974656c697374206164646974696f6e20697320656d70747967617320746f7020757020616d6f756e74206973206f75747369646520746865206d696e2f6d61782072616e6765636f6e6669726d656420616e64207375626d6974746564206c696d69747320646f6e74206d6174636877686974656c69737420686173206e6f74206265656e20696e697469616c697a656473656e646572206973206e6f7420616e206f776e65720000000000000000000077686974656c6973742072656d6f76616c20686173206e6f74206265656e207375626d697474656473656e646572206973206e6f74206120636f6e74726f6c6c657200000000000077686974656c697374206f7065726174696f6e2068617320616c7265616479206265656e207375626d6974746564617661696c61626c652068617320746f2062652067726561746572206f7220657175616c20746f2075736520616d6f756e7477686974656c6973742068617320616c7265616479206265656e20696e697469616c697a656468617368206f66207468652070656e64696e672077686974656c6973742072656d6f76616c20646f6573206e6f74206d617463682074686520636f6e6669726d6564206861736877686974656c697374206164646974696f6e20686173206e6f74206265656e207375626d6974746564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7770726f76696465642077686974656c69737420636f6e7461696e7320746865206f776e6572206164647265737370656e64696e672077686974656c6973742072656d6f76616c20697320656d70747968617368206f66207468652070656e64696e672077686974656c697374206164646974696f6e20646f6573206e6f74206d6174636868617368206f66207468652070656e64696e672077686974656c697374206164646974696f6e20646f206e6f74206d617463686f776e65722063616e6e6f742062652073657420746f207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656468617368206f66207468652070656e64696e672077686974656c6973742072656d6f76616c20646f206e6f74206d617463685361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636563617264206c6f616420616d6f756e74206973206f75747369646520746865206d696e2f6d61782072616e6765a265627a7a7230582036a42398c993ec55766895313cd031283b6dd404cc22500e4153c409f50925a564736f6c634300050a0032a265627a7a7230582063c3a9958555fb42e04f5fdc75e9c61251316bfd5da87075dadf4748d1405cda64736f6c634300050a0032"

// DeployWalletDeployer deploys a new Ethereum contract, binding an instance of WalletDeployer to it.
func DeployWalletDeployer(auth *bind.TransactOpts, backend bind.ContractBackend, _ens common.Address, _defaultSpendLimit *big.Int) (common.Address, *types.Transaction, *WalletDeployer, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletDeployerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletDeployerBin), backend, _ens, _defaultSpendLimit)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WalletDeployer{WalletDeployerCaller: WalletDeployerCaller{contract: contract}, WalletDeployerTransactor: WalletDeployerTransactor{contract: contract}, WalletDeployerFilterer: WalletDeployerFilterer{contract: contract}}, nil
}

// WalletDeployer is an auto generated Go binding around an Ethereum contract.
type WalletDeployer struct {
	WalletDeployerCaller     // Read-only binding to the contract
	WalletDeployerTransactor // Write-only binding to the contract
	WalletDeployerFilterer   // Log filterer for contract events
}

// WalletDeployerCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletDeployerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletDeployerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletDeployerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletDeployerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletDeployerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletDeployerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletDeployerSession struct {
	Contract     *WalletDeployer   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletDeployerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletDeployerCallerSession struct {
	Contract *WalletDeployerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// WalletDeployerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletDeployerTransactorSession struct {
	Contract     *WalletDeployerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// WalletDeployerRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletDeployerRaw struct {
	Contract *WalletDeployer // Generic contract binding to access the raw methods on
}

// WalletDeployerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletDeployerCallerRaw struct {
	Contract *WalletDeployerCaller // Generic read-only contract binding to access the raw methods on
}

// WalletDeployerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletDeployerTransactorRaw struct {
	Contract *WalletDeployerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWalletDeployer creates a new instance of WalletDeployer, bound to a specific deployed contract.
func NewWalletDeployer(address common.Address, backend bind.ContractBackend) (*WalletDeployer, error) {
	contract, err := bindWalletDeployer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WalletDeployer{WalletDeployerCaller: WalletDeployerCaller{contract: contract}, WalletDeployerTransactor: WalletDeployerTransactor{contract: contract}, WalletDeployerFilterer: WalletDeployerFilterer{contract: contract}}, nil
}

// NewWalletDeployerCaller creates a new read-only instance of WalletDeployer, bound to a specific deployed contract.
func NewWalletDeployerCaller(address common.Address, caller bind.ContractCaller) (*WalletDeployerCaller, error) {
	contract, err := bindWalletDeployer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletDeployerCaller{contract: contract}, nil
}

// NewWalletDeployerTransactor creates a new write-only instance of WalletDeployer, bound to a specific deployed contract.
func NewWalletDeployerTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletDeployerTransactor, error) {
	contract, err := bindWalletDeployer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletDeployerTransactor{contract: contract}, nil
}

// NewWalletDeployerFilterer creates a new log filterer instance of WalletDeployer, bound to a specific deployed contract.
func NewWalletDeployerFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletDeployerFilterer, error) {
	contract, err := bindWalletDeployer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletDeployerFilterer{contract: contract}, nil
}

// bindWalletDeployer binds a generic wrapper to an already deployed contract.
func bindWalletDeployer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletDeployerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletDeployer *WalletDeployerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletDeployer.Contract.WalletDeployerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletDeployer *WalletDeployerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletDeployer.Contract.WalletDeployerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletDeployer *WalletDeployerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletDeployer.Contract.WalletDeployerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletDeployer *WalletDeployerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletDeployer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletDeployer *WalletDeployerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletDeployer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletDeployer *WalletDeployerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletDeployer.Contract.contract.Transact(opts, method, params...)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletDeployer *WalletDeployerCaller) CachedWallets(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "cachedWallets", arg0)
	return *ret0, err
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletDeployer *WalletDeployerSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletDeployer.Contract.CachedWallets(&_WalletDeployer.CallOpts, arg0)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletDeployer *WalletDeployerCallerSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletDeployer.Contract.CachedWallets(&_WalletDeployer.CallOpts, arg0)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletDeployer *WalletDeployerCaller) CachedWalletsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "cachedWalletsCount")
	return *ret0, err
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletDeployer *WalletDeployerSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletDeployer.Contract.CachedWalletsCount(&_WalletDeployer.CallOpts)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletDeployer *WalletDeployerCallerSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletDeployer.Contract.CachedWalletsCount(&_WalletDeployer.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerSession) ControllerNode() ([32]byte, error) {
	return _WalletDeployer.Contract.ControllerNode(&_WalletDeployer.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerCallerSession) ControllerNode() ([32]byte, error) {
	return _WalletDeployer.Contract.ControllerNode(&_WalletDeployer.CallOpts)
}

// DefaultSpendLimit is a free data retrieval call binding the contract method 0xa7a7d3bc.
//
// Solidity: function defaultSpendLimit() constant returns(uint256)
func (_WalletDeployer *WalletDeployerCaller) DefaultSpendLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "defaultSpendLimit")
	return *ret0, err
}

// DefaultSpendLimit is a free data retrieval call binding the contract method 0xa7a7d3bc.
//
// Solidity: function defaultSpendLimit() constant returns(uint256)
func (_WalletDeployer *WalletDeployerSession) DefaultSpendLimit() (*big.Int, error) {
	return _WalletDeployer.Contract.DefaultSpendLimit(&_WalletDeployer.CallOpts)
}

// DefaultSpendLimit is a free data retrieval call binding the contract method 0xa7a7d3bc.
//
// Solidity: function defaultSpendLimit() constant returns(uint256)
func (_WalletDeployer *WalletDeployerCallerSession) DefaultSpendLimit() (*big.Int, error) {
	return _WalletDeployer.Contract.DefaultSpendLimit(&_WalletDeployer.CallOpts)
}

// DeployedWallets is a free data retrieval call binding the contract method 0x80a12c0e.
//
// Solidity: function deployedWallets(address ) constant returns(address)
func (_WalletDeployer *WalletDeployerCaller) DeployedWallets(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "deployedWallets", arg0)
	return *ret0, err
}

// DeployedWallets is a free data retrieval call binding the contract method 0x80a12c0e.
//
// Solidity: function deployedWallets(address ) constant returns(address)
func (_WalletDeployer *WalletDeployerSession) DeployedWallets(arg0 common.Address) (common.Address, error) {
	return _WalletDeployer.Contract.DeployedWallets(&_WalletDeployer.CallOpts, arg0)
}

// DeployedWallets is a free data retrieval call binding the contract method 0x80a12c0e.
//
// Solidity: function deployedWallets(address ) constant returns(address)
func (_WalletDeployer *WalletDeployerCallerSession) DeployedWallets(arg0 common.Address) (common.Address, error) {
	return _WalletDeployer.Contract.DeployedWallets(&_WalletDeployer.CallOpts, arg0)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletDeployer *WalletDeployerCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletDeployer *WalletDeployerSession) Ens() (common.Address, error) {
	return _WalletDeployer.Contract.Ens(&_WalletDeployer.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletDeployer *WalletDeployerCallerSession) Ens() (common.Address, error) {
	return _WalletDeployer.Contract.Ens(&_WalletDeployer.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletDeployer *WalletDeployerCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletDeployer *WalletDeployerSession) EnsRegistry() (common.Address, error) {
	return _WalletDeployer.Contract.EnsRegistry(&_WalletDeployer.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletDeployer *WalletDeployerCallerSession) EnsRegistry() (common.Address, error) {
	return _WalletDeployer.Contract.EnsRegistry(&_WalletDeployer.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerCaller) LicenceNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "licenceNode")
	return *ret0, err
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerSession) LicenceNode() ([32]byte, error) {
	return _WalletDeployer.Contract.LicenceNode(&_WalletDeployer.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerCallerSession) LicenceNode() ([32]byte, error) {
	return _WalletDeployer.Contract.LicenceNode(&_WalletDeployer.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletDeployer.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletDeployer.Contract.TokenWhitelistNode(&_WalletDeployer.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletDeployer *WalletDeployerCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletDeployer.Contract.TokenWhitelistNode(&_WalletDeployer.CallOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletDeployer *WalletDeployerTransactor) CacheWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletDeployer.contract.Transact(opts, "cacheWallet")
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletDeployer *WalletDeployerSession) CacheWallet() (*types.Transaction, error) {
	return _WalletDeployer.Contract.CacheWallet(&_WalletDeployer.TransactOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletDeployer *WalletDeployerTransactorSession) CacheWallet() (*types.Transaction, error) {
	return _WalletDeployer.Contract.CacheWallet(&_WalletDeployer.TransactOpts)
}

// DeployWallet is a paid mutator transaction binding the contract method 0xc8cc2fc2.
//
// Solidity: function deployWallet(address _owner) returns()
func (_WalletDeployer *WalletDeployerTransactor) DeployWallet(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _WalletDeployer.contract.Transact(opts, "deployWallet", _owner)
}

// DeployWallet is a paid mutator transaction binding the contract method 0xc8cc2fc2.
//
// Solidity: function deployWallet(address _owner) returns()
func (_WalletDeployer *WalletDeployerSession) DeployWallet(_owner common.Address) (*types.Transaction, error) {
	return _WalletDeployer.Contract.DeployWallet(&_WalletDeployer.TransactOpts, _owner)
}

// DeployWallet is a paid mutator transaction binding the contract method 0xc8cc2fc2.
//
// Solidity: function deployWallet(address _owner) returns()
func (_WalletDeployer *WalletDeployerTransactorSession) DeployWallet(_owner common.Address) (*types.Transaction, error) {
	return _WalletDeployer.Contract.DeployWallet(&_WalletDeployer.TransactOpts, _owner)
}

// MigrateWallet is a paid mutator transaction binding the contract method 0x17ca9305.
//
// Solidity: function migrateWallet(address _owner, address _oldWallet, bool _initializedSpendLimit, bool _initializedGasTopUpLimit, bool _initializedWhitelist, uint256 _spendLimit, uint256 _gasTopUpLimit, address[] _whitelistedAddresses) returns()
func (_WalletDeployer *WalletDeployerTransactor) MigrateWallet(opts *bind.TransactOpts, _owner common.Address, _oldWallet common.Address, _initializedSpendLimit bool, _initializedGasTopUpLimit bool, _initializedWhitelist bool, _spendLimit *big.Int, _gasTopUpLimit *big.Int, _whitelistedAddresses []common.Address) (*types.Transaction, error) {
	return _WalletDeployer.contract.Transact(opts, "migrateWallet", _owner, _oldWallet, _initializedSpendLimit, _initializedGasTopUpLimit, _initializedWhitelist, _spendLimit, _gasTopUpLimit, _whitelistedAddresses)
}

// MigrateWallet is a paid mutator transaction binding the contract method 0x17ca9305.
//
// Solidity: function migrateWallet(address _owner, address _oldWallet, bool _initializedSpendLimit, bool _initializedGasTopUpLimit, bool _initializedWhitelist, uint256 _spendLimit, uint256 _gasTopUpLimit, address[] _whitelistedAddresses) returns()
func (_WalletDeployer *WalletDeployerSession) MigrateWallet(_owner common.Address, _oldWallet common.Address, _initializedSpendLimit bool, _initializedGasTopUpLimit bool, _initializedWhitelist bool, _spendLimit *big.Int, _gasTopUpLimit *big.Int, _whitelistedAddresses []common.Address) (*types.Transaction, error) {
	return _WalletDeployer.Contract.MigrateWallet(&_WalletDeployer.TransactOpts, _owner, _oldWallet, _initializedSpendLimit, _initializedGasTopUpLimit, _initializedWhitelist, _spendLimit, _gasTopUpLimit, _whitelistedAddresses)
}

// MigrateWallet is a paid mutator transaction binding the contract method 0x17ca9305.
//
// Solidity: function migrateWallet(address _owner, address _oldWallet, bool _initializedSpendLimit, bool _initializedGasTopUpLimit, bool _initializedWhitelist, uint256 _spendLimit, uint256 _gasTopUpLimit, address[] _whitelistedAddresses) returns()
func (_WalletDeployer *WalletDeployerTransactorSession) MigrateWallet(_owner common.Address, _oldWallet common.Address, _initializedSpendLimit bool, _initializedGasTopUpLimit bool, _initializedWhitelist bool, _spendLimit *big.Int, _gasTopUpLimit *big.Int, _whitelistedAddresses []common.Address) (*types.Transaction, error) {
	return _WalletDeployer.Contract.MigrateWallet(&_WalletDeployer.TransactOpts, _owner, _oldWallet, _initializedSpendLimit, _initializedGasTopUpLimit, _initializedWhitelist, _spendLimit, _gasTopUpLimit, _whitelistedAddresses)
}

// WalletDeployerCachedWalletIterator is returned from FilterCachedWallet and is used to iterate over the raw logs and unpacked data for CachedWallet events raised by the WalletDeployer contract.
type WalletDeployerCachedWalletIterator struct {
	Event *WalletDeployerCachedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletDeployerCachedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletDeployerCachedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletDeployerCachedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletDeployerCachedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletDeployerCachedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletDeployerCachedWallet represents a CachedWallet event raised by the WalletDeployer contract.
type WalletDeployerCachedWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCachedWallet is a free log retrieval operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletDeployer *WalletDeployerFilterer) FilterCachedWallet(opts *bind.FilterOpts) (*WalletDeployerCachedWalletIterator, error) {

	logs, sub, err := _WalletDeployer.contract.FilterLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletDeployerCachedWalletIterator{contract: _WalletDeployer.contract, event: "CachedWallet", logs: logs, sub: sub}, nil
}

// WatchCachedWallet is a free log subscription operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletDeployer *WalletDeployerFilterer) WatchCachedWallet(opts *bind.WatchOpts, sink chan<- *WalletDeployerCachedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletDeployer.contract.WatchLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletDeployerCachedWallet)
				if err := _WalletDeployer.contract.UnpackLog(event, "CachedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCachedWallet is a log parse operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletDeployer *WalletDeployerFilterer) ParseCachedWallet(log types.Log) (*WalletDeployerCachedWallet, error) {
	event := new(WalletDeployerCachedWallet)
	if err := _WalletDeployer.contract.UnpackLog(event, "CachedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WalletDeployerDeployedWalletIterator is returned from FilterDeployedWallet and is used to iterate over the raw logs and unpacked data for DeployedWallet events raised by the WalletDeployer contract.
type WalletDeployerDeployedWalletIterator struct {
	Event *WalletDeployerDeployedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletDeployerDeployedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletDeployerDeployedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletDeployerDeployedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletDeployerDeployedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletDeployerDeployedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletDeployerDeployedWallet represents a DeployedWallet event raised by the WalletDeployer contract.
type WalletDeployerDeployedWallet struct {
	Wallet common.Address
	Owner  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDeployedWallet is a free log retrieval operation binding the contract event 0xc02db5f4164f89d90905928336769906e16d79c4a77342126eb647ca9440d078.
//
// Solidity: event DeployedWallet(address _wallet, address _owner)
func (_WalletDeployer *WalletDeployerFilterer) FilterDeployedWallet(opts *bind.FilterOpts) (*WalletDeployerDeployedWalletIterator, error) {

	logs, sub, err := _WalletDeployer.contract.FilterLogs(opts, "DeployedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletDeployerDeployedWalletIterator{contract: _WalletDeployer.contract, event: "DeployedWallet", logs: logs, sub: sub}, nil
}

// WatchDeployedWallet is a free log subscription operation binding the contract event 0xc02db5f4164f89d90905928336769906e16d79c4a77342126eb647ca9440d078.
//
// Solidity: event DeployedWallet(address _wallet, address _owner)
func (_WalletDeployer *WalletDeployerFilterer) WatchDeployedWallet(opts *bind.WatchOpts, sink chan<- *WalletDeployerDeployedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletDeployer.contract.WatchLogs(opts, "DeployedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletDeployerDeployedWallet)
				if err := _WalletDeployer.contract.UnpackLog(event, "DeployedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployedWallet is a log parse operation binding the contract event 0xc02db5f4164f89d90905928336769906e16d79c4a77342126eb647ca9440d078.
//
// Solidity: event DeployedWallet(address _wallet, address _owner)
func (_WalletDeployer *WalletDeployerFilterer) ParseDeployedWallet(log types.Log) (*WalletDeployerDeployedWallet, error) {
	event := new(WalletDeployerDeployedWallet)
	if err := _WalletDeployer.contract.UnpackLog(event, "DeployedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WalletDeployerMigratedWalletIterator is returned from FilterMigratedWallet and is used to iterate over the raw logs and unpacked data for MigratedWallet events raised by the WalletDeployer contract.
type WalletDeployerMigratedWalletIterator struct {
	Event *WalletDeployerMigratedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletDeployerMigratedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletDeployerMigratedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletDeployerMigratedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletDeployerMigratedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletDeployerMigratedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletDeployerMigratedWallet represents a MigratedWallet event raised by the WalletDeployer contract.
type WalletDeployerMigratedWallet struct {
	Wallet    common.Address
	OldWallet common.Address
	Owner     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMigratedWallet is a free log retrieval operation binding the contract event 0x628666dc1e342232638fe725b30d07a00b36d24d32af174fdaea535df6c1eff0.
//
// Solidity: event MigratedWallet(address _wallet, address _oldWallet, address _owner)
func (_WalletDeployer *WalletDeployerFilterer) FilterMigratedWallet(opts *bind.FilterOpts) (*WalletDeployerMigratedWalletIterator, error) {

	logs, sub, err := _WalletDeployer.contract.FilterLogs(opts, "MigratedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletDeployerMigratedWalletIterator{contract: _WalletDeployer.contract, event: "MigratedWallet", logs: logs, sub: sub}, nil
}

// WatchMigratedWallet is a free log subscription operation binding the contract event 0x628666dc1e342232638fe725b30d07a00b36d24d32af174fdaea535df6c1eff0.
//
// Solidity: event MigratedWallet(address _wallet, address _oldWallet, address _owner)
func (_WalletDeployer *WalletDeployerFilterer) WatchMigratedWallet(opts *bind.WatchOpts, sink chan<- *WalletDeployerMigratedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletDeployer.contract.WatchLogs(opts, "MigratedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletDeployerMigratedWallet)
				if err := _WalletDeployer.contract.UnpackLog(event, "MigratedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigratedWallet is a log parse operation binding the contract event 0x628666dc1e342232638fe725b30d07a00b36d24d32af174fdaea535df6c1eff0.
//
// Solidity: event MigratedWallet(address _wallet, address _oldWallet, address _owner)
func (_WalletDeployer *WalletDeployerFilterer) ParseMigratedWallet(log types.Log) (*WalletDeployerMigratedWallet, error) {
	event := new(WalletDeployerMigratedWallet)
	if err := _WalletDeployer.contract.UnpackLog(event, "MigratedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}
