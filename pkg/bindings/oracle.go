// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_updateDate\",\"type\":\"uint256\"}],\"name\":\"updateTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"magnitude\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_symbols\",\"type\":\"bytes32[]\"},{\"name\":\"_magnitude\",\"type\":\"uint256[]\"},{\"name\":\"_updateDate\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_controllerName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_magnitude\",\"type\":\"uint256\"}],\"name\":\"AddedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemovedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"UpdatedTokenRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"Converted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedProofVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `60806040523480156200001157600080fd5b506040516060806200531a83398101604081815282516020808501519483015160058054600160a060020a031916600160a060020a03881617905560068190556060850184528385527fa0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a98379185019182527f10bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca9484019490945290939291620000bb9160099162000997565b5060008054600160a060020a031916600160a060020a038516179055620000f06402540be4006401000000006200012d810204565b620001247ff0000000000000000000000000000000000000000000000000000000000000006401000000006200036d810204565b50505062000a39565b600054600160a060020a031615806200016357506000546200016190600160a060020a0316640100000000620005b2810204565b155b1562000180576200017e6000640100000000620005b6810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620001ec57600080fd5b505af115801562000201573d6000803e3d6000fd5b505050506040513d60208110156200021857600080fd5b5051600154600160a060020a03908116911614620002ea576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200029c57600080fd5b505af1158015620002b1573d6000803e3d6000fd5b505050506040513d6020811015620002c857600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156200035157600080fd5b505af115801562000366573d6000803e3d6000fd5b5050505050565b600054600160a060020a03161580620003a35750600054620003a190600160a060020a0316640100000000620005b2810204565b155b15620003c057620003be6000640100000000620005b6810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200042c57600080fd5b505af115801562000441573d6000803e3d6000fd5b505050506040513d60208110156200045857600080fd5b5051600154600160a060020a039081169116146200052a576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620004dc57600080fd5b505af1158015620004f1573d6000803e3d6000fd5b505050506040513d60208110156200050857600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f688dcfd70000000000000000000000000000000000000000000000000000000081527fff00000000000000000000000000000000000000000000000000000000000000841660048201529051600160a060020a039092169163688dcfd79160248082019260009290919082900301818387803b1580156200035157600080fd5b3b90565b6000620005cb640100000000620005d1810204565b92915050565b600080620005fc731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620005b2810204565b11156200067a5760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e6574000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b5060016200097b565b6000620006a473c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620005b2810204565b1115620007195760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e330000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b60006200074373b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620005b2810204565b1115620007b85760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e0000000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b6000620007e273146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620005b2810204565b1115620008575760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b656279000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b600062000881736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620005b2810204565b1115620008b7575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016200097b565b6000620008e17320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620005b2810204565b111562000917575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016200097b565b6000620009417351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620005b2810204565b111562000977575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016200097b565b5060005b90565b80516200099390600290602084019062000997565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009da57805160ff191683800117855562000a0a565b8280016001018555821562000a0a579182015b8281111562000a0a578251825591602001919060010190620009ed565b5062000a1892915062000a1c565b5090565b6200097b91905b8082111562000a18576000815560010162000a23565b6148d18062000a496000396000f3006080604052600436106100a05763ffffffff60e060020a60003504166327dc297e81146100a557806338bbfa501461010557806367c6e39c146101a15780636c3824ef146101d757806383d41509146101f75780639f6f99ee146101ff578063ca6ad1e41461021f578063cc20411914610237578063d545782e146102c1578063e4860339146102e8578063f3fef3a3146103a1578063fcde6831146103c5575b600080fd5b3480156100b157600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101039583359536956044949193909101919081908401838280828437509497506104009650505050505050565b005b34801561011157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261010395833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506104209650505050505050565b3480156101ad57600080fd5b506101c5600160a060020a0360043516602435610683565b60408051918252519081900360200190f35b3480156101e357600080fd5b50610103600480356024810191013561078e565b610103610a12565b34801561020b57600080fd5b506101036004803560248101910135610a69565b34801561022b57600080fd5b50610103600435610b17565b34801561024357600080fd5b5061024c610ba3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028657818101518382015260200161026e565b50505050905090810190601f1680156102b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102cd57600080fd5b50610103600160a060020a0360043516602435604435610c31565b3480156102f457600080fd5b50610309600160a060020a0360043516610d57565b604051808060200186815260200185815260200184815260200183151515158152602001828103825287818151815260200191508051906020019080838360005b8381101561036257818101518382015260200161034a565b50505050905090810190601f16801561038f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b3480156103ad57600080fd5b50610103600160a060020a0360043516602435610e14565b3480156103d157600080fd5b506101036024600480358281019290820135918135808301929082013591604435918201910135606435610e9c565b60408051600081526020810190915261041c9083908390610420565b5050565b60008060008061042e61122d565b600160a060020a0316331461048d576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f74206f7261636c697a6500000000000000000000604482015290519081900360640190fd5b6000878152600a6020526040902054600160a060020a031693508315156104fe576040805160e560020a62461bcd02815260206004820152601c60248201527f71756572794944206d61746368657320746f2061646472657373203000000000604482015290519081900360640190fd5b600160a060020a03841660009081526007602090815260409182902060098054845160026001831615610100026000190190921691909104601f81018590048502820185019095528481529196506105b7938a938a939291908301828280156105a85780601f1061057d576101008083540402835291602001916105a8565b820191906000526020600020905b81548152906001019060200180831161058b57829003601f168201915b5050505050866003015461141f565b9092509050811561067a5761060b610604876040805190810160405280600381526020017f4554480000000000000000000000000000000000000000000000000000000000815250611bc4565b6012611dbe565b6002840181905560408051600160a060020a0387168152602081019290925280517f0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf069281900390910190a1600383018190556000878152600a602052604090208054600160a060020a03191690555b50505050505050565b600160a060020a03821660009081526007602052604081206004810154829060ff1680156106b45750600282015415155b151561070a576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b6107358260010154610729846002015487611f3090919063ffffffff16565b9063ffffffff611f6916565b60408051600160a060020a03881681526020810187905280820183905290519192507fe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6919081900360600190a18092505b505092915050565b600080600061079c33611f8c565b15156107e0576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614866833981519152604482015290519081900360640190fd5b600092505b83831015610a0b57600760008686868181106107fd57fe5b60209081029290920135600160a060020a03168352508101919091526040016000206004015460ff16151561087c576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f6e2d6578697374696e6720746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b84848481811061088857fe5b60209081029290920135600160a060020a031660008181526007909352604083209094509190506108b982826146a0565b5060006001820181905560028201819055600382018190556004909101805460ff1916905590505b6008546108f590600163ffffffff61214b16565b8110156109b05781600160a060020a031660088281548110151561091557fe5b600091825260209091200154600160a060020a031614156109a8576008805461094590600163ffffffff61214b16565b8154811061094f57fe5b60009182526020909120015460088054600160a060020a03909216918390811061097557fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506109b0565b6001016108e1565b60088054906109c39060001983016146e4565b5060408051600160a060020a038416815290517fc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d7489181900360200190a16001909201916107e5565b5050505050565b610a1b33611f8c565b1515610a5f576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614866833981519152604482015290519081900360640190fd5b610a67612162565b565b610a7233611f8c565b1515610ab6576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614866833981519152604482015290519081900360640190fd5b610ac260098383614708565b507f7f6d11bd58228c5bcb43ead99b84afe57a4f3237d64f7654713e5c301899fcae82826040518080602001828103825284848281815260200192508082843760405192018290039550909350505050a15050565b610b2033611f8c565b1515610b64576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614866833981519152604482015290519081900360640190fd5b610b6d81612576565b6040805182815290517f149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c99181900360200190a150565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c295780601f10610bfe57610100808354040283529160200191610c29565b820191906000526020600020905b815481529060010190602001808311610c0c57829003601f168201915b505050505081565b610c3a33611f8c565b1515610c7e576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614866833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526007602052604090206004015460ff161515610cf3576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b600160a060020a038316600081815260076020908152604091829020600281018690556003018490558151928352820184905280517f0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf069281900390910190a1505050565b60076020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015610dee5780601f10610dc357610100808354040283529160200191610dee565b820191906000526020600020905b815481529060010190602001808311610dd157829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b610e1d33611f8c565b1515610e61576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614866833981519152604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610e97573d6000803e3d6000fd5b505050565b60008060606000610eac33611f8c565b1515610ef0576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614866833981519152604482015290519081900360640190fd5b8988148015610efe57508986145b1515610f54576040805160e560020a62461bcd02815260206004820152601e60248201527f706172616d65746572206c656e6774687320646f206e6f74206d617463680000604482015290519081900360640190fd5b600093505b89841015610faf57600760008c8c87818110610f7157fe5b60209081029290920135600160a060020a03168352508101919091526040016000206004015460ff1615610fa457600080fd5b600190930192610f59565b600093505b89841015611220578a8a85818110610fc857fe5b60209081029290920135600160a060020a0316600081815260079093526040909220600401549194505060ff161561104a576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20616c726561647920657869737473000000000000000000000000604482015290519081900360640190fd5b61107061106b8a8a8781811061105c57fe5b6020029190910135905061275f565b61278b565b915086868581811061107e57fe5b6040805160a081018252868152602092830294909401358483018190526000858301819052606086018b905260016080870152600160a060020a03891681526007845291909120845180519296509093506110dd928492910190614786565b50602082810151600183810191909155604080850151600285015560608086015160038601556080958601516004909501805460ff19169515159590951790945560088054928301815560009081527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39092018054600160a060020a031916600160a060020a038a16908117909155815190815290810186905280830184815287519482019490945286517fb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d731695899589958995919392850192908701918190849084905b838110156111d95781810151838201526020016111c1565b50505050905090810190601f1680156112065780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600190930192610fb4565b5050505050505050505050565b60008054600160a060020a03161580611258575060005461125690600160a060020a03166127de565b155b156112695761126760006127e2565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156112bb57600080fd5b505af11580156112cf573d6000803e3d6000fd5b505050506040513d60208110156112e557600080fd5b5051600154600160a060020a0390811691161461139a576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b505050506040513d602081101561137857600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600160009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156113ed57600080fd5b505af1158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b505190505b90565b60008060006060600060608060008060608c600181518110151561143f57fe5b90602001015160f860020a900460f860020a0260f860020a90049750876040519080825280601f01601f191660200182016040528015611489578160200160208202803883390190505b50965061149b8d60028a8a60006127f2565b8d519097508d9060038a019081106114af57fe5b90602001015160f860020a900460f860020a0260f860020a90048d896002018151811015156114da57fe5b90602001015160f860020a900460f860020a0260f860020a900461010002019550856040519080825280601f01601f191660200182016040528015611529578160200160208202803883390190505b50945061153d8d89600401888860006127f2565b60408051601e808252818301909252919650602082016103c080388339019050509350611570856005601e8760006127f2565b935061157c848c612847565b90935091508215156116c9577f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8c8f60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b838110156115f05781810151838201526020016115d8565b50505050905090810190601f16801561161d5780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b83811015611650578181015183820152602001611638565b50505050905090810190601f16801561167d5780820380516001836020036101000a031916815260200191505b5093840390525050600481527f6461746500000000000000000000000000000000000000000000000000000000602082015260408051918290030192509050a160009950899850611bb3565b603486036040519080825280601f01601f1916602001820160405280156116fa578160200160208202803883390190505b50905061170e8560348089038460006127f2565b905061171981612ad2565b6040518082805190602001908083835b602083106117485780518252601f199092019160209182019101611729565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660028f6040518082805190602001908083835b602083106117ab5780518252601f19909201916020918201910161178c565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156117ec573d6000803e3d6000fd5b5050506040513d602081101561180157600080fd5b505160408051918252519081900360200190201461195a577f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8c8f60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015611881578181015183820152602001611869565b50505050905090810190601f1680156118ae5780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b838110156118e15781810151838201526020016118c9565b50505050905090810190601f16801561190e5780820380516001836020036101000a031916815260200191505b5093840390525050600481527f6861736800000000000000000000000000000000000000000000000000000000602082015260408051918290030192509050a160009950899850611bb3565b61196585888e613395565b15611a76577f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98c8f604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156119ce5781810151838201526020016119b6565b50505050905090810190601f1680156119fb5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611a2e578181015183820152602001611a16565b50505050905090810190601f168015611a5b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160018299509950611bb3565b7f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8c8f60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015611ade578181015183820152602001611ac6565b50505050905090810190601f168015611b0b5780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b83811015611b3e578181015183820152602001611b26565b50505050905090810190601f168015611b6b5780820380516001836020036101000a031916815260200191505b5093840390525050600981527f7369676e61747572650000000000000000000000000000000000000000000000602082015260408051918290030192509050a1600099508998505b505050505050505094509492505050565b6060611bce6147f4565b611bd66147f4565b611bde6147f4565b611be7866134af565b9250611c37611c2a6040805190810160405280600181526020017f7b000000000000000000000000000000000000000000000000000000000000008152506134af565b849063ffffffff6134d816565b50611c86611c796040805190810160405280600181526020017f7d000000000000000000000000000000000000000000000000000000000000008152506134af565b849063ffffffff61354016565b50611cc56040805190810160405280600181526020017f22000000000000000000000000000000000000000000000000000000000000008152506134af565b9150611d0b611cfe611ced84611cf2611ced611ce08b6134af565b889063ffffffff6135a616565b6134af565b9063ffffffff6135a616565b849063ffffffff61361d16565b50611d5b611d4d6040805190810160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152506134af565b84908363ffffffff61365b16565b50611daa611d9d6040805190810160405280600181526020017f3a000000000000000000000000000000000000000000000000000000000000008152506134af565b829063ffffffff6136cc16565b50611db48161278b565b9695505050505050565b6000828180805b8351811015611f135783517f300000000000000000000000000000000000000000000000000000000000000090859083908110611dfe57fe5b90602001015160f860020a900460f860020a02600160f860020a03191610158015611e74575083517f390000000000000000000000000000000000000000000000000000000000000090859083908110611e5457fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b15611ecd578115611e9357851515611e8b57611f13565b600019909501945b600a8302925060308482815181101515611ea957fe5b90602001015160f860020a900460f860020a0260f860020a90040383019250611f0b565b8381815181101515611edb57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602e60f860020a021415611f0b57600191505b600101611dc5565b6000861115611f255785600a0a830292505b509095945050505050565b600080831515611f435760009150611f62565b50828202828482811515611f5357fe5b0414611f5e57600080fd5b8091505b5092915050565b600080808311611f7857600080fd5b8284811515611f8357fe5b04949350505050565b600554600654604080517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481019290925251600092600160a060020a031691630178b8bf91602480830192602092919082900301818787803b158015611ff557600080fd5b505af1158015612009573d6000803e3d6000fd5b505050506040513d602081101561201f57600080fd5b5051600654604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561208857600080fd5b505af115801561209c573d6000803e3d6000fd5b505050506040513d60208110156120b257600080fd5b5051604080517fb429afeb000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b429afeb9160248083019260209291908290030181600087803b15801561211957600080fd5b505af115801561212d573d6000803e3d6000fd5b505050506040513d602081101561214357600080fd5b505192915050565b6000808383111561215b57600080fd5b5050900390565b61216a6147f4565b6121726147f4565b60008061217d6147f4565b60085460009015156121ee576040805160208082526009908201527f6e6f20746f6b656e7300000000000000000000000000000000000000000000008183015290517f4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e9181900360600190a161256e565b60085460408051808201909152600381527f55524c0000000000000000000000000000000000000000000000000000000000602082015230319190612232906136df565b02111561229e576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290517f4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e9181900360600190a161256e565b612303606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d00000000000000000000000000008152506134af565b95506123436040805190810160405280601481526020017f267473796d733d455448267369676e3d747275650000000000000000000000008152506134af565b9450621e84809350600092505b60085483101561256e576124246007600060088681548110151561237057fe5b600091825260208083209190910154600160a060020a0316835282810193909352604091820190208054825160026101006001841615026000190190921691909104601f81018590048502820185019093528281529290919083018282801561241a5780601f106123ef5761010080835404028352916020019161241a565b820191906000526020600020905b8154815290600101906020018083116123fd57829003601f168201915b50505050506134af565b60408051808201909152600381527f55524c0000000000000000000000000000000000000000000000000000000000602082015290925061247c9061247687611cf2611ced8b8863ffffffff6135a616565b86613911565b905060088381548110151561248d57fe5b6000918252602080832090910154838352600a90915260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c056124ef8361278b565b6040805160208082528351818301528351919283929083019185019080838360005b83811015612529578181015183820152602001612511565b50505050905090810190601f1680156125565780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600190920191612350565b505050505050565b600054600160a060020a031615806125a0575060005461259e90600160a060020a03166127de565b155b156125b1576125af60006127e2565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561260357600080fd5b505af1158015612617573d6000803e3d6000fd5b505050506040513d602081101561262d57600080fd5b5051600154600160a060020a039081169116146126e2576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561269657600080fd5b505af11580156126aa573d6000803e3d6000fd5b505050506040513d60208110156126c057600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b15801561274857600080fd5b505af1158015610a0b573d6000803e3d6000fd5b50565b6127676147f4565b604051602081016040528281528060208301525061278482613d10565b8152919050565b606080600083600001516040519080825280601f01601f1916602001820160405280156127c2578160200160208202803883390190505b509150602082019050611f628185602001518660000151613dc2565b3b90565b60006127ec613e06565b92915050565b6060600080600084870192508286511015151561280e57600080fd5b505060208087019084015b86886020010182101561283a57888201518682015260209182019101612819565b5093979650505050505050565b6000806128526147f4565b61285a6147f4565b6128626147f4565b60008060008060008060006128768e6134af565b99506128b66040805190810160405280600181526020017f3a000000000000000000000000000000000000000000000000000000000000008152506134af565b98506128f66040805190810160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152506134af565b97506129466129396040805190810160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152506134af565b8b9063ffffffff6136cc16565b506129578a8963ffffffff6136cc16565b5061297361296e61106b8c8b63ffffffff6136cc16565b61412e565b965061299061298b61106b8c8b63ffffffff6136cc16565b61413b565b60ff1695506129ab61296e61106b8c8b63ffffffff6136cc16565b94506129c361296e61106b8c8c63ffffffff6136cc16565b93506129db61296e61106b8c8c63ffffffff6136cc16565b92506129f361296e61106b8c8c63ffffffff6136cc16565b9150601f871180612a045750600187105b15612a155760009b508b9a50612ac1565b600c861180612a245750600186105b15612a355760009b508b9a50612ac1565b6107e2851080612a465750610bb885115b15612a575760009b508b9a50612ac1565b60188410612a6b5760009b508b9a50612ac1565b603c8310612a7f5760009b508b9a50612ac1565b603c8210612a935760009b508b9a50612ac1565b506402540be40084026305f5e100860201620f4240870201612710840201606483020181018c81119b509950895b505050505050505050509250929050565b60606000806000806000606060008060008a519450846040519080825280601f01601f191660200182016040528015612b15578160200160208202803883390190505b50604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208c51919550908c906001198801908110612b5e57fe5b016020015160408051600160f860020a031960f860020a93849004909302929092168252519081900360010190201415612b9d57600285039450612c1c565b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906000198801908110612be157fe5b016020015160408051600160f860020a031960f860020a93849004909302929092168252519081900360010190201415612c1c576001850394505b505060048084040260005b81811015612f7e576040805160a081018252607b81526000602082015260008051602061484683398151915291810191909152600080516020614886833981519152606082015260008051602061482683398151915260808201528b5160018301928d918110612c9357fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612cb957fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b815260200160008152602001600080516020614846833981519152815260200160008051602061488683398151915281526020016000805160206148268339815191528152508b82806001019350815181101515612d3657fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612d5c57fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b815260200160008152602001600080516020614846833981519152815260200160008051602061488683398151915281526020016000805160206148268339815191528152508b82806001019350815181101515612dd957fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612dff57fe5b90602001015160f860020a900460f860020a02965060a060405190810160405280607b815260200160008152602001600080516020614846833981519152815260200160008051602061488683398151915281526020016000805160206148268339815191528152508b82806001019350815181101515612e7c57fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612ea257fe5b0160200151845160f860020a9182900490910296506001840193600160f860020a03198b81166004026010828d16041716918691908110612edf57fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c16041716918691908110612f2457fe5b906020010190600160f860020a031916908160001a90535083516001840193600160f860020a0319898116604002891716918691908110612f6157fe5b906020010190600160f860020a031916908160001a905350612c27565b81850360021415613110576040805160a081018252607b81526000602082015260008051602061484683398151915291810191909152600080516020614886833981519152606082015260008051602061482683398151915260808201528b5160018301928d918110612fed57fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561301357fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b815260200160008152602001600080516020614846833981519152815260200160008051602061488683398151915281526020016000805160206148268339815191528152508b8280600101935081518110151561309057fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156130b657fe5b0160200151845160f860020a9182900490910298506001840193600160f860020a03198b81166004026010828d160417169186919081106130f357fe5b906020010190600160f860020a031916908160001a905350613386565b81850360031415613386576040805160a081018252607b81526000602082015260008051602061484683398151915291810191909152600080516020614886833981519152606082015260008051602061482683398151915260808201528b5160018301928d91811061317f57fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156131a557fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b815260200160008152602001600080516020614846833981519152815260200160008051602061488683398151915281526020016000805160206148268339815191528152508b8280600101935081518110151561322257fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561324857fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b815260200160008152602001600080516020614846833981519152815260200160008051602061488683398151915281526020016000805160206148268339815191528152508b828060010193508151811015156132c557fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156132eb57fe5b0160200151845160f860020a9182900490910297506001840193600160f860020a03198b81166004026010828d1604171691869190811061332857fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c1604171691869190811061336d57fe5b906020010190600160f860020a031916908160001a9053505b50508152979650505050505050565b600080600061342d6002876040518082805190602001908083835b602083106133cf5780518252601f1990920191602091820191016133b0565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015613410573d6000803e3d6000fd5b5050506040513d602081101561342557600080fd5b505186614508565b92509050808015611db45750836040518082805190602001908083835b602083106134695780518252601f19909201916020918201910161344a565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600160a060020a0390811690861614925050509695505050505050565b6134b76147f4565b50604080518082019091528151815260208281019082018190525b50919050565b6134e06147f4565b8151835160009111156134f557839150611f62565b50602080830151908401516001911461351d5750815160208481015190840151829020919020145b80156135385782518451038452825160208501805190910190525b509192915050565b6135486147f4565b815183516000918291101561355f57849250610786565b5050815183516020808601519085015191019190910390600190821461358f575082516020840151819020908220145b801561359d57835185510385525b50929392505050565b606080600083600001518560000151016040519080825280601f01601f1916602001820160405280156135e3578160200160208202803883390190505b5091506020820190506135ff8186602001518760000151613dc2565b8451602085015185516136159284019190613dc2565b509392505050565b6136256147f4565b60006136438460000151856020015185600001518660200151614590565b60208501805186519083039003865252509192915050565b6136636147f4565b60006136818560000151866020015186600001518760200151614590565b602080870180519186019190915280518203855286519051919250018114156136ad57600085526136c3565b8351835186519101900385528351810160208601525b50909392505050565b6136d46147f4565b611f6283838361365b565b60008054600160a060020a0316158061370a575060005461370890600160a060020a03166127de565b155b1561371b5761371960006127e2565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561376d57600080fd5b505af1158015613781573d6000803e3d6000fd5b505050506040513d602081101561379757600080fd5b5051600154600160a060020a0390811691161461384c576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561380057600080fd5b505af1158015613814573d6000803e3d6000fd5b505050506040513d602081101561382a57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b838110156138c55781810151838201526020016138ad565b50505050905090810190601f1680156138f25780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561211957600080fd5b600080548190600160a060020a0316158061393e575060005461393c90600160a060020a03166127de565b155b1561394f5761394d60006127e2565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156139a157600080fd5b505af11580156139b5573d6000803e3d6000fd5b505050506040513d60208110156139cb57600080fd5b5051600154600160a060020a03908116911614613a80576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613a3457600080fd5b505af1158015613a48573d6000803e3d6000fd5b505050506040513d6020811015613a5e57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810186905260048101918252875160448201528751600160a060020a0390931692632ef3accc9289928892829160640190602086019080838360005b83811015613b00578181015183820152602001613ae8565b50505050905090810190601f168015613b2d5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613b4d57600080fd5b505af1158015613b61573d6000803e3d6000fd5b505050506040513d6020811015613b7757600080fd5b50519050670de0b6b3a76400003a840201811115613b985760009150613615565b6001546040517fc51be90f00000000000000000000000000000000000000000000000000000000815260006004820181815260648301879052608060248401908152895160848501528951600160a060020a039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b83811015613c2b578181015183820152602001613c13565b50505050905090810190601f168015613c585780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015613c8b578181015183820152602001613c73565b50505050905090810190601f168015613cb85780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b158015613cda57600080fd5b505af1158015613cee573d6000803e3d6000fd5b50505050506040513d6020811015613d0557600080fd5b505195945050505050565b600080821515613d2357600091506134d2565b6fffffffffffffffffffffffffffffffff83161515613d5657601001700100000000000000000000000000000000830492505b67ffffffffffffffff83161515613d795760080168010000000000000000830492505b63ffffffff83161515613d9457600401640100000000830492505b61ffff83161515613dab5760020162010000830492505b60ff83161515613db9576001015b60200392915050565b60005b60208210613de7578251845260209384019390920191601f1990910190613dc5565b50905182516020929092036101000a6000190180199091169116179052565b600080613e26731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6127de565b1115613e975760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152613e8f90614650565b50600161141c565b6000613eb673c03a2615d5efaf5f49f60b7bb6583eaec212fdf16127de565b1115613f1f5760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152613e8f90614650565b6000613f3e73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6127de565b1115613fa75760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152613e8f90614650565b6000613fc673146500cfd35b22e4a392fe0adc06de1a1368ed486127de565b111561402f5760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152613e8f90614650565b600061404e736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756127de565b1115614082575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600161141c565b60006140a17320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6127de565b11156140d5575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600161141c565b60006140f47351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6127de565b1115614128575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600161141c565b50600090565b60006127ec826000611dbe565b600080826040518082805190602001908083835b6020831061416e5780518252601f19909201916020918201910161414f565b5181516000196020949094036101000a93909301928316921916919091179052604080519390910183900383207f4a616e000000000000000000000000000000000000000000000000000000000084529051928390036003019092209194505083141591506141e2905057600191506134d2565b604080517f46656200000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561422457600291506134d2565b604080517f4d617200000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561426657600391506134d2565b604080517f4170720000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156142a857600491506134d2565b604080517f4d61790000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156142ea57600591506134d2565b604080517f4a756e00000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561432c57600691506134d2565b604080517f4a756c00000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561436e57600791506134d2565b604080517f4175670000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156143b057600891506134d2565b604080517f5365700000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156143f257600991506134d2565b604080517f4f637400000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561443457600a91506134d2565b604080517f4e6f7600000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561447657600b91506134d2565b604080517f4465630000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156144b857600c91506134d2565b6040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420612076616c6964206d6f6e7468000000000000000000000000000000604482015290519081900360640190fd5b6000806000806000855160411415156145275760009450849350614586565b50505060208301516040840151606085015160001a601b60ff8216101561454c57601b015b8060ff16601b1415801561456457508060ff16601c14155b156145755760009450849350614586565b61458187828585614663565b945094505b5050509250929050565b600083818080808080808c8b1161463a5760208b116146035760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b8285146145fb578388106145e8578c8c019850614640565b87806001019850508588511692506145d0565b879850614640565b8a8a209150600096505b8a8d03871161463a57508987208181141561462a57879850614640565b600197880197969096019561460d565b8c8c0198505b5050505050505050949350505050565b805161041c906002906020840190614786565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b50805460018160011615610100020316600290046000825580601f106146c6575061275c565b601f01602090049060005260206000209081019061275c919061480b565b815481835581811115610e9757600083815260209020610e9791810190830161480b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106147495782800160ff19823516178555614776565b82800160010185558215614776579182015b8281111561477657823582559160200191906001019061475b565b5061478292915061480b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106147c757805160ff1916838001178555614776565b82800160010185558215614776579182015b828111156147765782518255916020019190600101906147d9565b604080518082019091526000808252602082015290565b61141c91905b8082111561478257600081556001016148115600001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000073656e646572206973206e6f74206120636f6e74726f6c6c657200000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003fa165627a7a7230582039dcfb5d1c3b85a0ef3caecac69405d79ae753c28592172e94029d6259b9c37e0029`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver common.Address, _ens common.Address, _controllerName [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver, _ens, _controllerName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) APIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "APIPublicKey")
	return *ret0, err
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCaller) Convert(opts *bind.CallOpts, _token common.Address, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "convert", _token, _amount)
	return *ret0, err
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCallerSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(symbol string, magnitude uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCaller) Tokens(opts *bind.CallOpts, arg0 common.Address) (struct {
	Symbol     string
	Magnitude  *big.Int
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	ret := new(struct {
		Symbol     string
		Magnitude  *big.Int
		Rate       *big.Int
		LastUpdate *big.Int
		Exists     bool
	})
	out := ret
	err := _Oracle.contract.Call(opts, out, "tokens", arg0)
	return *ret, err
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(symbol string, magnitude uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleSession) Tokens(arg0 common.Address) (struct {
	Symbol     string
	Magnitude  *big.Int
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(symbol string, magnitude uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCallerSession) Tokens(arg0 common.Address) (struct {
	Symbol     string
	Magnitude  *big.Int
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// AddTokens is a paid mutator transaction binding the contract method 0xfcde6831.
//
// Solidity: function addTokens(_tokens address[], _symbols bytes32[], _magnitude uint256[], _updateDate uint256) returns()
func (_Oracle *OracleTransactor) AddTokens(opts *bind.TransactOpts, _tokens []common.Address, _symbols [][32]byte, _magnitude []*big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "addTokens", _tokens, _symbols, _magnitude, _updateDate)
}

// AddTokens is a paid mutator transaction binding the contract method 0xfcde6831.
//
// Solidity: function addTokens(_tokens address[], _symbols bytes32[], _magnitude uint256[], _updateDate uint256) returns()
func (_Oracle *OracleSession) AddTokens(_tokens []common.Address, _symbols [][32]byte, _magnitude []*big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _symbols, _magnitude, _updateDate)
}

// AddTokens is a paid mutator transaction binding the contract method 0xfcde6831.
//
// Solidity: function addTokens(_tokens address[], _symbols bytes32[], _magnitude uint256[], _updateDate uint256) returns()
func (_Oracle *OracleTransactorSession) AddTokens(_tokens []common.Address, _symbols [][32]byte, _magnitude []*big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _symbols, _magnitude, _updateDate)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactor) RemoveTokens(opts *bind.TransactOpts, _tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "removeTokens", _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactorSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactor) UpdateAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateAPIPublicKey", _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactorSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0xd545782e.
//
// Solidity: function updateTokenRate(_token address, _rate uint256, _updateDate uint256) returns()
func (_Oracle *OracleTransactor) UpdateTokenRate(opts *bind.TransactOpts, _token common.Address, _rate *big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRate", _token, _rate, _updateDate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0xd545782e.
//
// Solidity: function updateTokenRate(_token address, _rate uint256, _updateDate uint256) returns()
func (_Oracle *OracleSession) UpdateTokenRate(_token common.Address, _rate *big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate, _updateDate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0xd545782e.
//
// Solidity: function updateTokenRate(_token address, _rate uint256, _updateDate uint256) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRate(_token common.Address, _rate *big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate, _updateDate)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates")
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(_to address, _amount uint256) returns()
func (_Oracle *OracleTransactor) Withdraw(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "withdraw", _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(_to address, _amount uint256) returns()
func (_Oracle *OracleSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(_to address, _amount uint256) returns()
func (_Oracle *OracleTransactorSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// OracleAddedTokenIterator is returned from FilterAddedToken and is used to iterate over the raw logs and unpacked data for AddedToken events raised by the Oracle contract.
type OracleAddedTokenIterator struct {
	Event *OracleAddedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleAddedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleAddedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleAddedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleAddedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleAddedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleAddedToken represents a AddedToken event raised by the Oracle contract.
type OracleAddedToken struct {
	Token     common.Address
	Symbol    string
	Magnitude *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddedToken is a free log retrieval operation binding the contract event 0xb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d7316.
//
// Solidity: e AddedToken(_token address, _symbol string, _magnitude uint256)
func (_Oracle *OracleFilterer) FilterAddedToken(opts *bind.FilterOpts) (*OracleAddedTokenIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "AddedToken")
	if err != nil {
		return nil, err
	}
	return &OracleAddedTokenIterator{contract: _Oracle.contract, event: "AddedToken", logs: logs, sub: sub}, nil
}

// WatchAddedToken is a free log subscription operation binding the contract event 0xb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d7316.
//
// Solidity: e AddedToken(_token address, _symbol string, _magnitude uint256)
func (_Oracle *OracleFilterer) WatchAddedToken(opts *bind.WatchOpts, sink chan<- *OracleAddedToken) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "AddedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleAddedToken)
				if err := _Oracle.contract.UnpackLog(event, "AddedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleConvertedIterator is returned from FilterConverted and is used to iterate over the raw logs and unpacked data for Converted events raised by the Oracle contract.
type OracleConvertedIterator struct {
	Event *OracleConverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleConvertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleConverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleConverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleConvertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleConvertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleConverted represents a Converted event raised by the Oracle contract.
type OracleConverted struct {
	Token  common.Address
	Amount *big.Int
	Ether  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConverted is a free log retrieval operation binding the contract event 0xe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6.
//
// Solidity: e Converted(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) FilterConverted(opts *bind.FilterOpts) (*OracleConvertedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return &OracleConvertedIterator{contract: _Oracle.contract, event: "Converted", logs: logs, sub: sub}, nil
}

// WatchConverted is a free log subscription operation binding the contract event 0xe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6.
//
// Solidity: e Converted(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) WatchConverted(opts *bind.WatchOpts, sink chan<- *OracleConverted) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleConverted)
				if err := _Oracle.contract.UnpackLog(event, "Converted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedProofVerificationIterator is returned from FilterFailedProofVerification and is used to iterate over the raw logs and unpacked data for FailedProofVerification events raised by the Oracle contract.
type OracleFailedProofVerificationIterator struct {
	Event *OracleFailedProofVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedProofVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedProofVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedProofVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedProofVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedProofVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedProofVerification represents a FailedProofVerification event raised by the Oracle contract.
type OracleFailedProofVerification struct {
	PublicKey []byte
	Result    string
	Reason    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterFailedProofVerification is a free log retrieval operation binding the contract event 0x723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c.
//
// Solidity: e FailedProofVerification(_publicKey bytes, _result string, _reason string)
func (_Oracle *OracleFilterer) FilterFailedProofVerification(opts *bind.FilterOpts) (*OracleFailedProofVerificationIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedProofVerification")
	if err != nil {
		return nil, err
	}
	return &OracleFailedProofVerificationIterator{contract: _Oracle.contract, event: "FailedProofVerification", logs: logs, sub: sub}, nil
}

// WatchFailedProofVerification is a free log subscription operation binding the contract event 0x723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c.
//
// Solidity: e FailedProofVerification(_publicKey bytes, _result string, _reason string)
func (_Oracle *OracleFilterer) WatchFailedProofVerification(opts *bind.WatchOpts, sink chan<- *OracleFailedProofVerification) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedProofVerification")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedProofVerification)
				if err := _Oracle.contract.UnpackLog(event, "FailedProofVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: e FailedUpdateRequest(_reason string)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: e FailedUpdateRequest(_reason string)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRemovedTokenIterator is returned from FilterRemovedToken and is used to iterate over the raw logs and unpacked data for RemovedToken events raised by the Oracle contract.
type OracleRemovedTokenIterator struct {
	Event *OracleRemovedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRemovedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRemovedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRemovedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRemovedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRemovedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRemovedToken represents a RemovedToken event raised by the Oracle contract.
type OracleRemovedToken struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRemovedToken is a free log retrieval operation binding the contract event 0xc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d748.
//
// Solidity: e RemovedToken(_token address)
func (_Oracle *OracleFilterer) FilterRemovedToken(opts *bind.FilterOpts) (*OracleRemovedTokenIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RemovedToken")
	if err != nil {
		return nil, err
	}
	return &OracleRemovedTokenIterator{contract: _Oracle.contract, event: "RemovedToken", logs: logs, sub: sub}, nil
}

// WatchRemovedToken is a free log subscription operation binding the contract event 0xc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d748.
//
// Solidity: e RemovedToken(_token address)
func (_Oracle *OracleFilterer) WatchRemovedToken(opts *bind.WatchOpts, sink chan<- *OracleRemovedToken) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RemovedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRemovedToken)
				if err := _Oracle.contract.UnpackLog(event, "RemovedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: e RequestedUpdate(_symbol string)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: e RequestedUpdate(_symbol string)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0x7f6d11bd58228c5bcb43ead99b84afe57a4f3237d64f7654713e5c301899fcae.
//
// Solidity: e SetCryptoComparePublicKey(_publicKey bytes)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0x7f6d11bd58228c5bcb43ead99b84afe57a4f3237d64f7654713e5c301899fcae.
//
// Solidity: e SetCryptoComparePublicKey(_publicKey bytes)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleUpdatedTokenRateIterator is returned from FilterUpdatedTokenRate and is used to iterate over the raw logs and unpacked data for UpdatedTokenRate events raised by the Oracle contract.
type OracleUpdatedTokenRateIterator struct {
	Event *OracleUpdatedTokenRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleUpdatedTokenRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleUpdatedTokenRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleUpdatedTokenRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleUpdatedTokenRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleUpdatedTokenRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleUpdatedTokenRate represents a UpdatedTokenRate event raised by the Oracle contract.
type OracleUpdatedTokenRate struct {
	Token common.Address
	Rate  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterUpdatedTokenRate is a free log retrieval operation binding the contract event 0x0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf06.
//
// Solidity: e UpdatedTokenRate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) FilterUpdatedTokenRate(opts *bind.FilterOpts) (*OracleUpdatedTokenRateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "UpdatedTokenRate")
	if err != nil {
		return nil, err
	}
	return &OracleUpdatedTokenRateIterator{contract: _Oracle.contract, event: "UpdatedTokenRate", logs: logs, sub: sub}, nil
}

// WatchUpdatedTokenRate is a free log subscription operation binding the contract event 0x0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf06.
//
// Solidity: e UpdatedTokenRate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) WatchUpdatedTokenRate(opts *bind.WatchOpts, sink chan<- *OracleUpdatedTokenRate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "UpdatedTokenRate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleUpdatedTokenRate)
				if err := _Oracle.contract.UnpackLog(event, "UpdatedTokenRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: e VerifiedProof(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: e VerifiedProof(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
