// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ens_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_queryID\",\"type\":\"bytes32\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoCompareAPIPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateCryptoCompareAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"updateTokenRatesList\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
var OracleBin = "0x60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976006553480156200003557600080fd5b506040516200532038038062005320833981810160405260808110156200005b57600080fd5b50805160208201516040830151606090930151600080546001600160a01b0319166001600160a01b03841617905591929091808280156200009c5760068190555b506007556040805160608101825281815290620052e060208301398051620000cd916008916020909101906200092a565b50600280546001600160a01b0319166001600160a01b038616179055620000f96402540be4006200011b565b62000111600f60fc1b6001600160e01b036200030c16565b50505050620009cc565b6002546001600160a01b031615806200015157506002546200014f906001600160a01b03166001600160e01b036200050216565b155b156200016e576200016c60006001600160e01b036200050616565b505b600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620001bf57600080fd5b505af1158015620001d4573d6000803e3d6000fd5b505050506040513d6020811015620001eb57600080fd5b50516001546001600160a01b03908116911614620002a257600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200025457600080fd5b505af115801562000269573d6000803e3d6000fd5b505050506040513d60208110156200028057600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790555b6001546040805163329ab47960e21b81526004810184905290516001600160a01b039092169163ca6ad1e49160248082019260009290919082900301818387803b158015620002f057600080fd5b505af115801562000305573d6000803e3d6000fd5b5050505050565b6002546001600160a01b0316158062000342575060025462000340906001600160a01b03166001600160e01b036200050216565b155b156200035f576200035d60006001600160e01b036200050616565b505b600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620003b057600080fd5b505af1158015620003c5573d6000803e3d6000fd5b505050506040513d6020811015620003dc57600080fd5b50516001546001600160a01b039081169116146200049357600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200044557600080fd5b505af11580156200045a573d6000803e3d6000fd5b505050506040513d60208110156200047157600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790555b6001546040805163688dcfd760e01b81527fff000000000000000000000000000000000000000000000000000000000000008416600482015290516001600160a01b039092169163688dcfd79160248082019260009290919082900301818387803b158015620002f057600080fd5b3b90565b60006200051b6001600160e01b036200052116565b92915050565b6000806200054c731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6001600160e01b036200050216565b1115620005b857600280546001600160a01b031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81526a195d1a17db585a5b9b995d60aa1b6020820152620005af906001600160e01b036200091116565b5060016200090e565b6000620005e273c03a2615d5efaf5f49f60b7bb6583eaec212fdf16001600160e01b036200050216565b11156200064657600280546001600160a01b03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81526b6574685f726f707374656e3360a01b6020820152620005af906001600160e01b036200091116565b60006200067073b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6001600160e01b036200050216565b1115620006d157600280546001600160a01b03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981526832ba342fb5b7bb30b760b91b6020820152620005af906001600160e01b036200091116565b6000620006fb73146500cfd35b22e4a392fe0adc06de1a1368ed486001600160e01b036200050216565b11156200075e57600280546001600160a01b03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81526a6574685f72696e6b65627960a81b6020820152620005af906001600160e01b036200091116565b60006200078873a2998efd205fb9d4b4963afb70778d6354ad3a416001600160e01b036200050216565b1115620007ea57600280546001600160a01b03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a8152696574685f676f65726c6960b01b6020820152620005af906001600160e01b036200091116565b600062000814736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756001600160e01b036200050216565b11156200084a5750600280546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016200090e565b6000620008747320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6001600160e01b036200050216565b1115620008aa5750600280546001600160a01b0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016200090e565b6000620008d47351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6001600160e01b036200050216565b11156200090a5750600280546001600160a01b0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016200090e565b5060005b90565b8051620009269060039060208401906200092a565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200096d57805160ff19168380011785556200099d565b828001600101855582156200099d579182015b828111156200099d57825182559160200191906001019062000980565b50620009ab929150620009af565b5090565b6200090e91905b80821115620009ab5760008155600101620009b6565b61490480620009dc6000396000f3fe6080604052600436106100915760003560e01c8063996cba6811610059578063996cba681461032c578063b598f8821461036f578063c2c3d0541461038c578063ca6ad1e414610407578063e2b4ce971461043157610091565b806338bbfa50146100965780633acbe96e146101d55780637d73b2311461025f578063877337b014610290578063937f54a4146102b7575b600080fd5b3480156100a257600080fd5b506101d3600480360360608110156100b957600080fd5b81359190810190604081016020820135600160201b8111156100da57600080fd5b8201836020820111156100ec57600080fd5b803590602001918460018302840111600160201b8311171561010d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561015f57600080fd5b82018360208201111561017157600080fd5b803590602001918460018302840111600160201b8311171561019257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610446945050505050565b005b3480156101e157600080fd5b506101ea61061a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022457818101518382015260200161020c565b50505050905090810190601f1680156102515780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026b57600080fd5b506102746106a8565b604080516001600160a01b039092168252519081900360200190f35b34801561029c57600080fd5b506102a56106b8565b60408051918252519081900360200190f35b6101d3600480360360408110156102cd57600080fd5b81359190810190604081016020820135600160201b8111156102ee57600080fd5b82018360208201111561030057600080fd5b803590602001918460208302840111600160201b8311171561032157600080fd5b5090925090506106be565b34801561033857600080fd5b506101d36004803603606081101561034f57600080fd5b506001600160a01b03813581169160208101359091169060400135610757565b6101d36004803603602081101561038557600080fd5b5035610804565b34801561039857600080fd5b506101d3600480360360208110156103af57600080fd5b810190602081018135600160201b8111156103c957600080fd5b8201836020820111156103db57600080fd5b803590602001918460018302840111600160201b831117156103fc57600080fd5b509092509050610867565b34801561041357600080fd5b506101d36004803603602081101561042a57600080fd5b5035610935565b34801561043d57600080fd5b506102a56109d3565b61044e6109d9565b6001600160a01b0316336001600160a01b0316146104ac576040805162461bcd60e51b815260206004820152601660248201527573656e646572206973206e6f74206f7261636c697a6560501b604482015290519081900360640190fd5b6000838152600960205260408120546001600160a01b031690806104cf83610bc3565b96505050945050505081610524576040805162461bcd60e51b8152602060048201526017602482015276746f6b656e206d75737420626520617661696c61626c6560481b604482015290519081900360640190fd5b60088054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260009384936105c5938b938b93909290918301828280156105ba5780601f1061058f576101008083540402835291602001916105ba565b820191906000526020600020905b81548152906001019060200180831161059d57829003601f168201915b505050505086610d55565b909250905081156106105760006105e36105de89611287565b61152a565b60008a815260096020526040902080546001600160a01b031916905590508161060d87838361153d565b50505b5050505050505050565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a05780601f10610675576101008083540402835291602001916106a0565b820191906000526020600020905b81548152906001019060200180831161068357829003601f168201915b505050505081565b6000546001600160a01b03165b90565b60075490565b6106c7336115cc565b610715576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b6107528383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061166092505050565b505050565b61076033611982565b6107aa576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71030b236b4b760511b604482015290519081900360640190fd5b6107b58383836119e4565b604080516001600160a01b0380861682528416602082015280820183905290517ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839181900360600190a1505050565b61080d336115cc565b61085b576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b61086481611a48565b50565b61087033611982565b6108ba576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71030b236b4b760511b604482015290519081900360640190fd5b6108c660088383614675565b506040805133808252602082018381529282018490527fc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa929091859185919060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b61093e336115cc565b61098c576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b61099581611cf9565b604080513381526020810183905281517ffbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4929181900390910190a150565b60065490565b6002546000906001600160a01b03161580610a065750600254610a04906001600160a01b0316611ec2565b155b15610a1757610a156000611ec6565b505b600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a6757600080fd5b505af1158015610a7b573d6000803e3d6000fd5b505050506040513d6020811015610a9157600080fd5b50516001546001600160a01b03908116911614610b4457600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050506040513d6020811015610b2257600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790555b600160009054906101000a90046001600160a01b03166001600160a01b031663c281d19e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d6020811015610bbc57600080fd5b5051905090565b6060600080600080600080610bd9600754611ed0565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b158015610c2e57600080fd5b505afa158015610c42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015610c6b57600080fd5b8101908080516040519392919084600160201b821115610c8a57600080fd5b908301906020820185811115610c9f57600080fd5b8251600160201b811182820188101715610cb857600080fd5b82525081516020918201929091019080838360005b83811015610ce5578181015183820152602001610ccd565b50505050905090810190601f168015610d125780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979e50929c50909a509850965094509192505050919395979092949650565b60008060a5855114610da5576040805162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015290519081900360640190fd5b604185600181518110610db457fe5b016020015160f81c14610e0e576040805162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b60408051604180825260808201909252606091602082018180388339019050509050610e408660026041846000611f92565b865190915060609087906044908110610e5557fe5b0160200151875160f89190911c906101009089906043908110610e7457fe5b016020015160f81c020114610ec9576040805162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840d0cac2c8cae4e640d8cadccee8d60531b604482015290519081900360640190fd5b6040805160608082526080820190925281602082018180388339019050509050610ef98760456060846000611f92565b9050610f06818388611fe0565b610f4b576040805162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015290519081900360640190fd5b604080516014808252818301909252606091602082018180388339019050509050610f7c82600b6014846000611f92565b9050600080610f8b83896120a4565b909250905081610fd1576040805162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206461746560a01b604482015290519081900360640190fd5b60408051602c8082526060828101909352602082018180388339019050509050611001856034602c846000611f92565b905061100c81612429565b8051906020012060028d6040516020018082805190602001908083835b602083106110485780518252601f199092019160209182019101611029565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106110ab5780518252601f19909201916020918201910161108c565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156110ea573d6000803e3d6000fd5b5050506040513d60208110156110ff57600080fd5b505160408051602081810193909352815180820384018152908201909152805191012014611174576040805162461bcd60e51b815260206004820152601860248201527f726573756c742068617368206e6f74206d61746368696e670000000000000000604482015290519081900360640190fd5b7f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98a8d604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156111d85781810151838201526020016111c0565b50505050905090810190601f1680156112055780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611238578181015183820152602001611220565b50505050905090810190601f1680156112655780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15060019b909a5098505050505050505050565b60606000826040516020018082805190602001908083835b602083106112be5780518252601f19909201916020918201910161129f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525190506008811180156113065750601c8111155b61134c576040805162461bcd60e51b81526020600482015260126024820152711b5a5cd99bdc9b585d1d1959081a5b9c1d5d60721b604482015290519081900360640190fd5b6040805160078082528183019092526060916020820181803883390190505090506113e3846040516020018082805190602001908083835b602083106113a35780518252601f199092019160209182019101611384565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260006007846000611f92565b5060408051663d9122aa24111d60c91b81529051908190036007019020815160208301201461144b576040805162461bcd60e51b815260206004820152600f60248201526e0e0e4caccd2f040dad2e6dac2e8c6d608b1b604482015290519081900360640190fd5b6114536146f3565b61145c85612a46565b9050611490611483604051806040016040528060018152602001601d60f91b815250612a46565b829063ffffffff612a6b16565b50806000015192506114ca6114bd604051806040016040528060018152602001607d60f81b815250612a46565b829063ffffffff612a8516565b508051600019840114611516576040805162461bcd60e51b815260206004820152600f60248201526e1b9bdd081a9cdbdb88199bdc9b585d608a1b604482015290519081900360640190fd5b61151f81612ae3565b93505050505b919050565b6000611537826012612b33565b92915050565b611548600754611ed0565b6001600160a01b031663d545782e8484846040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b1580156115af57600080fd5b505af11580156115c3573d6000803e3d6000fd5b50505050505050565b60006115d9600654611ed0565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561162e57600080fd5b505afa158015611642573d6000803e3d6000fd5b505050506040513d602081101561165857600080fd5b505192915050565b80516116ac576040805160208082526010908201526f195b5c1d1e481d1bdad95b881b1a5cdd60821b8183015290516000805160206148658339815191529181900360600190a161197e565b4781516116d36040518060400160405280600381526020016215549360ea1b8152506133e4565b0211156117245760408051602080825260149082015273696e73756666696369656e742062616c616e636560601b8183015290516000805160206148658339815191529181900360600190a161197e565b61172c6146f3565b61174d60405180606001604052806032815260200161479660329139612a46565b90506117576146f3565b61178c60405180604001604052806014815260200173267473796d733d455448267369676e3d7472756560601b815250612a46565b905060005b835181101561197a57606060006117ba8684815181106117ad57fe5b6020026020010151610bc3565b5050509350505091508061180f576040805162461bcd60e51b8152602060048201526017602482015276746f6b656e206d75737420626520617661696c61626c6560481b604482015290519081900360640190fd5b6118176146f3565b61182083612a46565b905060006118746040518060400160405280600381526020016215549360ea1b81525061186e8861186261185d878d61360f90919063ffffffff16565b612a46565b9063ffffffff61360f16565b8b613683565b905087858151811061188257fe5b60200260200101516009600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe6118eb83612ae3565b826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561192f578181015183820152602001611917565b50505050905090810190601f16801561195c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050600190920191506117919050565b5050505b5050565b600061198f600654611ed0565b6001600160a01b03166324d7806c836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561162e57600080fd5b6001600160a01b038216611a2e576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015611a28573d6000803e3d6000fd5b50610752565b6107526001600160a01b038316848363ffffffff613a5016565b6060611a52613aa2565b9050805160001415611a9d57604080516020808252600990820152686e6f20746f6b656e7360b81b8183015290516000805160206148658339815191529181900360600190a161197e565b478151611ac46040518060400160405280600381526020016215549360ea1b8152506133e4565b021115611b155760408051602080825260149082015273696e73756666696369656e742062616c616e636560601b8183015290516000805160206148658339815191529181900360600190a161197e565b611b1d6146f3565b611b3e60405180606001604052806032815260200161479660329139612a46565b9050611b486146f3565b611b7d60405180604001604052806014815260200173267473796d733d455448267369676e3d7472756560601b815250612a46565b905060005b835181101561197a576060611b9c8583815181106117ad57fe5b5050505050509050611bac6146f3565b611bb582612a46565b90506000611bf86040518060400160405280600381526020016215549360ea1b815250611bf28761186261185d878c61360f90919063ffffffff16565b8a613683565b9050868481518110611c0657fe5b60200260200101516009600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe611c6f83612ae3565b826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611cb3578181015183820152602001611c9b565b50505050905090810190601f168015611ce05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050600101611b82565b6002546001600160a01b03161580611d235750600254611d21906001600160a01b0316611ec2565b155b15611d3457611d326000611ec6565b505b600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611d8457600080fd5b505af1158015611d98573d6000803e3d6000fd5b505050506040513d6020811015611dae57600080fd5b50516001546001600160a01b03908116911614611e6157600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050506040513d6020811015611e3f57600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790555b6001546040805163329ab47960e21b81526004810184905290516001600160a01b039092169163ca6ad1e49160248082019260009290919082900301818387803b158015611eae57600080fd5b505af115801561197a573d6000803e3d6000fd5b3b90565b6000611537613bb3565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015611f1d57600080fd5b505afa158015611f31573d6000803e3d6000fd5b505050506040513d6020811015611f4757600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b15801561162e57600080fd5b6060600082850190508084511015611fa957600080fd5b60208087019084015b868860200101821015611fd357888201518682015260209182019101611fb2565b5093979650505050505050565b60008060006120766002876040518082805190602001908083835b6020831061201a5780518252601f199092019160209182019101611ffb565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015612059573d6000803e3d6000fd5b5050506040513d602081101561206e57600080fd5b505186613f07565b925090508080156120985750835160208501206001600160a01b038381169116145b925050505b9392505050565b600080836040516020018082805190602001908083835b602083106120da5780518252601f1990920191602091820191016120bb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525160141461211857fe5b6121206146f3565b61212985612a46565b90506121336146f3565b612155604051806040016040528060018152602001601d60f91b815250612a46565b905061215f6146f3565b612181604051806040016040528060018152602001600160fd1b815250612a46565b905060006121a56121a061219b868563ffffffff612a6b16565b612ae3565b613f91565b90506000811180156121b75750602081105b6121f4576040805162461bcd60e51b81526020600482015260096024820152683230bc9032b93937b960b91b604482015290519081900360640190fd5b600061221161220c61219b878663ffffffff612a6b16565b613f9e565b60ff1690506000811180156122265750600d81105b612265576040805162461bcd60e51b815260206004820152600b60248201526a36b7b73a341032b93937b960a91b604482015290519081900360640190fd5b600061227d6121a061219b888763ffffffff612a6b16565b90506107e1811180156122915750610bb881105b6122cf576040805162461bcd60e51b815260206004820152600a6024820152693cb2b0b91032b93937b960b11b604482015290519081900360640190fd5b60006122e76121a061219b898963ffffffff612a6b16565b90506019811061232b576040805162461bcd60e51b815260206004820152600a6024820152693437bab91032b93937b960b11b604482015290519081900360640190fd5b60006123436121a061219b8a8a63ffffffff612a6b16565b9050603c8110612389576040805162461bcd60e51b815260206004820152600c60248201526b36b4b73aba329032b93937b960a11b604482015290519081900360640190fd5b60006123a16121a061219b8b8b63ffffffff612a6b16565b9050603c81106123e7576040805162461bcd60e51b815260206004820152600c60248201526b39b2b1b7b7321032b93937b960a11b604482015290519081900360640190fd5b60008183606402856127100289620f424002896305f5e10002896402540be40002010101010190508c8111819b509b50505050505050505050505b9250929050565b60606000806000806000865190506060816040519080825280601f01601f191660200182016040528015612464576020820181803883390190505b50905060008083118015612479575060048306155b6124ca576040805162461bcd60e51b815260206004820152601760248201527f696e76616c69642062617365363420656e636f64696e67000000000000000000604482015290519081900360640190fd5b60408051603d60f81b8152905190819003600101902089518a9060011986019081106124f257fe5b01602090810151604080516001600160f81b0319909216828401528051808303600101815260219092019052805191012014156125345760028303925061259a565b60408051603d60f81b8152905190819003600101902089518a90600019860190811061255c57fe5b01602090810151604080516001600160f81b03199092168284015280518083036001018152602190920190528051910120141561259a576001830392505b600319831660005b818110156127b8576040518060a00160405280607b81526020016147ea607b91398b5160018301928d9181106125d457fe5b0160200151815160f89190911c9081106125ea57fe5b602001015160f81c60f81b98506040518060a00160405280607b81526020016147ea607b91398b5160018301928d91811061262157fe5b0160200151815160f89190911c90811061263757fe5b602001015160f81c60f81b97506040518060a00160405280607b81526020016147ea607b91398b5160018301928d91811061266e57fe5b0160200151815160f89190911c90811061268457fe5b602001015160f81c60f81b96506040518060a00160405280607b81526020016147ea607b91398b5160018301928d9181106126bb57fe5b0160200151815160f89190911c9081106126d157fe5b016020015184516001600160f81b031991821697506001850194603f60fa1b60028d901b1660ff60f41b60048d901c1617909216918691811061271057fe5b60200101906001600160f81b031916908160001a90535083516001840193600f60fc1b60048b901b1660ff60f61b60028b901c16176001600160f81b03191691869190811061275b57fe5b60200101906001600160f81b031916908160001a90535083516001840193600360fe1b60068a901b1688176001600160f81b03191691869190811061279c57fe5b60200101906001600160f81b031916908160001a9053506125a2565b818503600214156128b0576040518060a00160405280607b81526020016147ea607b91398b5160018301928d9181106127ed57fe5b0160200151815160f89190911c90811061280357fe5b602001015160f81c60f81b98506040518060a00160405280607b81526020016147ea607b91398b5160018301928d91811061283a57fe5b0160200151815160f89190911c90811061285057fe5b602001015160f81c60f81b97506004886001600160f81b031916901c60028a6001600160f81b031916901b1760ff60f81b1684848060010195508151811061289457fe5b60200101906001600160f81b031916908160001a905350612a37565b81850360031415612a37576040518060a00160405280607b81526020016147ea607b91398b5160018301928d9181106128e557fe5b0160200151815160f89190911c9081106128fb57fe5b602001015160f81c60f81b98506040518060a00160405280607b81526020016147ea607b91398b5160018301928d91811061293257fe5b0160200151815160f89190911c90811061294857fe5b602001015160f81c60f81b97506040518060a00160405280607b81526020016147ea607b91398b5160018301928d91811061297f57fe5b0160200151815160f89190911c90811061299557fe5b016020015184516001600160f81b031991821698506001850194603f60fa1b60028d901b1660ff60f41b60048d901c161790921691869181106129d457fe5b60200101906001600160f81b031916908160001a90535083516001840193600f60fc1b60048b901b1660ff60f61b60028b901c16176001600160f81b031916918691908110612a1f57fe5b60200101906001600160f81b031916908160001a9053505b50508152979650505050505050565b612a4e6146f3565b506040805180820190915281518152602082810190820152919050565b612a736146f3565b612a7e838383614242565b5092915050565b612a8d6146f3565b815183511015612a9e575081611537565b8151835160208086015190850151910191909103906001908214612acc575082516020840151819020908220145b8015612ada57835185510385525b50929392505050565b60608082600001516040519080825280601f01601f191660200182016040528015612b15576020820181803883390190505b5090506000602082019050612a7e81856020015186600001516142b3565b60008281808080808080808080805b8b51811015613175578b51600360fc1b908d9083908110612b5f57fe5b01602001516001600160f81b03191610801590612b9d57508b51603960f81b908d9083908110612b8b57fe5b01602001516001600160f81b03191611155b8015612ba7575083155b15612c57578415612c0557612bc38a600a63ffffffff6142f116565b9950612bf8603060f81b60f81c8d8381518110612bdc57fe5b01602001518c9160f89190911c0360ff1663ffffffff61434a16565b9950600190970196612c52565b60019550612c1a8b600a63ffffffff6142f116565b9a50612c4f603060f81b60f81c8d8381518110612c3357fe5b01602001518d9160f89190911c0360ff1663ffffffff61434a16565b9a505b61316d565b8b51600360fc1b908d9083908110612c6b57fe5b01602001516001600160f81b03191610801590612ca957508b51603960f81b908d9083908110612c9757fe5b01602001516001600160f81b03191611155b8015612cb25750835b15612d0457612cc889600a63ffffffff6142f116565b9850612cfd603060f81b60f81c8d8381518110612ce157fe5b01602001518b9160f89190911c0360ff1663ffffffff61434a16565b985061316d565b8b51601760f91b908d9083908110612d1857fe5b01602001516001600160f81b0319161415612e1f5785612d77576040805162461bcd60e51b81526020600482015260156024820152741b5a5cdcda5b99c81a5b9d1959dc985b081c185c9d605a1b604482015290519081900360640190fd5b8415612dca576040805162461bcd60e51b815260206004820152601760248201527f6475706c696361746520646563696d616c20706f696e74000000000000000000604482015290519081900360640190fd5b8315612e16576040805162461bcd60e51b8152602060048201526016602482015275191958da5b585b0818599d195c88195e1c1bdb995b9d60521b604482015290519081900360640190fd5b6001945061316d565b8b51602d60f81b908d9083908110612e3357fe5b01602001516001600160f81b0319161415612f29578215612e89576040805162461bcd60e51b815260206004820152600b60248201526a6475706c6963617465202d60a81b604482015290519081900360640190fd5b8115612ec9576040805162461bcd60e51b815260206004820152600a60248201526932bc3a39309039b4b3b760b11b604482015290519081900360640190fd5b808760010114612f20576040805162461bcd60e51b815260206004820152601e60248201527f2d207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b6001925061316d565b8b51602b60f81b908d9083908110612f3d57fe5b01602001516001600160f81b0319161415613033578115612f93576040805162461bcd60e51b815260206004820152600b60248201526a6475706c6963617465202b60a81b604482015290519081900360640190fd5b8215612fd3576040805162461bcd60e51b815260206004820152600a60248201526932bc3a39309039b4b3b760b11b604482015290519081900360640190fd5b80876001011461302a576040805162461bcd60e51b815260206004820152601e60248201527f2b207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b6001915061316d565b8b51604560f81b908d908390811061304757fe5b01602001516001600160f81b031916148061308257508b51606560f81b908d908390811061307157fe5b01602001516001600160f81b031916145b1561313057856130d1576040805162461bcd60e51b81526020600482015260156024820152741b5a5cdcda5b99c81a5b9d1959dc985b081c185c9d605a1b604482015290519081900360640190fd5b8315613124576040805162461bcd60e51b815260206004820152601960248201527f6475706c6963617465206578706f6e656e742073796d626f6c00000000000000604482015290519081900360640190fd5b6001935080965061316d565b6040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a5908191a59da5d609a1b604482015290519081900360640190fd5b600101612b42565b828061317e5750815b156131975786600201811161319257600080fd5b6131ac565b83156131ac578660010181116131ac57600080fd5b821561322d578d891061322357604e8e8a0310613200576040805162461bcd60e51b815260206004820152600d60248201526c6578706f6e656e74203e20373760981b604482015290519081900360640190fd5b8d8903600a0a8b8161320e57fe5b049c506115379b505050505050505050505050565b888e039d50613240565b61323d8e8a63ffffffff61434a16565b9d505b878e1061331457604e88106132865760405162461bcd60e51b81526004018080602001828103825260228152602001806147c86022913960400191505060405180910390fd5b61329a8b600a8a900a63ffffffff6142f116565b9a506132ac8b8b63ffffffff61434a16565b9a50604e888f03106132f5576040805162461bcd60e51b815260206004820152600d60248201526c6578706f6e656e74203e20373760981b604482015290519081900360640190fd5b61330d888f03600a0a8c6142f190919063ffffffff16565b9a506133d1565b8d88039750604e88106133585760405162461bcd60e51b81526004018080602001828103825260228152602001806147c86022913960400191505060405180910390fd5b87600a0a8a8161336457fe5b049950604e8e106133a65760405162461bcd60e51b81526004018080602001828103825260228152602001806147c86022913960400191505060405180910390fd5b6133bc8e600a0a8c6142f190919063ffffffff16565b9a506133ce8b8b63ffffffff61434a16565b9a505b50989d9c50505050505050505050505050565b6002546000906001600160a01b03161580613411575060025461340f906001600160a01b0316611ec2565b155b15613422576134206000611ec6565b505b600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561347257600080fd5b505af1158015613486573d6000803e3d6000fd5b505050506040513d602081101561349c57600080fd5b50516001546001600160a01b0390811691161461354f57600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561350357600080fd5b505af1158015613517573d6000803e3d6000fd5b505050506040513d602081101561352d57600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790555b60015460405163524f388960e01b81526020600482018181528551602484015285516001600160a01b039094169363524f388993879383926044909201919085019080838360005b838110156135af578181015183820152602001613597565b50505050905090810190601f1680156135dc5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156135fb57600080fd5b505af1158015611642573d6000803e3d6000fd5b60608082600001518460000151016040519080825280601f01601f191660200182016040528015613647576020820181803883390190505b509050600060208201905061366581866020015187600001516142b3565b84516020850151855161367b92840191906142b3565b509392505050565b6002546000906001600160a01b031615806136b057506002546136ae906001600160a01b0316611ec2565b155b156136c1576136bf6000611ec6565b505b600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561371157600080fd5b505af1158015613725573d6000803e3d6000fd5b505050506040513d602081101561373b57600080fd5b50516001546001600160a01b039081169116146137ee57600260009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156137a257600080fd5b505af11580156137b6573d6000803e3d6000fd5b505050506040513d60208110156137cc57600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790555b60015460408051630bbceb3360e21b815260248101859052600481019182528651604482015286516000936001600160a01b031692632ef3accc928992889291829160649091019060208601908083838c5b83811015613858578181015183820152602001613840565b50505050905090810190601f1680156138855780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156138a557600080fd5b505af11580156138b9573d6000803e3d6000fd5b505050506040513d60208110156138cf57600080fd5b50519050670de0b6b3a76400003a8402018111156138f157506000905061209d565b60015460405163c51be90f60e01b8152600060048201818152606483018790526080602484019081528951608485015289516001600160a01b039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b8381101561396b578181015183820152602001613953565b50505050905090810190601f1680156139985780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156139cb5781810151838201526020016139b3565b50505050905090810190601f1680156139f85780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b158015613a1a57600080fd5b505af1158015613a2e573d6000803e3d6000fd5b50505050506040513d6020811015613a4557600080fd5b505195945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526107529084906143a4565b6060613aaf600754611ed0565b6001600160a01b031663443dd2a46040518163ffffffff1660e01b815260040160006040518083038186803b158015613ae757600080fd5b505afa158015613afb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015613b2457600080fd5b8101908080516040519392919084600160201b821115613b4357600080fd5b908301906020820185811115613b5857600080fd5b82518660208202830111600160201b82111715613b7457600080fd5b82525081516020918201928201910280838360005b83811015613ba1578181015183820152602001613b89565b50505050905001604052505050905090565b600080613bd3731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed611ec2565b1115613c3257600280546001600160a01b031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81526a195d1a17db585a5b9b995d60aa1b6020820152613c2a90614562565b5060016106b5565b6000613c5173c03a2615d5efaf5f49f60b7bb6583eaec212fdf1611ec2565b1115613ca957600280546001600160a01b03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81526b6574685f726f707374656e3360a01b6020820152613c2a90614562565b6000613cc873b7a07bcf2ba2f2703b24c0691b5278999c59ac7e611ec2565b1115613d1d57600280546001600160a01b03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981526832ba342fb5b7bb30b760b91b6020820152613c2a90614562565b6000613d3c73146500cfd35b22e4a392fe0adc06de1a1368ed48611ec2565b1115613d9357600280546001600160a01b03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81526a6574685f72696e6b65627960a81b6020820152613c2a90614562565b6000613db273a2998efd205fb9d4b4963afb70778d6354ad3a41611ec2565b1115613e0857600280546001600160a01b03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a8152696574685f676f65726c6960b01b6020820152613c2a90614562565b6000613e27736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475611ec2565b1115613e5b5750600280546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016106b5565b6000613e7a7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf611ec2565b1115613eae5750600280546001600160a01b0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016106b5565b6000613ecd7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa611ec2565b1115613f015750600280546001600160a01b0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016106b5565b50600090565b60008060008060008551604114613f28575060009350839250612422915050565b50505060208301516040840151606085015160001a601b811015613f4a57601b015b8060ff16601b14158015613f6257508060ff16601c14155b15613f77575060009350839250612422915050565b613f8387828585614575565b945094505050509250929050565b6000611537826000612b33565b600080826040516020018082805190602001908083835b60208310613fd45780518252601f199092019160209182019101613fb5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506040518080622530b760e91b8152506003019050604051809103902081141561403e576001915050611525565b60408051622332b160e91b81529051908190036003019020811415614067576002915050611525565b604080516226b0b960e91b81529051908190036003019020811415614090576003915050611525565b604080516220b83960e91b815290519081900360030190208114156140b9576004915050611525565b60408051624d617960e81b815290519081900360030190208114156140e2576005915050611525565b6040805162253ab760e91b8152905190819003600301902081141561410b576006915050611525565b6040805162129d5b60ea1b81529051908190036003019020811415614134576007915050611525565b604080516241756760e81b8152905190819003600301902081141561415d576008915050611525565b604080516205365760ec1b81529051908190036003019020811415614186576009915050611525565b604080516213d8dd60ea1b815290519081900360030190208114156141af57600a915050611525565b60408051622737bb60e91b815290519081900360030190208114156141d857600b915050611525565b604080516244656360e81b8152905190819003600301902081141561420157600c915050611525565b6040805162461bcd60e51b81526020600482015260116024820152700dcdee840c240ecc2d8d2c840dadedce8d607b1b604482015290519081900360640190fd5b61424a6146f3565b600061426885600001518660200151866000015187602001516145b2565b6020808701805191860191909152805182038552865190519192500181141561429457600085526142aa565b8351835186519101900385528351810160208601525b50909392505050565b5b602081106142d3578151835260209283019290910190601f19016142b4565b905182516020929092036101000a6000190180199091169116179052565b60008261430057506000611537565b8282028284828161430d57fe5b041461209d5760405162461bcd60e51b81526004018080602001828103825260218152602001806148856021913960400191505060405180910390fd5b60008282018381101561209d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6143b6826001600160a01b031661466f565b614407576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106144455780518252601f199092019160209182019101614426565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146144a7576040519150601f19603f3d011682016040523d82523d6000602084013e6144ac565b606091505b509150915081614503576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561455c5780806020019051602081101561451f57600080fd5b505161455c5760405162461bcd60e51b815260040180806020018281038252602a8152602001806148a6602a913960400191505060405180910390fd5b50505050565b805161197e90600390602084019061470d565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b6000838186851161466057602085116146255783518251600019600860208990030260020a011991821690888a018890039083165b82811461461757818610614605578a8a019650505050505050614667565b506001909401805190949083166145e7565b859650505050505050614667565b508383206000905b858803821161465e578583208181141561464d5783945050505050614667565b50600192830192919091019061462d565b505b5050508284015b949350505050565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106146b65782800160ff198235161785556146e3565b828001600101855582156146e3579182015b828111156146e35782358255916020019190600101906146c8565b506146ef92915061477b565b5090565b604051806040016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061474e57805160ff19168380011785556146e3565b828001600101855582156146e3579182015b828111156146e3578251825591602001919060010190614760565b6106b591905b808211156146ef576000815560010161478156fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d6d6f7265207468616e20373720646563696d616c2064696769747320706172736564000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003f001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132334eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a723158200379d791a70c7760cc7fed95772939a35de1d96bb58710dd5fc9c3f845d8c22864736f6c63430005110032a0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a983710bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca"

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver_ common.Address, _ens_ common.Address, _controllerNode_ [32]byte, _tokenWhitelistNode_ [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver_, _ens_, _controllerNode_, _tokenWhitelistNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) CryptoCompareAPIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "cryptoCompareAPIPublicKey")
	return *ret0, err
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCallerSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Claim(opts *bind.TransactOpts, _to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "claim", _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactor) UpdateCryptoCompareAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateCryptoCompareAPIPublicKey", _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactorSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts, _gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates", _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactor) UpdateTokenRatesList(opts *bind.TransactOpts, _gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRatesList", _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// OracleClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Oracle contract.
type OracleClaimedIterator struct {
	Event *OracleClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleClaimed represents a Claimed event raised by the Oracle contract.
type OracleClaimed struct {
	To     common.Address
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) FilterClaimed(opts *bind.FilterOpts) (*OracleClaimedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &OracleClaimedIterator{contract: _Oracle.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *OracleClaimed) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleClaimed)
				if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) ParseClaimed(log types.Log) (*OracleClaimed, error) {
	event := new(OracleClaimed)
	if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedUpdateRequest is a log parse operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) ParseFailedUpdateRequest(log types.Log) (*OracleFailedUpdateRequest, error) {
	event := new(OracleFailedUpdateRequest)
	if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol  string
	QueryID [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0x47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe.
//
// Solidity: event RequestedUpdate(string _symbol, bytes32 _queryID)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0x47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe.
//
// Solidity: event RequestedUpdate(string _symbol, bytes32 _queryID)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUpdate is a log parse operation binding the contract event 0x47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe.
//
// Solidity: event RequestedUpdate(string _symbol, bytes32 _queryID)
func (_Oracle *OracleFilterer) ParseRequestedUpdate(log types.Log) (*OracleRequestedUpdate, error) {
	event := new(OracleRequestedUpdate)
	if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	Sender    common.Address
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCryptoComparePublicKey is a log parse operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) ParseSetCryptoComparePublicKey(log types.Log) (*OracleSetCryptoComparePublicKey, error) {
	event := new(OracleSetCryptoComparePublicKey)
	if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	Sender   common.Address
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetGasPrice is a log parse operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) ParseSetGasPrice(log types.Log) (*OracleSetGasPrice, error) {
	event := new(OracleSetGasPrice)
	if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifiedProof is a log parse operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) ParseVerifiedProof(log types.Log) (*OracleVerifiedProof, error) {
	event := new(OracleVerifiedProof)
	if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
		return nil, err
	}
	return event, nil
}
