// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_updateDate\",\"type\":\"uint256\"}],\"name\":\"updateTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"magnitude\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_symbols\",\"type\":\"bytes32[]\"},{\"name\":\"_magnitude\",\"type\":\"uint256[]\"},{\"name\":\"_updateDate\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_controllerName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_magnitude\",\"type\":\"uint256\"}],\"name\":\"AddedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemovedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"UpdatedTokenRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"Converted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedProofVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `60806040523480156200001157600080fd5b50604051606080620052c883398101604081815282516020808501519483015160058054600160a060020a031916600160a060020a03881617905560068190556060850184528385527fa0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a98379185019182527f10bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca9484019490945290939291620000bb9160099162000997565b5060008054600160a060020a031916600160a060020a038516179055620000f06402540be4006401000000006200012d810204565b620001247ff0000000000000000000000000000000000000000000000000000000000000006401000000006200036d810204565b50505062000a39565b600054600160a060020a031615806200016357506000546200016190600160a060020a0316640100000000620005b2810204565b155b1562000180576200017e6000640100000000620005b6810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620001ec57600080fd5b505af115801562000201573d6000803e3d6000fd5b505050506040513d60208110156200021857600080fd5b5051600154600160a060020a03908116911614620002ea576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200029c57600080fd5b505af1158015620002b1573d6000803e3d6000fd5b505050506040513d6020811015620002c857600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156200035157600080fd5b505af115801562000366573d6000803e3d6000fd5b5050505050565b600054600160a060020a03161580620003a35750600054620003a190600160a060020a0316640100000000620005b2810204565b155b15620003c057620003be6000640100000000620005b6810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200042c57600080fd5b505af115801562000441573d6000803e3d6000fd5b505050506040513d60208110156200045857600080fd5b5051600154600160a060020a039081169116146200052a576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620004dc57600080fd5b505af1158015620004f1573d6000803e3d6000fd5b505050506040513d60208110156200050857600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f688dcfd70000000000000000000000000000000000000000000000000000000081527fff00000000000000000000000000000000000000000000000000000000000000841660048201529051600160a060020a039092169163688dcfd79160248082019260009290919082900301818387803b1580156200035157600080fd5b3b90565b6000620005cb640100000000620005d1810204565b92915050565b600080620005fc731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620005b2810204565b11156200067a5760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e6574000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b5060016200097b565b6000620006a473c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620005b2810204565b1115620007195760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e330000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b60006200074373b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620005b2810204565b1115620007b85760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e0000000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b6000620007e273146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620005b2810204565b1115620008575760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b656279000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b600062000881736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620005b2810204565b1115620008b7575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016200097b565b6000620008e17320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620005b2810204565b111562000917575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016200097b565b6000620009417351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620005b2810204565b111562000977575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016200097b565b5060005b90565b80516200099390600290602084019062000997565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009da57805160ff191683800117855562000a0a565b8280016001018555821562000a0a579182015b8281111562000a0a578251825591602001919060010190620009ed565b5062000a1892915062000a1c565b5090565b6200097b91905b8082111562000a18576000815560010162000a23565b61487f8062000a496000396000f3006080604052600436106100a05763ffffffff60e060020a60003504166327dc297e81146100a557806338bbfa501461010557806367c6e39c146101a15780636c3824ef146101d757806383d41509146101f75780639f6f99ee146101ff578063ca6ad1e41461021f578063cc20411914610237578063d545782e146102c1578063e4860339146102e8578063f3fef3a3146103a1578063fcde6831146103c5575b600080fd5b3480156100b157600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101039583359536956044949193909101919081908401838280828437509497506104009650505050505050565b005b34801561011157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261010395833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506104209650505050505050565b3480156101ad57600080fd5b506101c5600160a060020a0360043516602435610683565b60408051918252519081900360200190f35b3480156101e357600080fd5b50610103600480356024810191013561073d565b6101036109c1565b34801561020b57600080fd5b506101036004803560248101910135610a18565b34801561022b57600080fd5b50610103600435610ac6565b34801561024357600080fd5b5061024c610b52565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028657818101518382015260200161026e565b50505050905090810190601f1680156102b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102cd57600080fd5b50610103600160a060020a0360043516602435604435610be0565b3480156102f457600080fd5b50610309600160a060020a0360043516610d06565b604051808060200186815260200185815260200184815260200183151515158152602001828103825287818151815260200191508051906020019080838360005b8381101561036257818101518382015260200161034a565b50505050905090810190601f16801561038f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b3480156103ad57600080fd5b50610103600160a060020a0360043516602435610dc3565b3480156103d157600080fd5b506101036024600480358281019290820135918135808301929082013591604435918201910135606435610e4b565b60408051600081526020810190915261041c9083908390610420565b5050565b60008060008061042e6111dc565b600160a060020a0316331461048d576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f74206f7261636c697a6500000000000000000000604482015290519081900360640190fd5b6000878152600a6020526040902054600160a060020a031693508315156104fe576040805160e560020a62461bcd02815260206004820152601c60248201527f71756572794944206d61746368657320746f2061646472657373203000000000604482015290519081900360640190fd5b600160a060020a03841660009081526007602090815260409182902060098054845160026001831615610100026000190190921691909104601f81018590048502820185019095528481529196506105b7938a938a939291908301828280156105a85780601f1061057d576101008083540402835291602001916105a8565b820191906000526020600020905b81548152906001019060200180831161058b57829003601f168201915b505050505086600301546113ce565b9092509050811561067a5761060b610604876040805190810160405280600381526020017f4554480000000000000000000000000000000000000000000000000000000000815250611b73565b6012611d6d565b6002840181905560408051600160a060020a0387168152602081019290925280517f0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf069281900390910190a1600383018190556000878152600a602052604090208054600160a060020a03191690555b50505050505050565b600160a060020a0382166000908152600760205260408120600481015460ff1680156106b25750600281015415155b1515610708576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b6107338160010154610727836002015486611edf90919063ffffffff16565b9063ffffffff611f1416565b91505b5092915050565b600080600061074b33611f37565b151561078f576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614814833981519152604482015290519081900360640190fd5b600092505b838310156109ba57600760008686868181106107ac57fe5b60209081029290920135600160a060020a03168352508101919091526040016000206004015460ff16151561082b576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f6e2d6578697374696e6720746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b84848481811061083757fe5b60209081029290920135600160a060020a03166000818152600790935260408320909450919050610868828261464e565b5060006001820181905560028201819055600382018190556004909101805460ff1916905590505b6008546108a490600163ffffffff6120f616565b81101561095f5781600160a060020a03166008828154811015156108c457fe5b600091825260209091200154600160a060020a0316141561095757600880546108f490600163ffffffff6120f616565b815481106108fe57fe5b60009182526020909120015460088054600160a060020a03909216918390811061092457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061095f565b600101610890565b6008805490610972906000198301614692565b5060408051600160a060020a038416815290517fc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d7489181900360200190a1600190920191610794565b5050505050565b6109ca33611f37565b1515610a0e576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614814833981519152604482015290519081900360640190fd5b610a1661210d565b565b610a2133611f37565b1515610a65576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614814833981519152604482015290519081900360640190fd5b610a71600983836146b6565b507f7f6d11bd58228c5bcb43ead99b84afe57a4f3237d64f7654713e5c301899fcae82826040518080602001828103825284848281815260200192508082843760405192018290039550909350505050a15050565b610acf33611f37565b1515610b13576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614814833981519152604482015290519081900360640190fd5b610b1c81612521565b6040805182815290517f149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c99181900360200190a150565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bd85780601f10610bad57610100808354040283529160200191610bd8565b820191906000526020600020905b815481529060010190602001808311610bbb57829003601f168201915b505050505081565b610be933611f37565b1515610c2d576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614814833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526007602052604090206004015460ff161515610ca2576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b600160a060020a038316600081815260076020908152604091829020600281018690556003018490558151928352820184905280517f0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf069281900390910190a1505050565b60076020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015610d9d5780601f10610d7257610100808354040283529160200191610d9d565b820191906000526020600020905b815481529060010190602001808311610d8057829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b610dcc33611f37565b1515610e10576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614814833981519152604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610e46573d6000803e3d6000fd5b505050565b60008060606000610e5b33611f37565b1515610e9f576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614814833981519152604482015290519081900360640190fd5b8988148015610ead57508986145b1515610f03576040805160e560020a62461bcd02815260206004820152601e60248201527f706172616d65746572206c656e6774687320646f206e6f74206d617463680000604482015290519081900360640190fd5b600093505b89841015610f5e57600760008c8c87818110610f2057fe5b60209081029290920135600160a060020a03168352508101919091526040016000206004015460ff1615610f5357600080fd5b600190930192610f08565b600093505b898410156111cf578a8a85818110610f7757fe5b60209081029290920135600160a060020a0316600081815260079093526040909220600401549194505060ff1615610ff9576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20616c726561647920657869737473000000000000000000000000604482015290519081900360640190fd5b61101f61101a8a8a8781811061100b57fe5b6020029190910135905061270a565b612736565b915086868581811061102d57fe5b6040805160a081018252868152602092830294909401358483018190526000858301819052606086018b905260016080870152600160a060020a038916815260078452919091208451805192965090935061108c928492910190614734565b50602082810151600183810191909155604080850151600285015560608086015160038601556080958601516004909501805460ff19169515159590951790945560088054928301815560009081527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39092018054600160a060020a031916600160a060020a038a16908117909155815190815290810186905280830184815287519482019490945286517fb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d731695899589958995919392850192908701918190849084905b83811015611188578181015183820152602001611170565b50505050905090810190601f1680156111b55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600190930192610f63565b5050505050505050505050565b60008054600160a060020a03161580611207575060005461120590600160a060020a0316612789565b155b1561121857611216600061278d565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561126a57600080fd5b505af115801561127e573d6000803e3d6000fd5b505050506040513d602081101561129457600080fd5b5051600154600160a060020a03908116911614611349576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156112fd57600080fd5b505af1158015611311573d6000803e3d6000fd5b505050506040513d602081101561132757600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600160009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561139c57600080fd5b505af11580156113b0573d6000803e3d6000fd5b505050506040513d60208110156113c657600080fd5b505190505b90565b60008060006060600060608060008060608c60018151811015156113ee57fe5b90602001015160f860020a900460f860020a0260f860020a90049750876040519080825280601f01601f191660200182016040528015611438578160200160208202803883390190505b50965061144a8d60028a8a600061279d565b8d519097508d9060038a0190811061145e57fe5b90602001015160f860020a900460f860020a0260f860020a90048d8960020181518110151561148957fe5b90602001015160f860020a900460f860020a0260f860020a900461010002019550856040519080825280601f01601f1916602001820160405280156114d8578160200160208202803883390190505b5094506114ec8d896004018888600061279d565b60408051601e808252818301909252919650602082016103c08038833901905050935061151f856005601e87600061279d565b935061152b848c6127f2565b9093509150821515611678577f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8c8f60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b8381101561159f578181015183820152602001611587565b50505050905090810190601f1680156115cc5780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b838110156115ff5781810151838201526020016115e7565b50505050905090810190601f16801561162c5780820380516001836020036101000a031916815260200191505b5093840390525050600481527f6461746500000000000000000000000000000000000000000000000000000000602082015260408051918290030192509050a160009950899850611b62565b603486036040519080825280601f01601f1916602001820160405280156116a9578160200160208202803883390190505b5090506116bd85603480890384600061279d565b90506116c881612a7d565b6040518082805190602001908083835b602083106116f75780518252601f1990920191602091820191016116d8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660028f6040518082805190602001908083835b6020831061175a5780518252601f19909201916020918201910161173b565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561179b573d6000803e3d6000fd5b5050506040513d60208110156117b057600080fd5b5051604080519182525190819003602001902014611909577f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8c8f60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015611830578181015183820152602001611818565b50505050905090810190601f16801561185d5780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b83811015611890578181015183820152602001611878565b50505050905090810190601f1680156118bd5780820380516001836020036101000a031916815260200191505b5093840390525050600481527f6861736800000000000000000000000000000000000000000000000000000000602082015260408051918290030192509050a160009950899850611b62565b61191485888e613340565b15611a25577f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98c8f604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561197d578181015183820152602001611965565b50505050905090810190601f1680156119aa5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156119dd5781810151838201526020016119c5565b50505050905090810190601f168015611a0a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160018299509950611b62565b7f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8c8f60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015611a8d578181015183820152602001611a75565b50505050905090810190601f168015611aba5780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b83811015611aed578181015183820152602001611ad5565b50505050905090810190601f168015611b1a5780820380516001836020036101000a031916815260200191505b5093840390525050600981527f7369676e61747572650000000000000000000000000000000000000000000000602082015260408051918290030192509050a1600099508998505b505050505050505094509492505050565b6060611b7d6147a2565b611b856147a2565b611b8d6147a2565b611b968661345a565b9250611be6611bd96040805190810160405280600181526020017f7b0000000000000000000000000000000000000000000000000000000000000081525061345a565b849063ffffffff61348316565b50611c35611c286040805190810160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525061345a565b849063ffffffff6134eb16565b50611c746040805190810160405280600181526020017f220000000000000000000000000000000000000000000000000000000000000081525061345a565b9150611cba611cad611c9c84611ca1611c9c611c8f8b61345a565b889063ffffffff61355416565b61345a565b9063ffffffff61355416565b849063ffffffff6135cb16565b50611d0a611cfc6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061345a565b84908363ffffffff61360916565b50611d59611d4c6040805190810160405280600181526020017f3a0000000000000000000000000000000000000000000000000000000000000081525061345a565b829063ffffffff61367a16565b50611d6381612736565b9695505050505050565b6000828180805b8351811015611ec25783517f300000000000000000000000000000000000000000000000000000000000000090859083908110611dad57fe5b90602001015160f860020a900460f860020a02600160f860020a03191610158015611e23575083517f390000000000000000000000000000000000000000000000000000000000000090859083908110611e0357fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b15611e7c578115611e4257851515611e3a57611ec2565b600019909501945b600a8302925060308482815181101515611e5857fe5b90602001015160f860020a900460f860020a0260f860020a90040383019250611eba565b8381815181101515611e8a57fe5b90602001015160f860020a900460f860020a02600160f860020a031916602e60f860020a021415611eba57600191505b600101611d74565b6000861115611ed45785600a0a830292505b509095945050505050565b600080831515611ef25760009150610736565b50828202828482811515611f0257fe5b0414611f0d57600080fd5b9392505050565b600080808311611f2357600080fd5b8284811515611f2e57fe5b04949350505050565b600554600654604080517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481019290925251600092600160a060020a031691630178b8bf91602480830192602092919082900301818787803b158015611fa057600080fd5b505af1158015611fb4573d6000803e3d6000fd5b505050506040513d6020811015611fca57600080fd5b5051600654604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561203357600080fd5b505af1158015612047573d6000803e3d6000fd5b505050506040513d602081101561205d57600080fd5b5051604080517fb429afeb000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b429afeb9160248083019260209291908290030181600087803b1580156120c457600080fd5b505af11580156120d8573d6000803e3d6000fd5b505050506040513d60208110156120ee57600080fd5b505192915050565b6000808383111561210657600080fd5b5050900390565b6121156147a2565b61211d6147a2565b6000806121286147a2565b6008546000901515612199576040805160208082526009908201527f6e6f20746f6b656e7300000000000000000000000000000000000000000000008183015290517f4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e9181900360600190a1612519565b60085460408051808201909152600381527f55524c00000000000000000000000000000000000000000000000000000000006020820152303191906121dd9061368d565b021115612249576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290517f4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e9181900360600190a1612519565b6122ae606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d000000000000000000000000000081525061345a565b95506122ee6040805190810160405280601481526020017f267473796d733d455448267369676e3d7472756500000000000000000000000081525061345a565b9450621e84809350600092505b600854831015612519576123cf6007600060088681548110151561231b57fe5b600091825260208083209190910154600160a060020a0316835282810193909352604091820190208054825160026101006001841615026000190190921691909104601f8101859004850282018501909352828152929091908301828280156123c55780601f1061239a576101008083540402835291602001916123c5565b820191906000526020600020905b8154815290600101906020018083116123a857829003601f168201915b505050505061345a565b60408051808201909152600381527f55524c000000000000000000000000000000000000000000000000000000000060208201529092506124279061242187611ca1611c9c8b8863ffffffff61355416565b866138bf565b905060088381548110151561243857fe5b6000918252602080832090910154838352600a90915260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c0561249a83612736565b6040805160208082528351818301528351919283929083019185019080838360005b838110156124d45781810151838201526020016124bc565b50505050905090810190601f1680156125015780820380516001836020036101000a031916815260200191505b509250505060405180910390a16001909201916122fb565b505050505050565b600054600160a060020a0316158061254b575060005461254990600160a060020a0316612789565b155b1561255c5761255a600061278d565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156125ae57600080fd5b505af11580156125c2573d6000803e3d6000fd5b505050506040513d60208110156125d857600080fd5b5051600154600160a060020a0390811691161461268d576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561264157600080fd5b505af1158015612655573d6000803e3d6000fd5b505050506040513d602081101561266b57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156126f357600080fd5b505af11580156109ba573d6000803e3d6000fd5b50565b6127126147a2565b604051602081016040528281528060208301525061272f82613cbe565b8152919050565b606080600083600001516040519080825280601f01601f19166020018201604052801561276d578160200160208202803883390190505b5091506020820190506107368185602001518660000151613d70565b3b90565b6000612797613db4565b92915050565b606060008060008487019250828651101515156127b957600080fd5b505060208087019084015b8688602001018210156127e5578882015186820152602091820191016127c4565b5093979650505050505050565b6000806127fd6147a2565b6128056147a2565b61280d6147a2565b60008060008060008060006128218e61345a565b99506128616040805190810160405280600181526020017f3a0000000000000000000000000000000000000000000000000000000000000081525061345a565b98506128a16040805190810160405280600181526020017f200000000000000000000000000000000000000000000000000000000000000081525061345a565b97506128f16128e46040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061345a565b8b9063ffffffff61367a16565b506129028a8963ffffffff61367a16565b5061291e61291961101a8c8b63ffffffff61367a16565b6140dc565b965061293b61293661101a8c8b63ffffffff61367a16565b6140e9565b60ff16955061295661291961101a8c8b63ffffffff61367a16565b945061296e61291961101a8c8c63ffffffff61367a16565b935061298661291961101a8c8c63ffffffff61367a16565b925061299e61291961101a8c8c63ffffffff61367a16565b9150601f8711806129af5750600187105b156129c05760009b508b9a50612a6c565b600c8611806129cf5750600186105b156129e05760009b508b9a50612a6c565b6107e28510806129f15750610bb885115b15612a025760009b508b9a50612a6c565b60188410612a165760009b508b9a50612a6c565b603c8310612a2a5760009b508b9a50612a6c565b603c8210612a3e5760009b508b9a50612a6c565b506402540be40084026305f5e100860201620f4240870201612710840201606483020181018c81119b509950895b505050505050505050509250929050565b60606000806000806000606060008060008a519450846040519080825280601f01601f191660200182016040528015612ac0578160200160208202803883390190505b50604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208c51919550908c906001198801908110612b0957fe5b016020015160408051600160f860020a031960f860020a93849004909302929092168252519081900360010190201415612b4857600285039450612bc7565b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906000198801908110612b8c57fe5b016020015160408051600160f860020a031960f860020a93849004909302929092168252519081900360010190201415612bc7576001850394505b505060048084040260005b81811015612f29576040805160a081018252607b8152600060208201526000805160206147f48339815191529181019190915260008051602061483483398151915260608201526000805160206147d483398151915260808201528b5160018301928d918110612c3e57fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612c6457fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001600081526020016000805160206147f4833981519152815260200160008051602061483483398151915281526020016000805160206147d48339815191528152508b82806001019350815181101515612ce157fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612d0757fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b8152602001600081526020016000805160206147f4833981519152815260200160008051602061483483398151915281526020016000805160206147d48339815191528152508b82806001019350815181101515612d8457fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612daa57fe5b90602001015160f860020a900460f860020a02965060a060405190810160405280607b8152602001600081526020016000805160206147f4833981519152815260200160008051602061483483398151915281526020016000805160206147d48339815191528152508b82806001019350815181101515612e2757fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612e4d57fe5b0160200151845160f860020a9182900490910296506001840193600160f860020a03198b81166004026010828d16041716918691908110612e8a57fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c16041716918691908110612ecf57fe5b906020010190600160f860020a031916908160001a90535083516001840193600160f860020a0319898116604002891716918691908110612f0c57fe5b906020010190600160f860020a031916908160001a905350612bd2565b818503600214156130bb576040805160a081018252607b8152600060208201526000805160206147f48339815191529181019190915260008051602061483483398151915260608201526000805160206147d483398151915260808201528b5160018301928d918110612f9857fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612fbe57fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001600081526020016000805160206147f4833981519152815260200160008051602061483483398151915281526020016000805160206147d48339815191528152508b8280600101935081518110151561303b57fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561306157fe5b0160200151845160f860020a9182900490910298506001840193600160f860020a03198b81166004026010828d1604171691869190811061309e57fe5b906020010190600160f860020a031916908160001a905350613331565b81850360031415613331576040805160a081018252607b8152600060208201526000805160206147f48339815191529181019190915260008051602061483483398151915260608201526000805160206147d483398151915260808201528b5160018301928d91811061312a57fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561315057fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001600081526020016000805160206147f4833981519152815260200160008051602061483483398151915281526020016000805160206147d48339815191528152508b828060010193508151811015156131cd57fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156131f357fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b8152602001600081526020016000805160206147f4833981519152815260200160008051602061483483398151915281526020016000805160206147d48339815191528152508b8280600101935081518110151561327057fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561329657fe5b0160200151845160f860020a9182900490910297506001840193600160f860020a03198b81166004026010828d160417169186919081106132d357fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c1604171691869190811061331857fe5b906020010190600160f860020a031916908160001a9053505b50508152979650505050505050565b60008060006133d86002876040518082805190602001908083835b6020831061337a5780518252601f19909201916020918201910161335b565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156133bb573d6000803e3d6000fd5b5050506040513d60208110156133d057600080fd5b5051866144b6565b92509050808015611d635750836040518082805190602001908083835b602083106134145780518252601f1990920191602091820191016133f5565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600160a060020a0390811690861614925050509695505050505050565b6134626147a2565b50604080518082019091528151815260208281019082018190525b50919050565b61348b6147a2565b8151835160009111156134a057839150610736565b5060208083015190840151600191146134c85750815160208481015190840151829020919020145b80156134e35782518451038452825160208501805190910190525b509192915050565b6134f36147a2565b815183516000918291101561350a5784925061354c565b5050815183516020808601519085015191019190910390600190821461353a575082516020840151819020908220145b801561354857835185510385525b8492505b505092915050565b606080600083600001518560000151016040519080825280601f01601f191660200182016040528015613591578160200160208202803883390190505b5091506020820190506135ad8186602001518760000151613d70565b8451602085015185516135c39284019190613d70565b509392505050565b6135d36147a2565b60006135f1846000015185602001518560000151866020015161453e565b60208501805186519083039003865252509192915050565b6136116147a2565b600061362f856000015186602001518660000151876020015161453e565b6020808701805191860191909152805182038552865190519192500181141561365b5760008552613671565b8351835186519101900385528351810160208601525b50909392505050565b6136826147a2565b610736838383613609565b60008054600160a060020a031615806136b857506000546136b690600160a060020a0316612789565b155b156136c9576136c7600061278d565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561371b57600080fd5b505af115801561372f573d6000803e3d6000fd5b505050506040513d602081101561374557600080fd5b5051600154600160a060020a039081169116146137fa576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156137ae57600080fd5b505af11580156137c2573d6000803e3d6000fd5b505050506040513d60208110156137d857600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b8381101561387357818101518382015260200161385b565b50505050905090810190601f1680156138a05780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156120c457600080fd5b600080548190600160a060020a031615806138ec57506000546138ea90600160a060020a0316612789565b155b156138fd576138fb600061278d565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561394f57600080fd5b505af1158015613963573d6000803e3d6000fd5b505050506040513d602081101561397957600080fd5b5051600154600160a060020a03908116911614613a2e576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156139e257600080fd5b505af11580156139f6573d6000803e3d6000fd5b505050506040513d6020811015613a0c57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810186905260048101918252875160448201528751600160a060020a0390931692632ef3accc9289928892829160640190602086019080838360005b83811015613aae578181015183820152602001613a96565b50505050905090810190601f168015613adb5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613afb57600080fd5b505af1158015613b0f573d6000803e3d6000fd5b505050506040513d6020811015613b2557600080fd5b50519050670de0b6b3a76400003a840201811115613b4657600091506135c3565b6001546040517fc51be90f00000000000000000000000000000000000000000000000000000000815260006004820181815260648301879052608060248401908152895160848501528951600160a060020a039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b83811015613bd9578181015183820152602001613bc1565b50505050905090810190601f168015613c065780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015613c39578181015183820152602001613c21565b50505050905090810190601f168015613c665780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b158015613c8857600080fd5b505af1158015613c9c573d6000803e3d6000fd5b50505050506040513d6020811015613cb357600080fd5b505195945050505050565b600080821515613cd1576000915061347d565b6fffffffffffffffffffffffffffffffff83161515613d0457601001700100000000000000000000000000000000830492505b67ffffffffffffffff83161515613d275760080168010000000000000000830492505b63ffffffff83161515613d4257600401640100000000830492505b61ffff83161515613d595760020162010000830492505b60ff83161515613d67576001015b60200392915050565b60005b60208210613d95578251845260209384019390920191601f1990910190613d73565b50905182516020929092036101000a6000190180199091169116179052565b600080613dd4731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612789565b1115613e455760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152613e3d906145fe565b5060016113cb565b6000613e6473c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612789565b1115613ecd5760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152613e3d906145fe565b6000613eec73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612789565b1115613f555760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152613e3d906145fe565b6000613f7473146500cfd35b22e4a392fe0adc06de1a1368ed48612789565b1115613fdd5760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152613e3d906145fe565b6000613ffc736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612789565b1115614030575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016113cb565b600061404f7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612789565b1115614083575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016113cb565b60006140a27351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612789565b11156140d6575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016113cb565b50600090565b6000612797826000611d6d565b600080826040518082805190602001908083835b6020831061411c5780518252601f1990920191602091820191016140fd565b5181516000196020949094036101000a93909301928316921916919091179052604080519390910183900383207f4a616e000000000000000000000000000000000000000000000000000000000084529051928390036003019092209194505083141591506141909050576001915061347d565b604080517f4665620000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156141d2576002915061347d565b604080517f4d6172000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614214576003915061347d565b604080517f417072000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614256576004915061347d565b604080517f4d6179000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614298576005915061347d565b604080517f4a756e0000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156142da576006915061347d565b604080517f4a756c00000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561431c576007915061347d565b604080517f41756700000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561435e576008915061347d565b604080517f5365700000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156143a0576009915061347d565b604080517f4f63740000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156143e257600a915061347d565b604080517f4e6f7600000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561442457600b915061347d565b604080517f44656300000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561446657600c915061347d565b6040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420612076616c6964206d6f6e7468000000000000000000000000000000604482015290519081900360640190fd5b6000806000806000855160411415156144d55760009450849350614534565b50505060208301516040840151606085015160001a601b60ff821610156144fa57601b015b8060ff16601b1415801561451257508060ff16601c14155b156145235760009450849350614534565b61452f87828585614611565b945094505b5050509250929050565b600083818080808080808c8b116145e85760208b116145b15760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b8285146145a957838810614596578c8c0198506145ee565b878060010198505085885116925061457e565b8798506145ee565b8a8a209150600096505b8a8d0387116145e85750898720818114156145d8578798506145ee565b60019788019796909601956145bb565b8c8c0198505b5050505050505050949350505050565b805161041c906002906020840190614734565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b50805460018160011615610100020316600290046000825580601f106146745750612707565b601f01602090049060005260206000209081019061270791906147b9565b815481835581811115610e4657600083815260209020610e469181019083016147b9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106146f75782800160ff19823516178555614724565b82800160010185558215614724579182015b82811115614724578235825591602001919060010190614709565b506147309291506147b9565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061477557805160ff1916838001178555614724565b82800160010185558215614724579182015b82811115614724578251825591602001919060010190614787565b604080518082019091526000808252602082015290565b6113cb91905b8082111561473057600081556001016147bf5600001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000073656e646572206973206e6f74206120636f6e74726f6c6c657200000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003fa165627a7a72305820ada7ec233332aabf41d2238b28c4ae7444ad0a816cc5af2864598e7ac029b2160029`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver common.Address, _ens common.Address, _controllerName [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver, _ens, _controllerName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) APIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "APIPublicKey")
	return *ret0, err
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCaller) Convert(opts *bind.CallOpts, _token common.Address, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "convert", _token, _amount)
	return *ret0, err
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCallerSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(symbol string, magnitude uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCaller) Tokens(opts *bind.CallOpts, arg0 common.Address) (struct {
	Symbol     string
	Magnitude  *big.Int
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	ret := new(struct {
		Symbol     string
		Magnitude  *big.Int
		Rate       *big.Int
		LastUpdate *big.Int
		Exists     bool
	})
	out := ret
	err := _Oracle.contract.Call(opts, out, "tokens", arg0)
	return *ret, err
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(symbol string, magnitude uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleSession) Tokens(arg0 common.Address) (struct {
	Symbol     string
	Magnitude  *big.Int
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(symbol string, magnitude uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCallerSession) Tokens(arg0 common.Address) (struct {
	Symbol     string
	Magnitude  *big.Int
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// AddTokens is a paid mutator transaction binding the contract method 0xfcde6831.
//
// Solidity: function addTokens(_tokens address[], _symbols bytes32[], _magnitude uint256[], _updateDate uint256) returns()
func (_Oracle *OracleTransactor) AddTokens(opts *bind.TransactOpts, _tokens []common.Address, _symbols [][32]byte, _magnitude []*big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "addTokens", _tokens, _symbols, _magnitude, _updateDate)
}

// AddTokens is a paid mutator transaction binding the contract method 0xfcde6831.
//
// Solidity: function addTokens(_tokens address[], _symbols bytes32[], _magnitude uint256[], _updateDate uint256) returns()
func (_Oracle *OracleSession) AddTokens(_tokens []common.Address, _symbols [][32]byte, _magnitude []*big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _symbols, _magnitude, _updateDate)
}

// AddTokens is a paid mutator transaction binding the contract method 0xfcde6831.
//
// Solidity: function addTokens(_tokens address[], _symbols bytes32[], _magnitude uint256[], _updateDate uint256) returns()
func (_Oracle *OracleTransactorSession) AddTokens(_tokens []common.Address, _symbols [][32]byte, _magnitude []*big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _symbols, _magnitude, _updateDate)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactor) RemoveTokens(opts *bind.TransactOpts, _tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "removeTokens", _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactorSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactor) UpdateAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateAPIPublicKey", _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactorSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0xd545782e.
//
// Solidity: function updateTokenRate(_token address, _rate uint256, _updateDate uint256) returns()
func (_Oracle *OracleTransactor) UpdateTokenRate(opts *bind.TransactOpts, _token common.Address, _rate *big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRate", _token, _rate, _updateDate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0xd545782e.
//
// Solidity: function updateTokenRate(_token address, _rate uint256, _updateDate uint256) returns()
func (_Oracle *OracleSession) UpdateTokenRate(_token common.Address, _rate *big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate, _updateDate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0xd545782e.
//
// Solidity: function updateTokenRate(_token address, _rate uint256, _updateDate uint256) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRate(_token common.Address, _rate *big.Int, _updateDate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate, _updateDate)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates")
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(_to address, _amount uint256) returns()
func (_Oracle *OracleTransactor) Withdraw(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "withdraw", _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(_to address, _amount uint256) returns()
func (_Oracle *OracleSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(_to address, _amount uint256) returns()
func (_Oracle *OracleTransactorSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// OracleAddedTokenIterator is returned from FilterAddedToken and is used to iterate over the raw logs and unpacked data for AddedToken events raised by the Oracle contract.
type OracleAddedTokenIterator struct {
	Event *OracleAddedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleAddedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleAddedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleAddedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleAddedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleAddedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleAddedToken represents a AddedToken event raised by the Oracle contract.
type OracleAddedToken struct {
	Token     common.Address
	Symbol    string
	Magnitude *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddedToken is a free log retrieval operation binding the contract event 0xb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d7316.
//
// Solidity: e AddedToken(_token address, _symbol string, _magnitude uint256)
func (_Oracle *OracleFilterer) FilterAddedToken(opts *bind.FilterOpts) (*OracleAddedTokenIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "AddedToken")
	if err != nil {
		return nil, err
	}
	return &OracleAddedTokenIterator{contract: _Oracle.contract, event: "AddedToken", logs: logs, sub: sub}, nil
}

// WatchAddedToken is a free log subscription operation binding the contract event 0xb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d7316.
//
// Solidity: e AddedToken(_token address, _symbol string, _magnitude uint256)
func (_Oracle *OracleFilterer) WatchAddedToken(opts *bind.WatchOpts, sink chan<- *OracleAddedToken) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "AddedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleAddedToken)
				if err := _Oracle.contract.UnpackLog(event, "AddedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleConvertedIterator is returned from FilterConverted and is used to iterate over the raw logs and unpacked data for Converted events raised by the Oracle contract.
type OracleConvertedIterator struct {
	Event *OracleConverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleConvertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleConverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleConverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleConvertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleConvertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleConverted represents a Converted event raised by the Oracle contract.
type OracleConverted struct {
	Token  common.Address
	Amount *big.Int
	Ether  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConverted is a free log retrieval operation binding the contract event 0xe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6.
//
// Solidity: e Converted(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) FilterConverted(opts *bind.FilterOpts) (*OracleConvertedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return &OracleConvertedIterator{contract: _Oracle.contract, event: "Converted", logs: logs, sub: sub}, nil
}

// WatchConverted is a free log subscription operation binding the contract event 0xe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6.
//
// Solidity: e Converted(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) WatchConverted(opts *bind.WatchOpts, sink chan<- *OracleConverted) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleConverted)
				if err := _Oracle.contract.UnpackLog(event, "Converted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedProofVerificationIterator is returned from FilterFailedProofVerification and is used to iterate over the raw logs and unpacked data for FailedProofVerification events raised by the Oracle contract.
type OracleFailedProofVerificationIterator struct {
	Event *OracleFailedProofVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedProofVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedProofVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedProofVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedProofVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedProofVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedProofVerification represents a FailedProofVerification event raised by the Oracle contract.
type OracleFailedProofVerification struct {
	PublicKey []byte
	Result    string
	Reason    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterFailedProofVerification is a free log retrieval operation binding the contract event 0x723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c.
//
// Solidity: e FailedProofVerification(_publicKey bytes, _result string, _reason string)
func (_Oracle *OracleFilterer) FilterFailedProofVerification(opts *bind.FilterOpts) (*OracleFailedProofVerificationIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedProofVerification")
	if err != nil {
		return nil, err
	}
	return &OracleFailedProofVerificationIterator{contract: _Oracle.contract, event: "FailedProofVerification", logs: logs, sub: sub}, nil
}

// WatchFailedProofVerification is a free log subscription operation binding the contract event 0x723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c.
//
// Solidity: e FailedProofVerification(_publicKey bytes, _result string, _reason string)
func (_Oracle *OracleFilterer) WatchFailedProofVerification(opts *bind.WatchOpts, sink chan<- *OracleFailedProofVerification) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedProofVerification")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedProofVerification)
				if err := _Oracle.contract.UnpackLog(event, "FailedProofVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: e FailedUpdateRequest(_reason string)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: e FailedUpdateRequest(_reason string)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRemovedTokenIterator is returned from FilterRemovedToken and is used to iterate over the raw logs and unpacked data for RemovedToken events raised by the Oracle contract.
type OracleRemovedTokenIterator struct {
	Event *OracleRemovedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRemovedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRemovedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRemovedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRemovedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRemovedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRemovedToken represents a RemovedToken event raised by the Oracle contract.
type OracleRemovedToken struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRemovedToken is a free log retrieval operation binding the contract event 0xc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d748.
//
// Solidity: e RemovedToken(_token address)
func (_Oracle *OracleFilterer) FilterRemovedToken(opts *bind.FilterOpts) (*OracleRemovedTokenIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RemovedToken")
	if err != nil {
		return nil, err
	}
	return &OracleRemovedTokenIterator{contract: _Oracle.contract, event: "RemovedToken", logs: logs, sub: sub}, nil
}

// WatchRemovedToken is a free log subscription operation binding the contract event 0xc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d748.
//
// Solidity: e RemovedToken(_token address)
func (_Oracle *OracleFilterer) WatchRemovedToken(opts *bind.WatchOpts, sink chan<- *OracleRemovedToken) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RemovedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRemovedToken)
				if err := _Oracle.contract.UnpackLog(event, "RemovedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: e RequestedUpdate(_symbol string)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: e RequestedUpdate(_symbol string)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0x7f6d11bd58228c5bcb43ead99b84afe57a4f3237d64f7654713e5c301899fcae.
//
// Solidity: e SetCryptoComparePublicKey(_publicKey bytes)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0x7f6d11bd58228c5bcb43ead99b84afe57a4f3237d64f7654713e5c301899fcae.
//
// Solidity: e SetCryptoComparePublicKey(_publicKey bytes)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleUpdatedTokenRateIterator is returned from FilterUpdatedTokenRate and is used to iterate over the raw logs and unpacked data for UpdatedTokenRate events raised by the Oracle contract.
type OracleUpdatedTokenRateIterator struct {
	Event *OracleUpdatedTokenRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleUpdatedTokenRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleUpdatedTokenRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleUpdatedTokenRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleUpdatedTokenRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleUpdatedTokenRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleUpdatedTokenRate represents a UpdatedTokenRate event raised by the Oracle contract.
type OracleUpdatedTokenRate struct {
	Token common.Address
	Rate  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterUpdatedTokenRate is a free log retrieval operation binding the contract event 0x0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf06.
//
// Solidity: e UpdatedTokenRate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) FilterUpdatedTokenRate(opts *bind.FilterOpts) (*OracleUpdatedTokenRateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "UpdatedTokenRate")
	if err != nil {
		return nil, err
	}
	return &OracleUpdatedTokenRateIterator{contract: _Oracle.contract, event: "UpdatedTokenRate", logs: logs, sub: sub}, nil
}

// WatchUpdatedTokenRate is a free log subscription operation binding the contract event 0x0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf06.
//
// Solidity: e UpdatedTokenRate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) WatchUpdatedTokenRate(opts *bind.WatchOpts, sink chan<- *OracleUpdatedTokenRate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "UpdatedTokenRate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleUpdatedTokenRate)
				if err := _Oracle.contract.UnpackLog(event, "UpdatedTokenRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: e VerifiedProof(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: e VerifiedProof(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
