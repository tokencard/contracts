// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_myid\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoCompareAPIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"updateTokenRatesList\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateCryptoCompareAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver_\",\"type\":\"address\"},{\"name\":\"_ens_\",\"type\":\"address\"},{\"name\":\"_controllerNameHash_\",\"type\":\"bytes32\"},{\"name\":\"_tokenWhitelistNameHash_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `60806040523480156200001157600080fd5b50604051608080620054ac833981018060405260808110156200003357600080fd5b508051602080830151604080850151606095860151600180546001600160a01b038087166001600160a01b031992831617928390556000805490921692169190911790556007829055600881905582519687018352828752949592949093909291906200546c908301398051620000b3916009916020909101906200097d565b50600380546001600160a01b0319166001600160a01b038616179055620000e66402540be40062000105602090811b901c565b620000fb60f060f81b6200030a60201b60201c565b5050505062000a1f565b6003546001600160a01b0316158062000139575060035462000137906001600160a01b031662000514602090811b901c565b155b1562000153576200015160006200051860201b60201c565b505b600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620001a457600080fd5b505af1158015620001b9573d6000803e3d6000fd5b505050506040513d6020811015620001d057600080fd5b50516002546001600160a01b039081169116146200028757600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200023957600080fd5b505af11580156200024e573d6000803e3d6000fd5b505050506040513d60208110156200026557600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790555b600254604080517fca6ad1e40000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163ca6ad1e49160248082019260009290919082900301818387803b158015620002ee57600080fd5b505af115801562000303573d6000803e3d6000fd5b5050505050565b6003546001600160a01b031615806200033e57506003546200033c906001600160a01b031662000514602090811b901c565b155b1562000358576200035660006200051860201b60201c565b505b600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620003a957600080fd5b505af1158015620003be573d6000803e3d6000fd5b505050506040513d6020811015620003d557600080fd5b50516002546001600160a01b039081169116146200048c57600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200043e57600080fd5b505af115801562000453573d6000803e3d6000fd5b505050506040513d60208110156200046a57600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790555b600254604080517f688dcfd70000000000000000000000000000000000000000000000000000000081527fff000000000000000000000000000000000000000000000000000000000000008416600482015290516001600160a01b039092169163688dcfd79160248082019260009290919082900301818387803b158015620002ee57600080fd5b3b90565b60006200052a6200053060201b60201c565b92915050565b60008062000558731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6200051460201b60201c565b1115620005d657600380546001600160a01b031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e6574000000000000000000000000000000000000000000602080830191909152620005cd919062000964811b901c565b50600162000961565b6000620005fd73c03a2615d5efaf5f49f60b7bb6583eaec212fdf16200051460201b60201c565b11156200067257600380546001600160a01b03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e330000000000000000000000000000000000000000602080830191909152620005cd919062000964811b901c565b60006200069973b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6200051460201b60201c565b11156200070e57600380546001600160a01b03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e0000000000000000000000000000000000000000000000602080830191909152620005cd919062000964811b901c565b60006200073573146500cfd35b22e4a392fe0adc06de1a1368ed486200051460201b60201c565b1115620007aa57600380546001600160a01b03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b656279000000000000000000000000000000000000000000602080830191909152620005cd919062000964811b901c565b6000620007d173a2998efd205fb9d4b4963afb70778d6354ad3a416200051460201b60201c565b11156200084657600380546001600160a01b03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a81527f6574685f676f65726c6900000000000000000000000000000000000000000000602080830191909152620005cd919062000964811b901c565b60006200086d736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756200051460201b60201c565b1115620008a35750600380546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600162000961565b6000620008ca7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6200051460201b60201c565b1115620009005750600380546001600160a01b0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600162000961565b6000620009277351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6200051460201b60201c565b11156200095d5750600380546001600160a01b0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600162000961565b5060005b90565b8051620009799060049060208401906200097d565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009c057805160ff1916838001178555620009f0565b82800160010185558215620009f0579182015b82811115620009f0578251825591602001919060010190620009d3565b50620009fe92915062000a02565b5090565b6200096191905b80821115620009fe576000815560010162000a09565b614a3d8062000a2f6000396000f3fe60806040526004361061009c5760003560e01c8063937f54a411610064578063937f54a41461037a578063996cba68146103ef578063b598f88214610432578063c2c3d0541461044f578063ca6ad1e4146104ca578063e2b4ce97146104f45761009c565b806327dc297e146100a157806338bbfa501461015b5780633acbe96e146102985780637d73b23114610322578063877337b014610353575b600080fd5b3480156100ad57600080fd5b50610159600480360360408110156100c457600080fd5b81359190810190604081016020820135600160201b8111156100e557600080fd5b8201836020820111156100f757600080fd5b803590602001918460018302840111600160201b8311171561011857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610509945050505050565b005b34801561016757600080fd5b506101596004803603606081101561017e57600080fd5b81359190810190604081016020820135600160201b81111561019f57600080fd5b8201836020820111156101b157600080fd5b803590602001918460018302840111600160201b831117156101d257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561022457600080fd5b82018360208201111561023657600080fd5b803590602001918460018302840111600160201b8311171561025757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610529945050505050565b3480156102a457600080fd5b506102ad610766565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e75781810151838201526020016102cf565b50505050905090810190601f1680156103145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032e57600080fd5b506103376107f4565b604080516001600160a01b039092168252519081900360200190f35b34801561035f57600080fd5b50610368610804565b60408051918252519081900360200190f35b6101596004803603604081101561039057600080fd5b81359190810190604081016020820135600160201b8111156103b157600080fd5b8201836020820111156103c357600080fd5b803590602001918460208302840111600160201b831117156103e457600080fd5b50909250905061080a565b3480156103fb57600080fd5b506101596004803603606081101561041257600080fd5b506001600160a01b03813581169160208101359091169060400135610897565b6101596004803603602081101561044857600080fd5b50356108ed565b34801561045b57600080fd5b506101596004803603602081101561047257600080fd5b810190602081018135600160201b81111561048c57600080fd5b82018360208201111561049e57600080fd5b803590602001918460018302840111600160201b831117156104bf57600080fd5b509092509050610944565b3480156104d657600080fd5b50610159600480360360208110156104ed57600080fd5b5035610a0a565b34801561050057600080fd5b50610368610a9c565b6040805160008152602081019091526105259083908390610529565b5050565b610531610aa2565b6001600160a01b0316336001600160a01b0316146105995760408051600160e51b62461bcd02815260206004820152601660248201527f73656e646572206973206e6f74206f7261636c697a6500000000000000000000604482015290519081900360640190fd5b6000838152600a60205260409020546001600160a01b0316806106065760408051600160e51b62461bcd02815260206004820152601c60248201527f71756572794944206d61746368657320746f2061646472657373203000000000604482015290519081900360640190fd5b60008061061283610c8c565b965050509450505050816106705760408051600160e51b62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b60098054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526000938493610711938b938b93909290918301828280156107065780601f106106db57610100808354040283529160200191610706565b820191906000526020600020905b8154815290600101906020018083116106e957829003601f168201915b505050505086610db7565b9092509050811561075c57600061072f61072a8961133f565b61161b565b60008a8152600a6020526040902080546001600160a01b031916905590508161075987838361162e565b50505b5050505050505050565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107ec5780601f106107c1576101008083540402835291602001916107ec565b820191906000526020600020905b8154815290600101906020018083116107cf57829003601f168201915b505050505081565b6001546001600160a01b03165b90565b60085490565b610813336116bd565b6108555760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020614911833981519152604482015290519081900360640190fd5b6108928383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061175192505050565b505050565b6108a0336116bd565b6108e25760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020614911833981519152604482015290519081900360640190fd5b610892838383611a9f565b6108f6336116bd565b6109385760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020614911833981519152604482015290519081900360640190fd5b61094181611c02565b50565b61094d336116bd565b61098f5760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020614911833981519152604482015290519081900360640190fd5b61099b6009838361479c565b506040805133808252602082018381529282018490527fc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa929091859185919060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b610a13336116bd565b610a555760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020614911833981519152604482015290519081900360640190fd5b610a5e81611ecd565b604080513381526020810183905281517ffbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4929181900390910190a150565b60075490565b6003546000906001600160a01b03161580610acf5750600354610acd906001600160a01b0316612099565b155b15610ae057610ade600061209d565b505b600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b505050506040513d6020811015610b5a57600080fd5b50516002546001600160a01b03908116911614610c0d57600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bc157600080fd5b505af1158015610bd5573d6000803e3d6000fd5b505050506040513d6020811015610beb57600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790555b600260009054906101000a90046001600160a01b03166001600160a01b031663c281d19e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5b57600080fd5b505afa158015610c6f573d6000803e3d6000fd5b505050506040513d6020811015610c8557600080fd5b5051905090565b6060600080600080600080610ca26008546120a7565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b158015610cf757600080fd5b505afa158015610d0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015610d3457600080fd5b810190808051600160201b811115610d4b57600080fd5b82016020810184811115610d5e57600080fd5b8151600160201b811182820187101715610d7757600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949e50929c50909a509850965090945092505050919395979092949650565b60008060a5855114610e135760408051600160e51b62461bcd02815260206004820152601460248201527f696e76616c69642070726f6f66206c656e677468000000000000000000000000604482015290519081900360640190fd5b604185600181518110610e2257fe5b602001015160f81c60f81b60f81c60ff1614610e885760408051600160e51b62461bcd02815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b60408051604180825260808201909252606091602082018180388339019050509050610eba866002604184600061216f565b865190915060609087906044908110610ecf57fe5b602001015160f81c60f81b60f81c60ff1661010088604160020181518110610ef357fe5b602001015160f81c60f81b60f81c60ff16020114610f5b5760408051600160e51b62461bcd02815260206004820152601660248201527f696e76616c69642068656164657273206c656e67746800000000000000000000604482015290519081900360640190fd5b6040805160608082526080820190925281602082018180388339019050509050610f8b876045606084600061216f565b9050610f988183886121bd565b610fec5760408051600160e51b62461bcd02815260206004820152601160248201527f696e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b60408051601480825281830190925260609160208201818038833901905050905061101d82600b601484600061216f565b905060008061102c8389612281565b9092509050816110865760408051600160e51b62461bcd02815260206004820152600c60248201527f696e76616c696420646174650000000000000000000000000000000000000000604482015290519081900360640190fd5b60408051602c80825260608281019093526020820181803883390190505090506110b6856034602c84600061216f565b90506110c181612649565b8051906020012060028d6040516020018082805190602001908083835b602083106110fd5780518252601f1990920191602091820191016110de565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106111605780518252601f199092019160209182019101611141565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa15801561119f573d6000803e3d6000fd5b5050506040513d60208110156111b457600080fd5b50516040805160208181019390935281518082038401815290820190915280519101201461122c5760408051600160e51b62461bcd02815260206004820152601860248201527f726573756c742068617368206e6f74206d61746368696e670000000000000000604482015290519081900360640190fd5b7f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98a8d604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611290578181015183820152602001611278565b50505050905090810190601f1680156112bd5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156112f05781810151838201526020016112d8565b50505050905090810190601f16801561131d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15060019b909a5098505050505050505050565b60606000826040516020018082805190602001908083835b602083106113765780518252601f199092019160209182019101611357565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525190506008811180156113be5750601c8111155b6114125760408051600160e51b62461bcd02815260206004820152601260248201527f6d6973666f726d617474656420696e7075740000000000000000000000000000604482015290519081900360640190fd5b6040805160078082528183019092526060916020820181803883390190505090506114a9846040516020018082805190602001908083835b602083106114695780518252601f19909201916020918201910161144a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526000600784600061216f565b5060408051600160c91b663d9122aa24111d028152905190819003600701902081516020830120146115255760408051600160e51b62461bcd02815260206004820152600f60248201527f707265666978206d69736d617463680000000000000000000000000000000000604482015290519081900360640190fd5b61152d61481a565b61153685612c96565b905061156d611560604051806040016040528060018152602001600160f91b601d02815250612c96565b829063ffffffff612cbb16565b50806000015192506115aa61159d604051806040016040528060018152602001600160f81b607d02815250612c96565b829063ffffffff612cd516565b5080516000198401146116075760408051600160e51b62461bcd02815260206004820152600f60248201527f6e6f74206a736f6e20666f726d61740000000000000000000000000000000000604482015290519081900360640190fd5b61161081612d33565b93505050505b919050565b6000611628826012612d83565b92915050565b6116396008546120a7565b6001600160a01b031663d545782e8484846040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b1580156116a057600080fd5b505af11580156116b4573d6000803e3d6000fd5b50505050505050565b60006116ca6007546120a7565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561171f57600080fd5b505afa158015611733573d6000803e3d6000fd5b505050506040513d602081101561174957600080fd5b505192915050565b80516117aa576040805160208082526010908201527f656d70747920746f6b656e206c697374000000000000000000000000000000008183015290516000805160206149ac8339815191529181900360600190a1610525565b306001600160a01b03163181516117de604051806040016040528060038152602001600160ea1b6215549302815250613700565b021115611838576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290516000805160206149ac8339815191529181900360600190a1610525565b61184061481a565b6118616040518060600160405280603281526020016148bd60329139612c96565b905061186b61481a565b6118a96040518060400160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250612c96565b905060005b8351811015611a9857606060006118d78684815181106118ca57fe5b6020026020010151610c8c565b505050935050509150806119355760408051600160e51b62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b61193d61481a565b61194683612c96565b9050600061199d604051806040016040528060038152602001600160ea1b62155493028152506119978861198b611986878d61392e90919063ffffffff16565b612c96565b9063ffffffff61392e16565b8b6139a2565b90508785815181106119ab57fe5b6020026020010151600a600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05611a1483612d33565b6040805160208082528351818301528351919283929083019185019080838360005b83811015611a4e578181015183820152602001611a36565b50505050905090810190601f168015611a7b5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050600190920191506118ae9050565b5050505050565b6001600160a01b038216611ae9576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015611ae3573d6000803e3d6000fd5b50611bb3565b816001600160a01b031663a9059cbb84836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611b4957600080fd5b505af1158015611b5d573d6000803e3d6000fd5b505050506040513d6020811015611b7357600080fd5b5051611bb357604051600160e51b62461bcd0281526004018080602001828103825260258152602001806149ed6025913960400191505060405180910390fd5b604080516001600160a01b0380861682528416602082015280820183905290517ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839181900360600190a1505050565b6060611c0c613d75565b9050805160001415611c5a57604080516020808252600990820152600160b81b686e6f20746f6b656e73028183015290516000805160206149ac8339815191529181900360600190a1610525565b306001600160a01b0316318151611c8e604051806040016040528060038152602001600160ea1b6215549302815250613700565b021115611ce8576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290516000805160206149ac8339815191529181900360600190a1610525565b611cf061481a565b611d116040518060600160405280603281526020016148bd60329139612c96565b9050611d1b61481a565b611d596040518060400160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250612c96565b905060005b8351811015611a98576060611d788583815181106118ca57fe5b5050505050509050611d8861481a565b611d9182612c96565b90506000611dd7604051806040016040528060038152602001600160ea1b6215549302815250611dd18761198b611986878c61392e90919063ffffffff16565b8a6139a2565b9050868481518110611de557fe5b6020026020010151600a600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05611e4e83612d33565b6040805160208082528351818301528351919283929083019185019080838360005b83811015611e88578181015183820152602001611e70565b50505050905090810190601f168015611eb55780820380516001836020036101000a031916815260200191505b509250505060405180910390a1505050600101611d5e565b6003546001600160a01b03161580611ef75750600354611ef5906001600160a01b0316612099565b155b15611f0857611f06600061209d565b505b600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611f5857600080fd5b505af1158015611f6c573d6000803e3d6000fd5b505050506040513d6020811015611f8257600080fd5b50516002546001600160a01b0390811691161461203557600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611fe957600080fd5b505af1158015611ffd573d6000803e3d6000fd5b505050506040513d602081101561201357600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790555b60025460408051600160e21b63329ab4790281526004810184905290516001600160a01b039092169163ca6ad1e49160248082019260009290919082900301818387803b15801561208557600080fd5b505af1158015611a98573d6000803e3d6000fd5b3b90565b6000611628613e48565b6000805460408051600160e01b630178b8bf0281526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156120f757600080fd5b505afa15801561210b573d6000803e3d6000fd5b505050506040513d602081101561212157600080fd5b505160408051600160e11b631d9dabef0281526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b15801561171f57600080fd5b606060008285019050808451101561218657600080fd5b60208087019084015b8688602001018210156121b05788820151868201526020918201910161218f565b5093979650505050505050565b60008060006122536002876040518082805190602001908083835b602083106121f75780518252601f1990920191602091820191016121d8565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015612236573d6000803e3d6000fd5b5050506040513d602081101561224b57600080fd5b5051866141b9565b925090508080156122755750835160208501206001600160a01b038381169116145b925050505b9392505050565b600080836040516020018082805190602001908083835b602083106122b75780518252601f199092019160209182019101612298565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052516014146122f557fe5b6122fd61481a565b61230685612c96565b905061231061481a565b612335604051806040016040528060018152602001600160f91b601d02815250612c96565b905061233f61481a565b612361604051806040016040528060018152602001600160fd1b815250612c96565b9050600061238561238061237b868563ffffffff612cbb16565b612d33565b614243565b90506000811180156123975750602081105b6123da5760408051600160e51b62461bcd0281526020600482015260096024820152600160b91b683230bc9032b93937b902604482015290519081900360640190fd5b60006123f76123f261237b878663ffffffff612cbb16565b614250565b60ff16905060008111801561240c5750600d81105b6124515760408051600160e51b62461bcd02815260206004820152600b6024820152600160a91b6a36b7b73a341032b93937b902604482015290519081900360640190fd5b600061246961238061237b888763ffffffff612cbb16565b90506107e18111801561247d5750610bb881105b6124c15760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b693cb2b0b91032b93937b902604482015290519081900360640190fd5b60006124d961238061237b898963ffffffff612cbb16565b9050601981106125235760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b693437bab91032b93937b902604482015290519081900360640190fd5b600061253b61238061237b8a8a63ffffffff612cbb16565b9050603c81106125955760408051600160e51b62461bcd02815260206004820152600c60248201527f6d696e757465206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b60006125ad61238061237b8b8b63ffffffff612cbb16565b9050603c81106126075760408051600160e51b62461bcd02815260206004820152600c60248201527f7365636f6e64206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b60008183606402856127100289620f424002896305f5e10002896402540be40002010101010190508c8111819b509b50505050505050505050505b9250929050565b60606000806000806000865190506060816040519080825280601f01601f191660200182016040528015612684576020820181803883390190505b50905060008083118015612699575060048306155b6126ed5760408051600160e51b62461bcd02815260206004820152601760248201527f696e76616c69642062617365363420656e636f64696e67000000000000000000604482015290519081900360640190fd5b60408051600160f81b603d028152905190819003600101902089518a90600119860190811061271857fe5b602001015160f81c60f81b60405160200180826001600160f81b0319166001600160f81b031916815260010191505060405160208183030381529060405280519060200120141561276e576002830392506127eb565b60408051600160f81b603d028152905190819003600101902089518a90600019860190811061279957fe5b602001015160f81c60f81b60405160200180826001600160f81b0319166001600160f81b03191681526001019150506040516020818303038152906040528051906020012014156127eb576001830392505b600283811c901b60005b81811015612a0a576040518060a00160405280607b8152602001614931607b91398b5160018301928d91811061282757fe5b602001015160f81c60f81b60f81c60ff168151811061284257fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001614931607b91398b5160018301928d91811061287957fe5b602001015160f81c60f81b60f81c60ff168151811061289457fe5b602001015160f81c60f81b97506040518060a00160405280607b8152602001614931607b91398b5160018301928d9181106128cb57fe5b602001015160f81c60f81b60f81c60ff16815181106128e657fe5b602001015160f81c60f81b96506040518060a00160405280607b8152602001614931607b91398b5160018301928d91811061291d57fe5b602001015160f81c60f81b60f81c60ff168151811061293857fe5b0160200151845160f891821c90911b965060018401936001600160f81b03198b811660021b818c1660041c171691869190811061297157fe5b60200101906001600160f81b031916908160001a905350835160018401936001600160f81b03198a811660041b818b1660021c17169186919081106129b257fe5b60200101906001600160f81b031916908160001a905350835160018401936001600160f81b0319808a1660061b8917169186919081106129ee57fe5b60200101906001600160f81b031916908160001a9053506127f5565b81850360021415612b01576040518060a00160405280607b8152602001614931607b91398b5160018301928d918110612a3f57fe5b602001015160f81c60f81b60f81c60ff1681518110612a5a57fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001614931607b91398b5160018301928d918110612a9157fe5b602001015160f81c60f81b60f81c60ff1681518110612aac57fe5b0160200151845160f891821c90911b985060018401936001600160f81b03198b811660021b818c1660041c1716918691908110612ae557fe5b60200101906001600160f81b031916908160001a905350612c87565b81850360031415612c87576040518060a00160405280607b8152602001614931607b91398b5160018301928d918110612b3657fe5b602001015160f81c60f81b60f81c60ff1681518110612b5157fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001614931607b91398b5160018301928d918110612b8857fe5b602001015160f81c60f81b60f81c60ff1681518110612ba357fe5b602001015160f81c60f81b97506040518060a00160405280607b8152602001614931607b91398b5160018301928d918110612bda57fe5b602001015160f81c60f81b60f81c60ff1681518110612bf557fe5b0160200151845160f891821c90911b975060018401936001600160f81b03198b811660021b818c1660041c1716918691908110612c2e57fe5b60200101906001600160f81b031916908160001a905350835160018401936001600160f81b03198a811660041b818b1660021c1716918691908110612c6f57fe5b60200101906001600160f81b031916908160001a9053505b50508152979650505050505050565b612c9e61481a565b506040805180820190915281518152602082810190820152919050565b612cc361481a565b612cce838383614527565b5092915050565b612cdd61481a565b815183511015612cee575081611628565b8151835160208086015190850151910191909103906001908214612d1c575082516020840151819020908220145b8015612d2a57835185510385525b50929392505050565b60608082600001516040519080825280601f01601f191660200182016040528015612d65576020820181803883390190505b5090506000602082019050612cce8185602001518660000151614598565b60008281808080808080808080805b8b5181101561347c578b51600160fc1b600302908d9083908110612db257fe5b602001015160f81c60f81b6001600160f81b03191610158015612dff57508b51600160f81b603902908d9083908110612de757fe5b602001015160f81c60f81b6001600160f81b03191611155b8015612e09575083155b15612ec3578415612e6c57612e258a600a63ffffffff6145d616565b9950612e5f603060f81b60f81c8d8381518110612e3e57fe5b602001015160f81c60f81b60f81c0360ff168b61463290919063ffffffff16565b9950600190970196612ebe565b60019550612e818b600a63ffffffff6145d616565b9a50612ebb603060f81b60f81c8d8381518110612e9a57fe5b602001015160f81c60f81b60f81c0360ff168c61463290919063ffffffff16565b9a505b613474565b8b51600160fc1b600302908d9083908110612eda57fe5b602001015160f81c60f81b6001600160f81b03191610158015612f2757508b51600160f81b603902908d9083908110612f0f57fe5b602001015160f81c60f81b6001600160f81b03191611155b8015612f305750835b15612f8757612f4689600a63ffffffff6145d616565b9850612f80603060f81b60f81c8d8381518110612f5f57fe5b602001015160f81c60f81b60f81c0360ff168a61463290919063ffffffff16565b9850613474565b8b51600160f91b601702908d9083908110612f9e57fe5b602001015160f81c60f81b6001600160f81b03191614156130c3578561300e5760408051600160e51b62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b84156130645760408051600160e51b62461bcd02815260206004820152601760248201527f6475706c696361746520646563696d616c20706f696e74000000000000000000604482015290519081900360640190fd5b83156130ba5760408051600160e51b62461bcd02815260206004820152601660248201527f646563696d616c206166746572206578706f6e656e7400000000000000000000604482015290519081900360640190fd5b60019450613474565b8b51600160f81b602d02908d90839081106130da57fe5b602001015160f81c60f81b6001600160f81b03191614156131e557821561313c5760408051600160e51b62461bcd02815260206004820152600b6024820152600160a81b6a6475706c6963617465202d02604482015290519081900360640190fd5b81156131825760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6932bc3a39309039b4b3b702604482015290519081900360640190fd5b8087600101146131dc5760408051600160e51b62461bcd02815260206004820152601e60248201527f2d207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019250613474565b8b51600160f81b602b02908d90839081106131fc57fe5b602001015160f81c60f81b6001600160f81b031916141561330757811561325e5760408051600160e51b62461bcd02815260206004820152600b6024820152600160a81b6a6475706c6963617465202b02604482015290519081900360640190fd5b82156132a45760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b6932bc3a39309039b4b3b702604482015290519081900360640190fd5b8087600101146132fe5760408051600160e51b62461bcd02815260206004820152601e60248201527f2b207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019150613474565b8b51600160f81b604502908d908390811061331e57fe5b602001015160f81c60f81b6001600160f81b031916148061336857508b51600160f81b606502908d908390811061335157fe5b602001015160f81c60f81b6001600160f81b031916145b1561342457856133c25760408051600160e51b62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b83156134185760408051600160e51b62461bcd02815260206004820152601960248201527f6475706c6963617465206578706f6e656e742073796d626f6c00000000000000604482015290519081900360640190fd5b60019350809650613474565b60408051600160e51b62461bcd02815260206004820152600d60248201527f696e76616c696420646967697400000000000000000000000000000000000000604482015290519081900360640190fd5b600101612d92565b82806134855750815b1561349e5786600201811161349957600080fd5b6134b3565b83156134b3578660010181116134b357600080fd5b821561353a578d891061353057604e8e8a031061350d5760408051600160e51b62461bcd02815260206004820152600d6024820152600160981b6c6578706f6e656e74203e20373702604482015290519081900360640190fd5b8d8903600a0a8b8161351b57fe5b049c506116289b505050505050505050505050565b888e039d5061354d565b61354a8e8a63ffffffff61463216565b9d505b878e1061362a57604e881061359657604051600160e51b62461bcd0281526004018080602001828103825260228152602001806148ef6022913960400191505060405180910390fd5b6135aa8b600a8a900a63ffffffff6145d616565b9a506135bc8b8b63ffffffff61463216565b9a50604e888f031061360b5760408051600160e51b62461bcd02815260206004820152600d6024820152600160981b6c6578706f6e656e74203e20373702604482015290519081900360640190fd5b613623888f03600a0a8c6145d690919063ffffffff16565b9a506136ed565b8d88039750604e881061367157604051600160e51b62461bcd0281526004018080602001828103825260228152602001806148ef6022913960400191505060405180910390fd5b87600a0a8a8161367d57fe5b049950604e8e106136c257604051600160e51b62461bcd0281526004018080602001828103825260228152602001806148ef6022913960400191505060405180910390fd5b6136d88e600a0a8c6145d690919063ffffffff16565b9a506136ea8b8b63ffffffff61463216565b9a505b50989d9c50505050505050505050505050565b6003546000906001600160a01b0316158061372d575060035461372b906001600160a01b0316612099565b155b1561373e5761373c600061209d565b505b600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561378e57600080fd5b505af11580156137a2573d6000803e3d6000fd5b505050506040513d60208110156137b857600080fd5b50516002546001600160a01b0390811691161461386b57600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561381f57600080fd5b505af1158015613833573d6000803e3d6000fd5b505050506040513d602081101561384957600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790555b600254604051600160e01b63524f38890281526020600482018181528551602484015285516001600160a01b039094169363524f388993879383926044909201919085019080838360005b838110156138ce5781810151838201526020016138b6565b50505050905090810190601f1680156138fb5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561391a57600080fd5b505af1158015611733573d6000803e3d6000fd5b60608082600001518460000151016040519080825280601f01601f191660200182016040528015613966576020820181803883390190505b50905060006020820190506139848186602001518760000151614598565b84516020850151855161399a9284019190614598565b509392505050565b6003546000906001600160a01b031615806139cf57506003546139cd906001600160a01b0316612099565b155b156139e0576139de600061209d565b505b600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613a3057600080fd5b505af1158015613a44573d6000803e3d6000fd5b505050506040513d6020811015613a5a57600080fd5b50516002546001600160a01b03908116911614613b0d57600360009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613ac157600080fd5b505af1158015613ad5573d6000803e3d6000fd5b505050506040513d6020811015613aeb57600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790555b60025460408051600160e21b630bbceb3302815260248101859052600481019182528651604482015286516000936001600160a01b031692632ef3accc928992889291829160649091019060208601908083838c5b83811015613b7a578181015183820152602001613b62565b50505050905090810190601f168015613ba75780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613bc757600080fd5b505af1158015613bdb573d6000803e3d6000fd5b505050506040513d6020811015613bf157600080fd5b50519050670de0b6b3a76400003a840201811115613c1357506000905061227a565b600254604051600160e01b63c51be90f028152600060048201818152606483018790526080602484019081528951608485015289516001600160a01b039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b83811015613c90578181015183820152602001613c78565b50505050905090810190601f168015613cbd5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015613cf0578181015183820152602001613cd8565b50505050905090810190601f168015613d1d5780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b158015613d3f57600080fd5b505af1158015613d53573d6000803e3d6000fd5b50505050506040513d6020811015613d6a57600080fd5b505195945050505050565b6060613d826008546120a7565b6001600160a01b031663443dd2a46040518163ffffffff1660e01b815260040160006040518083038186803b158015613dba57600080fd5b505afa158015613dce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015613df757600080fd5b810190808051600160201b811115613e0e57600080fd5b82016020810184811115613e2157600080fd5b81518560208202830111600160201b82111715613e3d57600080fd5b509094505050505090565b600080613e68731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612099565b1115613eca57600380546001600160a01b031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b8152600160aa1b6a195d1a17db585a5b9b995d026020820152613ec29061468f565b506001610801565b6000613ee973c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612099565b1115613f5257600380546001600160a01b03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152613ec29061468f565b6000613f7173b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612099565b1115613fc957600380546001600160a01b03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e1790556040805180820190915260098152600160b91b6832ba342fb5b7bb30b7026020820152613ec29061468f565b6000613fe873146500cfd35b22e4a392fe0adc06de1a1368ed48612099565b111561404257600380546001600160a01b03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b8152600160a81b6a6574685f72696e6b656279026020820152613ec29061468f565b600061406173a2998efd205fb9d4b4963afb70778d6354ad3a41612099565b11156140ba57600380546001600160a01b03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a8152600160b01b696574685f676f65726c69026020820152613ec29061468f565b60006140d9736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612099565b111561410d5750600380546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751790556001610801565b600061412c7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612099565b11156141605750600380546001600160a01b0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1790556001610801565b600061417f7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612099565b11156141b35750600380546001600160a01b0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1790556001610801565b50600090565b600080600080600085516041146141da575060009350839250612642915050565b50505060208301516040840151606085015160001a601b8110156141fc57601b015b8060ff16601b1415801561421457508060ff16601c14155b15614229575060009350839250612642915050565b614235878285856146a2565b945094505050509250929050565b6000611628826000612d83565b600080826040516020018082805190602001908083835b602083106142865780518252601f199092019160209182019101614267565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506040518080600160e91b622530b702815250600301905060405180910390208114156142f3576001915050611616565b60408051600160e91b622332b1028152905190819003600301902081141561431f576002915050611616565b60408051600160e91b6226b0b9028152905190819003600301902081141561434b576003915050611616565b60408051600160e91b6220b8390281529051908190036003019020811415614377576004915050611616565b60408051600160e81b624d617902815290519081900360030190208114156143a3576005915050611616565b60408051600160e91b62253ab702815290519081900360030190208114156143cf576006915050611616565b60408051600160ea1b62129d5b02815290519081900360030190208114156143fb576007915050611616565b60408051600160e81b624175670281529051908190036003019020811415614427576008915050611616565b60408051600160ec1b620536570281529051908190036003019020811415614453576009915050611616565b60408051600160ea1b6213d8dd028152905190819003600301902081141561447f57600a915050611616565b60408051600160e91b622737bb02815290519081900360030190208114156144ab57600b915050611616565b60408051600160e81b6244656302815290519081900360030190208114156144d757600c915050611616565b60408051600160e51b62461bcd02815260206004820152601160248201527f6e6f7420612076616c6964206d6f6e7468000000000000000000000000000000604482015290519081900360640190fd5b61452f61481a565b600061454d85600001518660200151866000015187602001516146df565b60208087018051918601919091528051820385528651905191925001811415614579576000855261458f565b8351835186519101900385528351810160208601525b50909392505050565b5b602081106145b8578151835260209283019290910190601f1901614599565b905182516020929092036101000a6000190180199091169116179052565b6000826145e557506000611628565b828202828482816145f257fe5b041461227a57604051600160e51b62461bcd0281526004018080602001828103825260218152602001806149cc6021913960400191505060405180910390fd5b60008282018381101561227a5760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b8051610525906004906020840190614834565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b6000838186851161478d57602085116147525783518251600019600860208990030260020a011991821690888a018890039083165b82811461474457818610614732578a8a019650505050505050614794565b50600190940180519094908316614714565b859650505050505050614794565b508383206000905b858803821161478b578583208181141561477a5783945050505050614794565b50600192830192919091019061475a565b505b5050508284015b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106147dd5782800160ff1982351617855561480a565b8280016001018555821561480a579182015b8281111561480a5782358255916020019190600101906147ef565b506148169291506148a2565b5090565b604051806040016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061487557805160ff191683800117855561480a565b8280016001018555821561480a579182015b8281111561480a578251825591602001919060010190614887565b61080191905b8082111561481657600081556001016148a856fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d6d6f7265207468616e20373720646563696d616c206469676974732070617273656473656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003f001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132334eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77455243323020746f6b656e207472616e736665722077617320756e7375636365737366756ca165627a7a7230582059a0f610a363844bcc3cae71397842edbd74c38b0176ae7d033a5d5ab990e5080029a0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a983710bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver_ common.Address, _ens_ common.Address, _controllerNameHash_ [32]byte, _tokenWhitelistNameHash_ [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver_, _ens_, _controllerNameHash_, _tokenWhitelistNameHash_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) CryptoCompareAPIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "cryptoCompareAPIPublicKey")
	return *ret0, err
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCallerSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Claim(opts *bind.TransactOpts, _to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "claim", _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactor) UpdateCryptoCompareAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateCryptoCompareAPIPublicKey", _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactorSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts, _gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates", _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactor) UpdateTokenRatesList(opts *bind.TransactOpts, _gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRatesList", _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// OracleClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Oracle contract.
type OracleClaimedIterator struct {
	Event *OracleClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleClaimed represents a Claimed event raised by the Oracle contract.
type OracleClaimed struct {
	To     common.Address
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) FilterClaimed(opts *bind.FilterOpts) (*OracleClaimedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &OracleClaimedIterator{contract: _Oracle.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *OracleClaimed) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleClaimed)
				if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: event RequestedUpdate(string _symbol)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: event RequestedUpdate(string _symbol)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	Sender    common.Address
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	Sender   common.Address
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
