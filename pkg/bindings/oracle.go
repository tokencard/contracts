// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ens_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"UpdateTokenRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoCompareAPIPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateCryptoCompareAPIPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
var OracleBin = "0x6080604052603380546001600160a01b0319166e0c2e074ec69a0dfb2997ba6c7d2e1e1790557f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976034557fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d3966035553480156200007a57600080fd5b506040516200322f3803806200322f83398181016040526060811015620000a057600080fd5b5080516020820151604090920151909190620000bc836200010c565b620000c782620001e3565b620000d28162000299565b604051806060016040528060408152602001620031ef604091398051620001029160369160209091019062000355565b50505050620003f1565b600054610100900460ff1680620001285750620001286200034f565b8062000137575060005460ff16155b620001745760405162461bcd60e51b815260040180806020018281038252602e815260200180620031c1602e913960400191505060405180910390fd5b600054610100900460ff16158015620001a0576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03821615620001cc57603380546001600160a01b0319166001600160a01b0384161790555b8015620001df576000805461ff00191690555b5050565b600054610100900460ff1680620001ff5750620001ff6200034f565b806200020e575060005460ff16155b6200024b5760405162461bcd60e51b815260040180806020018281038252602e815260200180620031c1602e913960400191505060405180910390fd5b600054610100900460ff1615801562000277576000805460ff1961ff0019909116610100171660011790555b8115620001cc5760348290558015620001df576000805461ff00191690555050565b600054610100900460ff1680620002b55750620002b56200034f565b80620002c4575060005460ff16155b620003015760405162461bcd60e51b815260040180806020018281038252602e815260200180620031c1602e913960400191505060405180910390fd5b600054610100900460ff161580156200032d576000805460ff1961ff0019909116610100171660011790555b8115620001cc5760358290558015620001df576000805461ff00191690555050565b303b1590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039857805160ff1916838001178555620003c8565b82800160010185558215620003c8579182015b82811115620003c8578251825591602001919060010190620003ab565b50620003d6929150620003da565b5090565b5b80821115620003d65760008155600101620003db565b612dc080620004016000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630cb2a6bd146100675780633acbe96e146101375780637d73b231146101b4578063877337b0146101d8578063c2c3d054146101f2578063e2b4ce9714610260575b600080fd5b6101356004803603606081101561007d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156100a757600080fd5b8201836020820111156100b957600080fd5b803590602001918460018302840111600160201b831117156100da57600080fd5b919390929091602081019035600160201b8111156100f757600080fd5b82018360208201111561010957600080fd5b803590602001918460018302840111600160201b8311171561012a57600080fd5b509092509050610268565b005b61013f610441565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610179578181015183820152602001610161565b50505050905090810190601f1680156101a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bc6104cf565b604080516001600160a01b039092168252519081900360200190f35b6101e06104de565b60408051918252519081900360200190f35b6101356004803603602081101561020857600080fd5b810190602081018135600160201b81111561022257600080fd5b82018360208201111561023457600080fd5b803590602001918460018302840111600160201b8311171561025557600080fd5b5090925090506104e4565b6101e06105b6565b600080610274876105bc565b965050509450505050816102cf576040805162461bcd60e51b815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b6000806103d188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250506036805460408051602060026000196101006001871615020190941693909304601f810184900484028201840190925281815294509192508301828280156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b505050505086610745565b909250905081156104365760006104256104208a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c6692505050565b610eff565b9050816104338b8383610f12565b50505b505050505050505050565b6036805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104c75780601f1061049c576101008083540402835291602001916104c7565b820191906000526020600020905b8154815290600101906020018083116104aa57829003601f168201915b505050505081565b6033546001600160a01b031690565b60355490565b6104ed33610f98565b610534576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1030b236b4b760691b604482015290519081900360640190fd5b61054060368383612bfd565b507fc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa33838360405180846001600160a01b03168152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b60345490565b60606000806000806000806105d2603554611023565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060006040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561065b57600080fd5b8101908080516040519392919084600160201b82111561067a57600080fd5b90830190602082018581111561068f57600080fd5b8251600160201b8111828201881017156106a857600080fd5b82525081516020918201929091019080838360005b838110156106d55781810151838201526020016106bd565b50505050905090810190601f1680156107025780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979e50929c50909a509850965094509192505050919395979092949650565b60008060a5855114610795576040805162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015290519081900360640190fd5b6041856001815181106107a457fe5b016020015160f81c146107fe576040805162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b6040805160418082526080820190925260609160208201818036833701905050905061082e818760026041611144565b85516060908790604490811061084057fe5b0160200151875160f89190911c90610100908990604390811061085f57fe5b016020015160f81c0201146108b4576040805162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840d0cac2c8cae4e640d8cadccee8d60531b604482015290519081900360640190fd5b60408051606080825260808201909252816020820181803683370190505090506108e2818860456060611144565b6108ed818388611161565b610932576040805162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015290519081900360640190fd5b6040805160148082528183019092526060916020820181803683370190505090506109618183600b6014611144565b60008061096e838961121a565b9092509050816109b4576040805162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206461746560a01b604482015290519081900360640190fd5b60408051602c80825260608281019093526020820181803683370190505090506109e281866034602c611144565b6109eb81611578565b8051906020012060028d6040516020018082805190602001908083835b60208310610a275780518252601f199092019160209182019101610a08565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610a8a5780518252601f199092019160209182019101610a6b565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610ac9573d6000803e3d6000fd5b5050506040513d6020811015610ade57600080fd5b505160408051602081810193909352815180820384018152908201909152805191012014610b53576040805162461bcd60e51b815260206004820152601860248201527f726573756c742068617368206e6f74206d61746368696e670000000000000000604482015290519081900360640190fd5b7f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98a8d604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610bb7578181015183820152602001610b9f565b50505050905090810190601f168015610be45780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610c17578181015183820152602001610bff565b50505050905090810190601f168015610c445780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15060019b909a5098505050505050505050565b60606000826040516020018082805190602001908083835b60208310610c9d5780518252601f199092019160209182019101610c7e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052519050600881118015610ce55750601c8111155b610d2b576040805162461bcd60e51b81526020600482015260126024820152711b5a5cd99bdc9b585d1d1959081a5b9c1d5d60721b604482015290519081900360640190fd5b604080516007808252818301909252606091602082018180368337019050509050610dc081856040516020018082805190602001908083835b60208310610d835780518252601f199092019160209182019101610d64565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260006007611144565b805160208201207f7a2d79c44ec25893f1deb7192af566af2e14c179cce8e62e025bd750d6e078e214610e2c576040805162461bcd60e51b815260206004820152600f60248201526e0e0e4caccd2f040dad2e6dac2e8c6d608b1b604482015290519081900360640190fd5b610e34612c7b565b610e3d85611bbc565b9050610e6b610e64604051806040016040528060018152602001601d60f91b815250611bbc565b8290611be1565b5080600001519250610e9f610e98604051806040016040528060018152602001607d60f81b815250611bbc565b8290611bfb565b508051600019840114610eeb576040805162461bcd60e51b815260206004820152600f60248201526e1b9bdd081a9cdbdb88199bdc9b585d608a1b604482015290519081900360640190fd5b610ef481611c59565b93505050505b919050565b6000610f0c826012611cc0565b92915050565b610f1d603554611023565b6001600160a01b031663d545782e8484846040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b158015610f7b57600080fd5b505af1158015610f8f573d6000803e3d6000fd5b50505050505050565b6000610fa5603454611023565b6001600160a01b03166324d7806c836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d602081101561101b57600080fd5b505192915050565b6033546000906001600160a01b0316611083576040805162461bcd60e51b815260206004820152601d60248201527f454e535265736f6c7661626c65206e6f7420696e697469616c697a6564000000604482015290519081900360640190fd5b60335460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d60208110156110f957600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015610ff157600080fd5b60208481019084840101611159828285612535565b505050505050565b60008060006002866040518082805190602001908083835b602083106111985780518252601f199092019160209182019101611179565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156111d7573d6000803e3d6000fd5b5050506040513d60208110156111ec57600080fd5b505190506111fa8186612573565b845160208601206001600160a01b03918216911614925050509392505050565b600080836040516020018082805190602001908083835b602083106112505780518252601f199092019160209182019101611231565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525160141461128e57fe5b611296612c7b565b61129f85611bbc565b90506112a9612c7b565b6112cb604051806040016040528060018152602001601d60f91b815250611bbc565b90506112d5612c7b565b6112f7604051806040016040528060018152602001600160fd1b815250611bbc565b9050600061131561131061130b8685611be1565b611c59565b6126fc565b90506000811180156113275750602081105b611364576040805162461bcd60e51b81526020600482015260096024820152683230bc9032b93937b960b91b604482015290519081900360640190fd5b600061137b61137661130b8786611be1565b612709565b60ff1690506000811180156113905750600d81105b6113cf576040805162461bcd60e51b815260206004820152600b60248201526a36b7b73a341032b93937b960a91b604482015290519081900360640190fd5b60006113e161131061130b8887611be1565b90506107e1811180156113f55750610bb881105b611433576040805162461bcd60e51b815260206004820152600a6024820152693cb2b0b91032b93937b960b11b604482015290519081900360640190fd5b600061144561131061130b8989611be1565b905060198110611489576040805162461bcd60e51b815260206004820152600a6024820152693437bab91032b93937b960b11b604482015290519081900360640190fd5b600061149b61131061130b8a8a611be1565b9050603c81106114e1576040805162461bcd60e51b815260206004820152600c60248201526b36b4b73aba329032b93937b960a11b604482015290519081900360640190fd5b60006114f361131061130b8b8b611be1565b9050603c8110611539576040805162461bcd60e51b815260206004820152600c60248201526b39b2b1b7b7321032b93937b960a11b604482015290519081900360640190fd5b6402540be4009093026305f5e10090940293909301620f4240909402939093016127109093029290920160649091020101958611979596505050505050565b606060008060008060008651905060608167ffffffffffffffff8111801561159f57600080fd5b506040519080825280601f01601f1916602001820160405280156115ca576020820181803683370190505b509050600080831180156115df575060048306155b611630576040805162461bcd60e51b815260206004820152601760248201527f696e76616c69642062617365363420656e636f64696e67000000000000000000604482015290519081900360640190fd5b7ff30c17f6c257181e11b9ea19fc7d498b2880fcad645a66e130edeab084271f1689600285038151811061166057fe5b01602090810151604080516001600160f81b0319909216828401528051808303600101815260219092019052805191012014156116a257600283039250611710565b7ff30c17f6c257181e11b9ea19fc7d498b2880fcad645a66e130edeab084271f168960018503815181106116d257fe5b01602090810151604080516001600160f81b031990921682840152805180830360010181526021909201905280519101201415611710576001830392505b600319831660005b8181101561192e576040518060a00160405280607b8152602001612cef607b91398b5160018301928d91811061174a57fe5b0160200151815160f89190911c90811061176057fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001612cef607b91398b5160018301928d91811061179757fe5b0160200151815160f89190911c9081106117ad57fe5b602001015160f81c60f81b97506040518060a00160405280607b8152602001612cef607b91398b5160018301928d9181106117e457fe5b0160200151815160f89190911c9081106117fa57fe5b602001015160f81c60f81b96506040518060a00160405280607b8152602001612cef607b91398b5160018301928d91811061183157fe5b0160200151815160f89190911c90811061184757fe5b016020015184516001600160f81b031991821697506001850194603f60fa1b60028d901b1660ff60f41b60048d901c1617909216918691811061188657fe5b60200101906001600160f81b031916908160001a90535083516001840193600f60fc1b60048b901b1660ff60f61b60028b901c16176001600160f81b0319169186919081106118d157fe5b60200101906001600160f81b031916908160001a90535083516001840193600360fe1b60068a901b1688176001600160f81b03191691869190811061191257fe5b60200101906001600160f81b031916908160001a905350611718565b81850360021415611a26576040518060a00160405280607b8152602001612cef607b91398b5160018301928d91811061196357fe5b0160200151815160f89190911c90811061197957fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001612cef607b91398b5160018301928d9181106119b057fe5b0160200151815160f89190911c9081106119c657fe5b602001015160f81c60f81b97506004886001600160f81b031916901c60028a6001600160f81b031916901b1760ff60f81b16848480600101955081518110611a0a57fe5b60200101906001600160f81b031916908160001a905350611bad565b81850360031415611bad576040518060a00160405280607b8152602001612cef607b91398b5160018301928d918110611a5b57fe5b0160200151815160f89190911c908110611a7157fe5b602001015160f81c60f81b98506040518060a00160405280607b8152602001612cef607b91398b5160018301928d918110611aa857fe5b0160200151815160f89190911c908110611abe57fe5b602001015160f81c60f81b97506040518060a00160405280607b8152602001612cef607b91398b5160018301928d918110611af557fe5b0160200151815160f89190911c908110611b0b57fe5b016020015184516001600160f81b031991821698506001850194603f60fa1b60028d901b1660ff60f41b60048d901c16179092169186918110611b4a57fe5b60200101906001600160f81b031916908160001a90535083516001840193600f60fc1b60048b901b1660ff60f61b60028b901c16176001600160f81b031916918691908110611b9557fe5b60200101906001600160f81b031916908160001a9053505b50508152979650505050505050565b611bc4612c7b565b506040805180820190915281518152602082810190820152919050565b611be9612c7b565b611bf4838383612a15565b5092915050565b611c03612c7b565b815183511015611c14575081610f0c565b8151835160208086015190850151910191909103906001908214611c42575082516020840151819020908220145b8015611c5057835185510385525b50929392505050565b606080826000015167ffffffffffffffff81118015611c7757600080fd5b506040519080825280601f01601f191660200182016040528015611ca2576020820181803683370190505b5090506000602082019050611bf48185602001518660000151612535565b60008281808080808080808080805b8b518110156122de578b51600360fc1b908d9083908110611cec57fe5b01602001516001600160f81b03191610801590611d2a57508b51603960f81b908d9083908110611d1857fe5b01602001516001600160f81b03191611155b8015611d34575083155b15611dcc578415611d8657611d4a8a600a612a86565b9950611d79603060f81b60f81c8d8381518110611d6357fe5b01602001518c9160f89190911c0360ff16612ae6565b9950600190970196611dc7565b60019550611d958b600a612a86565b9a50611dc4603060f81b60f81c8d8381518110611dae57fe5b01602001518d9160f89190911c0360ff16612ae6565b9a505b6122d6565b8b51600360fc1b908d9083908110611de057fe5b01602001516001600160f81b03191610801590611e1e57508b51603960f81b908d9083908110611e0c57fe5b01602001516001600160f81b03191611155b8015611e275750835b15611e6d57611e3789600a612a86565b9850611e66603060f81b60f81c8d8381518110611e5057fe5b01602001518b9160f89190911c0360ff16612ae6565b98506122d6565b8b51601760f91b908d9083908110611e8157fe5b01602001516001600160f81b0319161415611f885785611ee0576040805162461bcd60e51b81526020600482015260156024820152741b5a5cdcda5b99c81a5b9d1959dc985b081c185c9d605a1b604482015290519081900360640190fd5b8415611f33576040805162461bcd60e51b815260206004820152601760248201527f6475706c696361746520646563696d616c20706f696e74000000000000000000604482015290519081900360640190fd5b8315611f7f576040805162461bcd60e51b8152602060048201526016602482015275191958da5b585b0818599d195c88195e1c1bdb995b9d60521b604482015290519081900360640190fd5b600194506122d6565b8b51602d60f81b908d9083908110611f9c57fe5b01602001516001600160f81b0319161415612092578215611ff2576040805162461bcd60e51b815260206004820152600b60248201526a6475706c6963617465202d60a81b604482015290519081900360640190fd5b8115612032576040805162461bcd60e51b815260206004820152600a60248201526932bc3a39309039b4b3b760b11b604482015290519081900360640190fd5b808760010114612089576040805162461bcd60e51b815260206004820152601e60248201527f2d207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b600192506122d6565b8b51602b60f81b908d90839081106120a657fe5b01602001516001600160f81b031916141561219c5781156120fc576040805162461bcd60e51b815260206004820152600b60248201526a6475706c6963617465202b60a81b604482015290519081900360640190fd5b821561213c576040805162461bcd60e51b815260206004820152600a60248201526932bc3a39309039b4b3b760b11b604482015290519081900360640190fd5b808760010114612193576040805162461bcd60e51b815260206004820152601e60248201527f2b207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b600191506122d6565b8b51604560f81b908d90839081106121b057fe5b01602001516001600160f81b03191614806121eb57508b51606560f81b908d90839081106121da57fe5b01602001516001600160f81b031916145b15612299578561223a576040805162461bcd60e51b81526020600482015260156024820152741b5a5cdcda5b99c81a5b9d1959dc985b081c185c9d605a1b604482015290519081900360640190fd5b831561228d576040805162461bcd60e51b815260206004820152601960248201527f6475706c6963617465206578706f6e656e742073796d626f6c00000000000000604482015290519081900360640190fd5b600193508096506122d6565b6040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a5908191a59da5d609a1b604482015290519081900360640190fd5b600101611ccf565b82806122e75750815b15612300578660020181116122fb57600080fd5b612315565b83156123155786600101811161231557600080fd5b8215612396578d891061238c57604e8e8a0310612369576040805162461bcd60e51b815260206004820152600d60248201526c6578706f6e656e74203e20373760981b604482015290519081900360640190fd5b8d8903600a0a8b8161237757fe5b049c50610f0c9b505050505050505050505050565b888e039d506123a3565b6123a08e8a612ae6565b9d505b878e1061246b57604e88106123e95760405162461bcd60e51b8152600401808060200182810382526022815260200180612cab6022913960400191505060405180910390fd5b6123f78b600a8a900a612a86565b9a506124038b8b612ae6565b9a50604e888f031061244c576040805162461bcd60e51b815260206004820152600d60248201526c6578706f6e656e74203e20373760981b604482015290519081900360640190fd5b612464888f03600a0a8c612a8690919063ffffffff16565b9a50612522565b8d88039750604e88106124af5760405162461bcd60e51b8152600401808060200182810382526022815260200180612cab6022913960400191505060405180910390fd5b87600a0a8a816124bb57fe5b049950604e8e106124fd5760405162461bcd60e51b8152600401808060200182810382526022815260200180612cab6022913960400191505060405180910390fd5b6125138e600a0a8c612a8690919063ffffffff16565b9a5061251f8b8b612ae6565b9a505b50989d9c50505050505050505050505050565b5b60208110612555578151835260209283019290910190601f1901612536565b905182516020929092036101000a6000190180199091169116179052565b600081516041146125cb576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a601b81148015906125f257508060ff16601c14155b1561262e5760405162461bcd60e51b8152600401808060200182810382526022815260200180612ccd6022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561268a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126f2576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b6000610f0c826000611cc0565b600080826040516020018082805190602001908083835b6020831061273f5780518252601f199092019160209182019101612720565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090507f4a18c9083b936e0757952a5d9d34b5575d427661506fbe9908c2a1da3f3e80d98114156127ae576001915050610efa565b7f78ec83563b948f0ac242d7eaefd592adf65964e11cc27f11ae41faa99a1e990a8114156127e0576002915050610efa565b7f2bab7d3f253ae0e3722abcc2571faced288946968116996ffc3de31fb7348ec3811415612812576003915050610efa565b7fc6f33aba2381b69f05afc78835e501547a9daffa08d674623068c378423ac188811415612844576004915050610efa565b7fdb5ee1006003349b29eda5be5fe34f728659f836a948d4ec595114aebbb159d3811415612876576005915050610efa565b7f44a0046ab54c1458fc3c39dfcadc52509ad809730ec301470d2d747dbe77242d8114156128a8576006915050610efa565b7f74d9e46f10329e61dc333ff1800274be516163110de31961b4e0c61de3e90c5c8114156128da576007915050610efa565b7fed40c08ab6f3d9c5d71155e25b1271d5b9eca8c27bf89e1d2293fcb77c5abf6481141561290c576008915050610efa565b7f7d801199c77197eb9933a633741db90c2c6f3d7d14aca35f5f80a41b4a8863ac81141561293e576009915050610efa565b7fb7841ed82fc96483f061ddc0b19846855df22558c4aea3b3b058ce0d9f1f516481141561297057600a915050610efa565b7f487851233e540dddea8f904d6802590aead5463b1c44965d68348bb7def25cf48114156129a257600b915050610efa565b7f3bd971d8758c58fe0c4d635451404450c5edda87d624a89819e0be5a122933dc8114156129d457600c915050610efa565b6040805162461bcd60e51b81526020600482015260116024820152700dcdee840c240ecc2d8d2c840dadedce8d607b1b604482015290519081900360640190fd5b612a1d612c7b565b6000612a3b8560000151866020015186600001518760200151612b40565b60208087018051918601919091528051820385528651905191925001811415612a675760008552612a7d565b8351835186519101900385528351810160208601525b50909392505050565b600082612a9557506000610f0c565b82820282848281612aa257fe5b0414612adf5760405162461bcd60e51b8152600401808060200182810382526021815260200180612d6a6021913960400191505060405180910390fd5b9392505050565b600082820183811015612adf576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008381868511612bee5760208511612bb35783518251600019600860208990030260020a011991821690888a018890039083165b828114612ba557818610612b93578a8a019650505050505050612bf5565b50600190940180519094908316612b75565b859650505050505050612bf5565b508383206000905b8588038211612bec5785832081811415612bdb5783945050505050612bf5565b506001928301929190910190612bbb565b505b5050508284015b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c3e5782800160ff19823516178555612c6b565b82800160010185558215612c6b579182015b82811115612c6b578235825591602001919060010190612c50565b50612c77929150612c95565b5090565b604051806040016040528060008152602001600081525090565b5b80821115612c775760008155600101612c9656fe6d6f7265207468616e20373720646563696d616c206469676974732070617273656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003f001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212204447c158db41e83881e9b70c32e90caba67d982bb71908a77f1b3fa590f23a9564736f6c634300060c0033436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a983710bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca"

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _ens_ common.Address, _controllerNode_ [32]byte, _tokenWhitelistNode_ [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _ens_, _controllerNode_, _tokenWhitelistNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) CryptoCompareAPIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "cryptoCompareAPIPublicKey")
	return *ret0, err
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCallerSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x0cb2a6bd.
//
// Solidity: function UpdateTokenRate(address _token, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactor) UpdateTokenRate(opts *bind.TransactOpts, _token common.Address, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "UpdateTokenRate", _token, _result, _proof)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x0cb2a6bd.
//
// Solidity: function UpdateTokenRate(address _token, string _result, bytes _proof) returns()
func (_Oracle *OracleSession) UpdateTokenRate(_token common.Address, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _result, _proof)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x0cb2a6bd.
//
// Solidity: function UpdateTokenRate(address _token, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRate(_token common.Address, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _result, _proof)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactor) UpdateCryptoCompareAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateCryptoCompareAPIPublicKey", _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactorSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	Sender    common.Address
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCryptoComparePublicKey is a log parse operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) ParseSetCryptoComparePublicKey(log types.Log) (*OracleSetCryptoComparePublicKey, error) {
	event := new(OracleSetCryptoComparePublicKey)
	if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifiedProof is a log parse operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) ParseVerifiedProof(log types.Log) (*OracleVerifiedProof, error) {
	event := new(OracleVerifiedProof)
	if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
		return nil, err
	}
	return event, nil
}
