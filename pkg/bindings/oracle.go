// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_labels\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8[]\"}],\"name\":\"addTokenBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateRateManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_label\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"supported\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oraclizeAddrResolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenID\",\"type\":\"address\"}],\"name\":\"TokenRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenID\",\"type\":\"address\"}],\"name\":\"TokenAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"TokenAlreadySupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogNewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `608060405234801561001057600080fd5b506040516020806135d88339810180604052810190808051906020019092919050505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1614156100ab57736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47590505b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506134dd806100fb6000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e146100bf57806338bbfa50146101365780633c3821f4146101f357806353e8a550146101fd5780635fa7b5841461026957806367c6e39c146102ac57806381620d9d1461030d578063926e1697146103fc578063b3a7a08714610427578063de6a48e514610474578063e48603391461050a578063f77c4791146105e5575b600080fd5b3480156100cb57600080fd5b506101346004803603810190808035600019169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061063c565b005b34801561014257600080fd5b506101f16004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061067f565b005b6101fb610801565b005b34801561020957600080fd5b50610212610cba565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561025557808201518184015260208101905061023a565b505050509050019250505060405180910390f35b34801561027557600080fd5b506102aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d48565b005b3480156102b857600080fd5b506102f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fdc565b6040518082815260200191505060405180910390f35b34801561031957600080fd5b506103fa60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506111d6565b005b34801561040857600080fd5b5061041161168c565b6040518082815260200191505060405180910390f35b34801561043357600080fd5b50610472600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611699565b005b34801561048057600080fd5b50610508600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050611808565b005b34801561051657600080fd5b5061054b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a43565b60405180806020018560ff1660ff16815260200184815260200183151515158152602001828103825286818151815260200191508051906020019080838360005b838110156105a757808201518184015260208101905061058c565b50505050905090810190601f1680156105d45780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156105f157600080fd5b506105fa611b25565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61067b828260006040519080825280601f01601f1916602001820160405280156106755781602001602082028038833980820191505090505b5061067f565b5050565b600080600061068c611b4b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106c557600080fd5b60086000876000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160030160009054906101000a900460ff16151561076157600080fd5b61077f858360010160009054906101000a900460ff1660ff16611ea9565b90508082600201819055507f492de3ddd6d733b461680f630083e98c567b860343e3f9ac763ee61d7c57b5488382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160009250505050505050565b600061080b613346565b610813613346565b600061081d613346565b6060600060068054905096503073ffffffffffffffffffffffffffffffffffffffff1631876108806040805190810160405280600381526020017f55524c000000000000000000000000000000000000000000000000000000000081525061219d565b021115610940577f621c2856e3b87f81235f8ac8a22bbb40a0142961960710d00b2b6c380902b57e60405180806020018281038252604b8152602001807f4f7261636c697a6520717565727920776173204e4f542073656e742c20706c6581526020017f6173652061646420736f6d652045544820746f20636f76657220666f7220746881526020017f652071756572792066656500000000000000000000000000000000000000000081525060600191505060405180910390a1610cb1565b6109a5606060405190810160405280603781526020017f6a736f6e2868747470733a2f2f6d696e2d6170692e63727970746f636f6d706181526020017f72652e636f6d2f646174612f70726963653f6673796d3d00000000000000000081525061256d565b95506109e56040805190810160405280601981526020017f267473796d733d455448267369676e3d74727565292e4554480000000000000081525061256d565b9450600093505b86841015610cb057610b1060056000600687815481101515610a0a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b505050505061256d565b9250610b3f85610b31610b2c868a61259b90919063ffffffff16565b61256d565b61259b90919063ffffffff16565b9150610b806040805190810160405280600381526020017f55524c00000000000000000000000000000000000000000000000000000000008152508361261d565b9050600684815481101515610b9157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660086000836000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f621c2856e3b87f81235f8ac8a22bbb40a0142961960710d00b2b6c380902b57e6040518080602001828103825260368152602001807f4f7261636c697a65207175657279207761732073656e742c207374616e64696e81526020017f6720627920666f722074686520616e737765722e2e2e0000000000000000000081525060400191505060405180910390a183806001019450506109ec565b5b50505050505050565b60606006805480602002602001604051908101604052809291908181526020018280548015610d3e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610cf4575b5050505050905090565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610da757600080fd5b82600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff161515610e0357600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81549060ff02191690556001600680549050039250600091505b82821015610f7d578373ffffffffffffffffffffffffffffffffffffffff16600683815481101515610e9357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f7057600683815481101515610ee957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600683815481101515610f2357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f7d565b8180600101925050610e65565b6006805480919060019003610f929190613360565b508373ffffffffffffffffffffffffffffffffffffffff167fa8126e187bf99b9fce567e2b20717579dc5a34b14b89437ca936562010549f2460405160405180910390a250505050565b600082600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16151561103a57600080fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541415151561108c57600080fd5b82600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154850281151561111e57fe5b0414151561112857fe5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1660ff16600a0a600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015484028115156111cc57fe5b0491505092915050565b6111de613346565b6111e6613346565b6000806060600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124757600080fd5b8551885114151561125757600080fd5b6112608761256d565b94506112a06040805190810160405280600181526020017f2e0000000000000000000000000000000000000000000000000000000000000081525061256d565b935060016112b78587612bbf90919063ffffffff16565b0192508551831415156112c957600080fd5b600091505b82821015611682576112f16112ec8587612c3690919063ffffffff16565b612c50565b905060056000898481518110151561130557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615156115aa576006888381518110151561137057fe5b9060200190602002015190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600560008a858151811015156113f057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908051906020019061144a92919061338c565b50858281518110151561145957fe5b90602001906020020151600560008a8581518110151561147557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff021916908360ff1602179055506000600560008a858151811015156114e857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506001600560008a8581518110151561154757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff021916908315150217905550611675565b87828151811015156115b857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f6aee19b0228a3012042ca99ee047fd5be17e8dc3dc3728e828d0d7161b1500f1826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561163a57808201518184015260208101905061161f565b50505050905090810190601f1680156116675780820380516001836020036101000a031916815260200191505b509250505060405180910390a25b81806001019250506112ce565b5050505050505050565b6000600680549050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f557600080fd5b81600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16151561175157600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055507f492de3ddd6d733b461680f630083e98c567b860343e3f9ac763ee61d7c57b5488383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561186457600080fd5b82600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff161515156118c157600080fd5b60068490806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506080604051908101604052808481526020018360ff1681526020016000815260200160011515815250600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906119ab92919061340c565b5060208201518160010160006101000a81548160ff021916908360ff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff167ff9e0431c18529070538e77331941c3324f756c75966b725a5206374fdd4470c960405160405180910390a250505050565b6005602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611aef5780601f10611ac457610100808354040283529160200191611aef565b820191906000526020600020905b815481529060010190602001808311611ad257829003601f168201915b5050505050908060010160009054906101000a900460ff16908060020154908060030160009054906101000a900460ff16905084565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611bbb57506000611bb96000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612cb2565b145b15611bcc57611bca6000612cbd565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c5157600080fd5b505af1158015611c65573d6000803e3d6000fd5b505050506040513d6020811015611c7b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611de3576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d6757600080fd5b505af1158015611d7b573d6000803e3d6000fd5b505050506040513d6020811015611d9157600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e6957600080fd5b505af1158015611e7d573d6000803e3d6000fd5b505050506040513d6020811015611e9357600080fd5b8101908080519060200190929190505050905090565b6000606060008060008693506000925060009150600090505b835181101561217e5760307f0100000000000000000000000000000000000000000000000000000000000000028482815181101515611efd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015612015575060397f0100000000000000000000000000000000000000000000000000000000000000028482815181101515611fa557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b156120c657811561203857600086141561202e5761217e565b8580600190039650505b600a830292506030848281518110151561204e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040383019250612171565b602e7f01000000000000000000000000000000000000000000000000000000000000000284828151811015156120f857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561217057600191505b5b8080600101915050611ec2565b60008611156121905785600a0a830292505b8294505050505092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061220d5750600061220b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612cb2565b145b1561221e5761221c6000612cbd565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156122a357600080fd5b505af11580156122b7573d6000803e3d6000fd5b505050506040513d60208110156122cd57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612435576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156123b957600080fd5b505af11580156123cd573d6000803e3d6000fd5b505050506040513d60208110156123e357600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124df5780820151818401526020810190506124c4565b50505050905090810190601f16801561250c5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561252b57600080fd5b505af115801561253f573d6000803e3d6000fd5b505050506040513d602081101561255557600080fd5b81019080805190602001909291905050509050919050565b612575613346565b600060208301905060408051908101604052808451815260200182815250915050919050565b606080600083600001518560000151016040519080825280601f01601f1916602001820160405280156125dd5781602001602082028038833980820191505090505b5091506020820190506125f98186602001518760000151612cce565b6126128560000151820185602001518660000151612cce565b819250505092915050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061268f5750600061268d6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612cb2565b145b156126a05761269e6000612cbd565b505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561272557600080fd5b505af1158015612739573d6000803e3d6000fd5b505050506040513d602081101561274f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156128b7576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561283b57600080fd5b505af115801561284f573d6000803e3d6000fd5b505050506040513d602081101561286557600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612961578082015181840152602081019050612946565b50505050905090810190601f16801561298e5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156129ad57600080fd5b505af11580156129c1573d6000803e3d6000fd5b505050506040513d60208110156129d757600080fd5b8101908080519060200190929190505050905062030d403a02670de0b6b3a764000001811115612a0d5760006001029150612bb8565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015612ac5578082015181840152602081019050612aaa565b50505050905090810190601f168015612af25780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015612b2b578082015181840152602081019050612b10565b50505050905090810190601f168015612b585780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b158015612b7957600080fd5b505af1158015612b8d573d6000803e3d6000fd5b50505050506040513d6020811015612ba457600080fd5b810190808051906020019092919050505091505b5092915050565b6000808260000151612be38560000151866020015186600001518760200151612d19565b0190505b836000015184602001510181111515612c2f5781806001019250508260000151612c27856020015183038660000151038386600001518760200151612d19565b019050612be7565b5092915050565b612c3e613346565b612c49838383612dff565b5092915050565b606080600083600001516040519080825280601f01601f191660200182016040528015612c8c5781602001602082028038833980820191505090505b509150602082019050612ca88185602001518660000151612cce565b8192505050919050565b6000813b9050919050565b6000612cc7612e9d565b9050919050565b60005b602082101515612cf65782518452602084019350602083019250602082039150612cd1565b6001826020036101000a0390508019835116818551168181178652505050505050565b60008060008060008060008060008b97508c8b111515612de95760208b111515612da35760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b84600019168360001916141515612d9b578388101515612d88578c8c019850612def565b8780600101985050858851169250612d64565b879850612def565b8a8a209150600096505b8a8d0387111515612de8578a88209050806000191682600019161415612dd557879850612def565b6001880197508680600101975050612dad565b5b8c8c0198505b5050505050505050949350505050565b612e07613346565b6000612e258560000151866020015186600001518760200151612d19565b90508460200151836020018181525050846020015181038360000181815250508460000151856020015101811415612e67576000856000018181525050612e92565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b600080612ebd731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612cb2565b1115612f5e57731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f556040805190810160405280600b81526020017f6574685f6d61696e6e657400000000000000000000000000000000000000000081525061332c565b60019050613329565b6000612f7d73c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612cb2565b111561301e5773c03a2615d5efaf5f49f60b7bb6583eaec212fdf16000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506130156040805190810160405280600c81526020017f6574685f726f707374656e33000000000000000000000000000000000000000081525061332c565b60019050613329565b600061303d73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612cb2565b11156130de5773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506130d56040805190810160405280600981526020017f6574685f6b6f76616e000000000000000000000000000000000000000000000081525061332c565b60019050613329565b60006130fd73146500cfd35b22e4a392fe0adc06de1a1368ed48612cb2565b111561319e5773146500cfd35b22e4a392fe0adc06de1a1368ed486000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506131956040805190810160405280600b81526020017f6574685f72696e6b65627900000000000000000000000000000000000000000081525061332c565b60019050613329565b60006131bd736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612cb2565b111561322057736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050613329565b600061323f7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612cb2565b11156132a2577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050613329565b60006132c17351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612cb2565b1115613324577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050613329565b600090505b90565b806002908051906020019061334292919061338c565b5050565b604080519081016040528060008152602001600081525090565b81548183558181111561338757818360005260206000209182019101613386919061348c565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133cd57805160ff19168380011785556133fb565b828001600101855582156133fb579182015b828111156133fa5782518255916020019190600101906133df565b5b509050613408919061348c565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061344d57805160ff191683800117855561347b565b8280016001018555821561347b579182015b8281111561347a57825182559160200191906001019061345f565b5b509050613488919061348c565b5090565b6134ae91905b808211156134aa576000816000905550600101613492565b5090565b905600a165627a7a72305820de92dbc8652ad51f7011c46c6a90e5a14650e62d8b7f1310fe79417e662390160029`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _oraclizeAddrResolver common.Address) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _oraclizeAddrResolver)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// ContractAddresses is a free data retrieval call binding the contract method 0x53e8a550.
//
// Solidity: function contractAddresses() constant returns(address[])
func (_Oracle *OracleCaller) ContractAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "contractAddresses")
	return *ret0, err
}

// ContractAddresses is a free data retrieval call binding the contract method 0x53e8a550.
//
// Solidity: function contractAddresses() constant returns(address[])
func (_Oracle *OracleSession) ContractAddresses() ([]common.Address, error) {
	return _Oracle.Contract.ContractAddresses(&_Oracle.CallOpts)
}

// ContractAddresses is a free data retrieval call binding the contract method 0x53e8a550.
//
// Solidity: function contractAddresses() constant returns(address[])
func (_Oracle *OracleCallerSession) ContractAddresses() ([]common.Address, error) {
	return _Oracle.Contract.ContractAddresses(&_Oracle.CallOpts)
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() constant returns(address)
func (_Oracle *OracleCaller) Controller(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "controller")
	return *ret0, err
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() constant returns(address)
func (_Oracle *OracleSession) Controller() (common.Address, error) {
	return _Oracle.Contract.Controller(&_Oracle.CallOpts)
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() constant returns(address)
func (_Oracle *OracleCallerSession) Controller() (common.Address, error) {
	return _Oracle.Contract.Controller(&_Oracle.CallOpts)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, amount uint256) constant returns(uint256)
func (_Oracle *OracleCaller) Convert(opts *bind.CallOpts, _token common.Address, amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "convert", _token, amount)
	return *ret0, err
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, amount uint256) constant returns(uint256)
func (_Oracle *OracleSession) Convert(_token common.Address, amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, amount)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, amount uint256) constant returns(uint256)
func (_Oracle *OracleCallerSession) Convert(_token common.Address, amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, amount)
}

// GetContractAddressesLength is a free data retrieval call binding the contract method 0x926e1697.
//
// Solidity: function getContractAddressesLength() constant returns(uint256)
func (_Oracle *OracleCaller) GetContractAddressesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "getContractAddressesLength")
	return *ret0, err
}

// GetContractAddressesLength is a free data retrieval call binding the contract method 0x926e1697.
//
// Solidity: function getContractAddressesLength() constant returns(uint256)
func (_Oracle *OracleSession) GetContractAddressesLength() (*big.Int, error) {
	return _Oracle.Contract.GetContractAddressesLength(&_Oracle.CallOpts)
}

// GetContractAddressesLength is a free data retrieval call binding the contract method 0x926e1697.
//
// Solidity: function getContractAddressesLength() constant returns(uint256)
func (_Oracle *OracleCallerSession) GetContractAddressesLength() (*big.Int, error) {
	return _Oracle.Contract.GetContractAddressesLength(&_Oracle.CallOpts)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, supported bool)
func (_Oracle *OracleCaller) Tokens(opts *bind.CallOpts, arg0 common.Address) (struct {
	Label     string
	Decimals  uint8
	Rate      *big.Int
	Supported bool
}, error) {
	ret := new(struct {
		Label     string
		Decimals  uint8
		Rate      *big.Int
		Supported bool
	})
	out := ret
	err := _Oracle.contract.Call(opts, out, "tokens", arg0)
	return *ret, err
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, supported bool)
func (_Oracle *OracleSession) Tokens(arg0 common.Address) (struct {
	Label     string
	Decimals  uint8
	Rate      *big.Int
	Supported bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, supported bool)
func (_Oracle *OracleCallerSession) Tokens(arg0 common.Address) (struct {
	Label     string
	Decimals  uint8
	Rate      *big.Int
	Supported bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(queryId bytes32, result string, proof bytes) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, queryId [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", queryId, result, proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(queryId bytes32, result string, proof bytes) returns()
func (_Oracle *OracleSession) Callback(queryId [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, queryId, result, proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(queryId bytes32, result string, proof bytes) returns()
func (_Oracle *OracleTransactorSession) Callback(queryId [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, queryId, result, proof)
}

// AddToken is a paid mutator transaction binding the contract method 0xde6a48e5.
//
// Solidity: function addToken(_token address, _label string, _decimals uint8) returns()
func (_Oracle *OracleTransactor) AddToken(opts *bind.TransactOpts, _token common.Address, _label string, _decimals uint8) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "addToken", _token, _label, _decimals)
}

// AddToken is a paid mutator transaction binding the contract method 0xde6a48e5.
//
// Solidity: function addToken(_token address, _label string, _decimals uint8) returns()
func (_Oracle *OracleSession) AddToken(_token common.Address, _label string, _decimals uint8) (*types.Transaction, error) {
	return _Oracle.Contract.AddToken(&_Oracle.TransactOpts, _token, _label, _decimals)
}

// AddToken is a paid mutator transaction binding the contract method 0xde6a48e5.
//
// Solidity: function addToken(_token address, _label string, _decimals uint8) returns()
func (_Oracle *OracleTransactorSession) AddToken(_token common.Address, _label string, _decimals uint8) (*types.Transaction, error) {
	return _Oracle.Contract.AddToken(&_Oracle.TransactOpts, _token, _label, _decimals)
}

// AddTokenBatch is a paid mutator transaction binding the contract method 0x81620d9d.
//
// Solidity: function addTokenBatch(_tokens address[], _labels string, _decimals uint8[]) returns()
func (_Oracle *OracleTransactor) AddTokenBatch(opts *bind.TransactOpts, _tokens []common.Address, _labels string, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "addTokenBatch", _tokens, _labels, _decimals)
}

// AddTokenBatch is a paid mutator transaction binding the contract method 0x81620d9d.
//
// Solidity: function addTokenBatch(_tokens address[], _labels string, _decimals uint8[]) returns()
func (_Oracle *OracleSession) AddTokenBatch(_tokens []common.Address, _labels string, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokenBatch(&_Oracle.TransactOpts, _tokens, _labels, _decimals)
}

// AddTokenBatch is a paid mutator transaction binding the contract method 0x81620d9d.
//
// Solidity: function addTokenBatch(_tokens address[], _labels string, _decimals uint8[]) returns()
func (_Oracle *OracleTransactorSession) AddTokenBatch(_tokens []common.Address, _labels string, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokenBatch(&_Oracle.TransactOpts, _tokens, _labels, _decimals)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(_token address) returns()
func (_Oracle *OracleTransactor) RemoveToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "removeToken", _token)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(_token address) returns()
func (_Oracle *OracleSession) RemoveToken(_token common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveToken(&_Oracle.TransactOpts, _token)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(_token address) returns()
func (_Oracle *OracleTransactorSession) RemoveToken(_token common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveToken(&_Oracle.TransactOpts, _token)
}

// UpdateRateManual is a paid mutator transaction binding the contract method 0xb3a7a087.
//
// Solidity: function updateRateManual(_token address, rate uint256) returns()
func (_Oracle *OracleTransactor) UpdateRateManual(opts *bind.TransactOpts, _token common.Address, rate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateRateManual", _token, rate)
}

// UpdateRateManual is a paid mutator transaction binding the contract method 0xb3a7a087.
//
// Solidity: function updateRateManual(_token address, rate uint256) returns()
func (_Oracle *OracleSession) UpdateRateManual(_token common.Address, rate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateRateManual(&_Oracle.TransactOpts, _token, rate)
}

// UpdateRateManual is a paid mutator transaction binding the contract method 0xb3a7a087.
//
// Solidity: function updateRateManual(_token address, rate uint256) returns()
func (_Oracle *OracleTransactorSession) UpdateRateManual(_token common.Address, rate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateRateManual(&_Oracle.TransactOpts, _token, rate)
}

// UpdateRates is a paid mutator transaction binding the contract method 0x3c3821f4.
//
// Solidity: function updateRates() returns()
func (_Oracle *OracleTransactor) UpdateRates(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateRates")
}

// UpdateRates is a paid mutator transaction binding the contract method 0x3c3821f4.
//
// Solidity: function updateRates() returns()
func (_Oracle *OracleSession) UpdateRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateRates(&_Oracle.TransactOpts)
}

// UpdateRates is a paid mutator transaction binding the contract method 0x3c3821f4.
//
// Solidity: function updateRates() returns()
func (_Oracle *OracleTransactorSession) UpdateRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateRates(&_Oracle.TransactOpts)
}

// OracleLogNewOraclizeQueryIterator is returned from FilterLogNewOraclizeQuery and is used to iterate over the raw logs and unpacked data for LogNewOraclizeQuery events raised by the Oracle contract.
type OracleLogNewOraclizeQueryIterator struct {
	Event *OracleLogNewOraclizeQuery // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleLogNewOraclizeQueryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleLogNewOraclizeQuery)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleLogNewOraclizeQuery)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleLogNewOraclizeQueryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleLogNewOraclizeQueryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleLogNewOraclizeQuery represents a LogNewOraclizeQuery event raised by the Oracle contract.
type OracleLogNewOraclizeQuery struct {
	Description string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogNewOraclizeQuery is a free log retrieval operation binding the contract event 0x621c2856e3b87f81235f8ac8a22bbb40a0142961960710d00b2b6c380902b57e.
//
// Solidity: e LogNewOraclizeQuery(description string)
func (_Oracle *OracleFilterer) FilterLogNewOraclizeQuery(opts *bind.FilterOpts) (*OracleLogNewOraclizeQueryIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "LogNewOraclizeQuery")
	if err != nil {
		return nil, err
	}
	return &OracleLogNewOraclizeQueryIterator{contract: _Oracle.contract, event: "LogNewOraclizeQuery", logs: logs, sub: sub}, nil
}

// WatchLogNewOraclizeQuery is a free log subscription operation binding the contract event 0x621c2856e3b87f81235f8ac8a22bbb40a0142961960710d00b2b6c380902b57e.
//
// Solidity: e LogNewOraclizeQuery(description string)
func (_Oracle *OracleFilterer) WatchLogNewOraclizeQuery(opts *bind.WatchOpts, sink chan<- *OracleLogNewOraclizeQuery) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "LogNewOraclizeQuery")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleLogNewOraclizeQuery)
				if err := _Oracle.contract.UnpackLog(event, "LogNewOraclizeQuery", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRateUpdatedIterator is returned from FilterRateUpdated and is used to iterate over the raw logs and unpacked data for RateUpdated events raised by the Oracle contract.
type OracleRateUpdatedIterator struct {
	Event *OracleRateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRateUpdated represents a RateUpdated event raised by the Oracle contract.
type OracleRateUpdated struct {
	TokenAddress common.Address
	Rate         *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRateUpdated is a free log retrieval operation binding the contract event 0x492de3ddd6d733b461680f630083e98c567b860343e3f9ac763ee61d7c57b548.
//
// Solidity: e RateUpdated(tokenAddress address, rate uint256)
func (_Oracle *OracleFilterer) FilterRateUpdated(opts *bind.FilterOpts) (*OracleRateUpdatedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RateUpdated")
	if err != nil {
		return nil, err
	}
	return &OracleRateUpdatedIterator{contract: _Oracle.contract, event: "RateUpdated", logs: logs, sub: sub}, nil
}

// WatchRateUpdated is a free log subscription operation binding the contract event 0x492de3ddd6d733b461680f630083e98c567b860343e3f9ac763ee61d7c57b548.
//
// Solidity: e RateUpdated(tokenAddress address, rate uint256)
func (_Oracle *OracleFilterer) WatchRateUpdated(opts *bind.WatchOpts, sink chan<- *OracleRateUpdated) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRateUpdated)
				if err := _Oracle.contract.UnpackLog(event, "RateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleTokenAdditionIterator is returned from FilterTokenAddition and is used to iterate over the raw logs and unpacked data for TokenAddition events raised by the Oracle contract.
type OracleTokenAdditionIterator struct {
	Event *OracleTokenAddition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleTokenAdditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleTokenAddition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleTokenAddition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleTokenAdditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleTokenAdditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleTokenAddition represents a TokenAddition event raised by the Oracle contract.
type OracleTokenAddition struct {
	TokenID common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTokenAddition is a free log retrieval operation binding the contract event 0xf9e0431c18529070538e77331941c3324f756c75966b725a5206374fdd4470c9.
//
// Solidity: e TokenAddition(tokenID indexed address)
func (_Oracle *OracleFilterer) FilterTokenAddition(opts *bind.FilterOpts, tokenID []common.Address) (*OracleTokenAdditionIterator, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "TokenAddition", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &OracleTokenAdditionIterator{contract: _Oracle.contract, event: "TokenAddition", logs: logs, sub: sub}, nil
}

// WatchTokenAddition is a free log subscription operation binding the contract event 0xf9e0431c18529070538e77331941c3324f756c75966b725a5206374fdd4470c9.
//
// Solidity: e TokenAddition(tokenID indexed address)
func (_Oracle *OracleFilterer) WatchTokenAddition(opts *bind.WatchOpts, sink chan<- *OracleTokenAddition, tokenID []common.Address) (event.Subscription, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "TokenAddition", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleTokenAddition)
				if err := _Oracle.contract.UnpackLog(event, "TokenAddition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleTokenAlreadySupportedIterator is returned from FilterTokenAlreadySupported and is used to iterate over the raw logs and unpacked data for TokenAlreadySupported events raised by the Oracle contract.
type OracleTokenAlreadySupportedIterator struct {
	Event *OracleTokenAlreadySupported // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleTokenAlreadySupportedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleTokenAlreadySupported)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleTokenAlreadySupported)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleTokenAlreadySupportedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleTokenAlreadySupportedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleTokenAlreadySupported represents a TokenAlreadySupported event raised by the Oracle contract.
type OracleTokenAlreadySupported struct {
	TokenID common.Address
	Label   string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTokenAlreadySupported is a free log retrieval operation binding the contract event 0x6aee19b0228a3012042ca99ee047fd5be17e8dc3dc3728e828d0d7161b1500f1.
//
// Solidity: e TokenAlreadySupported(tokenID indexed address, label string)
func (_Oracle *OracleFilterer) FilterTokenAlreadySupported(opts *bind.FilterOpts, tokenID []common.Address) (*OracleTokenAlreadySupportedIterator, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "TokenAlreadySupported", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &OracleTokenAlreadySupportedIterator{contract: _Oracle.contract, event: "TokenAlreadySupported", logs: logs, sub: sub}, nil
}

// WatchTokenAlreadySupported is a free log subscription operation binding the contract event 0x6aee19b0228a3012042ca99ee047fd5be17e8dc3dc3728e828d0d7161b1500f1.
//
// Solidity: e TokenAlreadySupported(tokenID indexed address, label string)
func (_Oracle *OracleFilterer) WatchTokenAlreadySupported(opts *bind.WatchOpts, sink chan<- *OracleTokenAlreadySupported, tokenID []common.Address) (event.Subscription, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "TokenAlreadySupported", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleTokenAlreadySupported)
				if err := _Oracle.contract.UnpackLog(event, "TokenAlreadySupported", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleTokenRemovalIterator is returned from FilterTokenRemoval and is used to iterate over the raw logs and unpacked data for TokenRemoval events raised by the Oracle contract.
type OracleTokenRemovalIterator struct {
	Event *OracleTokenRemoval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleTokenRemovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleTokenRemoval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleTokenRemoval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleTokenRemovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleTokenRemovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleTokenRemoval represents a TokenRemoval event raised by the Oracle contract.
type OracleTokenRemoval struct {
	TokenID common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTokenRemoval is a free log retrieval operation binding the contract event 0xa8126e187bf99b9fce567e2b20717579dc5a34b14b89437ca936562010549f24.
//
// Solidity: e TokenRemoval(tokenID indexed address)
func (_Oracle *OracleFilterer) FilterTokenRemoval(opts *bind.FilterOpts, tokenID []common.Address) (*OracleTokenRemovalIterator, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "TokenRemoval", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &OracleTokenRemovalIterator{contract: _Oracle.contract, event: "TokenRemoval", logs: logs, sub: sub}, nil
}

// WatchTokenRemoval is a free log subscription operation binding the contract event 0xa8126e187bf99b9fce567e2b20717579dc5a34b14b89437ca936562010549f24.
//
// Solidity: e TokenRemoval(tokenID indexed address)
func (_Oracle *OracleFilterer) WatchTokenRemoval(opts *bind.WatchOpts, sink chan<- *OracleTokenRemoval, tokenID []common.Address) (event.Subscription, error) {

	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "TokenRemoval", tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleTokenRemoval)
				if err := _Oracle.contract.UnpackLog(event, "TokenRemoval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
