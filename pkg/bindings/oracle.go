// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_labels\",\"type\":\"bytes32[]\"},{\"name\":\"_expDecimals\",\"type\":\"uint256[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"expDecimals\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_controllerName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_expDecimals\",\"type\":\"uint256\"}],\"name\":\"AddedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemovedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"UpdatedTokenRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"Converted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedProofVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePrivateKey\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `60806040523480156200001157600080fd5b506040516060806200546b83398101604081815282516020808501519483015160058054600160a060020a031916600160a060020a03881617905560068190556060850184528385527fa0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a98379185019182527f10bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca9484019490945290939291620000bb9160099162000997565b5060008054600160a060020a031916600160a060020a038516179055620000f06402540be4006401000000006200012d810204565b620001247ff0000000000000000000000000000000000000000000000000000000000000006401000000006200036d810204565b50505062000a39565b600054600160a060020a031615806200016357506000546200016190600160a060020a0316640100000000620005b2810204565b155b1562000180576200017e6000640100000000620005b6810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620001ec57600080fd5b505af115801562000201573d6000803e3d6000fd5b505050506040513d60208110156200021857600080fd5b5051600154600160a060020a03908116911614620002ea576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200029c57600080fd5b505af1158015620002b1573d6000803e3d6000fd5b505050506040513d6020811015620002c857600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156200035157600080fd5b505af115801562000366573d6000803e3d6000fd5b5050505050565b600054600160a060020a03161580620003a35750600054620003a190600160a060020a0316640100000000620005b2810204565b155b15620003c057620003be6000640100000000620005b6810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200042c57600080fd5b505af115801562000441573d6000803e3d6000fd5b505050506040513d60208110156200045857600080fd5b5051600154600160a060020a039081169116146200052a576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620004dc57600080fd5b505af1158015620004f1573d6000803e3d6000fd5b505050506040513d60208110156200050857600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f688dcfd70000000000000000000000000000000000000000000000000000000081527fff00000000000000000000000000000000000000000000000000000000000000841660048201529051600160a060020a039092169163688dcfd79160248082019260009290919082900301818387803b1580156200035157600080fd5b3b90565b6000620005cb640100000000620005d1810204565b92915050565b600080620005fc731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620005b2810204565b11156200067a5760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e6574000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b5060016200097b565b6000620006a473c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620005b2810204565b1115620007195760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e330000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b60006200074373b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620005b2810204565b1115620007b85760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e0000000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b6000620007e273146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620005b2810204565b1115620008575760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b656279000000000000000000000000000000000000000000602082015262000671906401000000006200097e810204565b600062000881736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620005b2810204565b1115620008b7575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016200097b565b6000620008e17320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620005b2810204565b111562000917575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016200097b565b6000620009417351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620005b2810204565b111562000977575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016200097b565b5060005b90565b80516200099390600290602084019062000997565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009da57805160ff191683800117855562000a0a565b8280016001018555821562000a0a579182015b8281111562000a0a578251825591602001919060010190620009ed565b5062000a1892915062000a1c565b5090565b6200097b91905b8082111562000a18576000815560010162000a23565b614a228062000a496000396000f3006080604052600436106100955763ffffffff60e060020a600035041663226ac321811461009a57806327dc297e146100c057806338bbfa501461011e57806367c6e39c146101ba5780636c3824ef146101f057806383d41509146102105780639f6f99ee14610218578063ca6ad1e414610238578063cc20411914610250578063e115cd51146102da578063e486033914610312575b600080fd5b3480156100a657600080fd5b506100be600160a060020a03600435166024356103cb565b005b3480156100cc57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100be9583359536956044949193909101919081908401838280828437509497506104f19650505050505050565b34801561012a57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100be95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506105119650505050505050565b3480156101c657600080fd5b506101de600160a060020a0360043516602435610767565b60408051918252519081900360200190f35b3480156101fc57600080fd5b506100be6004803560248101910135610872565b6100be610c15565b34801561022457600080fd5b506100be6004803560248101910135610c6c565b34801561024457600080fd5b506100be600435610d1a565b34801561025c57600080fd5b50610265610da6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029f578181015183820152602001610287565b50505050905090810190601f1680156102cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e657600080fd5b506100be6024600480358281019290820135918135808301929082013591604435918201910135610e34565b34801561031e57600080fd5b50610333600160a060020a036004351661128c565b604051808060200186815260200185815260200184815260200183151515158152602001828103825287818151815260200191508051906020019080838360005b8381101561038c578181015183820152602001610374565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6103d433611349565b1515610418576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206149b7833981519152604482015290519081900360640190fd5b600160a060020a03821660009081526007602052604090206004015460ff16151561048d576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b600160a060020a03821660008181526007602090815260409182902060028101859055426003909101558151928352820183905280517f0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf069281900390910190a15050565b60408051600081526020810190915261050d9083908390610511565b5050565b60008061051c61150a565b600160a060020a0316331461057b576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f74206f7261636c697a6500000000000000000000604482015290519081900360640190fd5b6000858152600a6020526040902054600160a060020a031691508115156105ec576040805160e560020a62461bcd02815260206004820152601c60248201527f71756572794944206d61746368657320746f2061646472657373203000000000604482015290519081900360640190fd5b50600160a060020a038116600090815260076020908152604091829020600980548451601f6002600019610100600186161502019093169290920491820185900485028101850190955280855291936106a49388938893918301828280156106955780601f1061066a57610100808354040283529160200191610695565b820191906000526020600020905b81548152906001019060200180831161067857829003601f168201915b505050505084600301546116fc565b15610760576106f26106eb856040805190810160405280600381526020017f4554480000000000000000000000000000000000000000000000000000000000815250611f8d565b6012612187565b6002820181905560408051600160a060020a0385168152602081019290925280517f0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf069281900390910190a14260038201556000858152600a602052604090208054600160a060020a03191690555b5050505050565b600160a060020a03821660009081526007602052604081206004810154829060ff1680156107985750600282015415155b15156107ee576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b610819826001015461080d8460020154876122f990919063ffffffff16565b9063ffffffff61233216565b60408051600160a060020a03881681526020810187905280820183905290519192507fe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6919081900360600190a18092505b505092915050565b600080600061088033611349565b15156108c4576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206149b7833981519152604482015290519081900360640190fd5b848480806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050600181511015801561090857506014815111155b151561095e576040805160e560020a62461bcd02815260206004820152601860248201527f696e76616c696420706172616d65746572206c656e6774680000000000000000604482015290519081900360640190fd5b858580806020026020016040519081016040528093929190818152602001838360200280828437505060085485516000955011159250610a11915050576040805160e560020a62461bcd02815260206004820152602560248201527f6d6f7265206164647265737365732070726f7669646564207468616e2065786960448201527f7374696e67000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060005b8151811015610a6c57600760008383815181101515610a3057fe5b6020908102909101810151600160a060020a031682528101919091526040016000206004015460ff161515610a6457600080fd5b600101610a15565b600095505b86861015610c0b57878787818110610a8557fe5b60209081029290920135600160a060020a03166000818152600790935260408320909750919050610ab682826147cc565b5060006001820181905560028201819055600382018190556004909101805460ff1916905593505b600854610af290600163ffffffff61235516565b841015610bb05784600160a060020a0316600885815481101515610b1257fe5b600091825260209091200154600160a060020a03161415610ba55760088054610b4290600163ffffffff61235516565b81548110610b4c57fe5b60009182526020909120015460088054600160a060020a039092169186908110610b7257fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550610bb0565b600190930192610ade565b6008805490610bc3906000198301614810565b5060408051600160a060020a038716815290517fc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d7489181900360200190a1600190950194610a71565b5050505050505050565b610c1e33611349565b1515610c62576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206149b7833981519152604482015290519081900360640190fd5b610c6a61236c565b565b610c7533611349565b1515610cb9576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206149b7833981519152604482015290519081900360640190fd5b610cc560098383614839565b507fbcddb45ee2ba1a718ddbfdeb2a5b711ffd29487c0fecb1f1a0670dbe97fb7e6182826040518080602001828103825284848281815260200192508082843760405192018290039550909350505050a15050565b610d2333611349565b1515610d67576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206149b7833981519152604482015290519081900360640190fd5b610d7081612711565b6040805182815290517f149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c99181900360200190a150565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610e2c5780601f10610e0157610100808354040283529160200191610e2c565b820191906000526020600020905b815481529060010190602001808311610e0f57829003601f168201915b505050505081565b60008060606000610e4433611349565b1515610e88576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206149b7833981519152604482015290519081900360640190fd5b8989808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050506001815110158015610ecc57506014815111155b1515610f22576040805160e560020a62461bcd02815260206004820152601860248201527f696e76616c696420706172616d65746572206c656e6774680000000000000000604482015290519081900360640190fd5b8a8a808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b8151811015610fa957600760008383815181101515610f6e57fe5b6020908102909101810151600160a060020a031682528101919091526040016000206004015460ff1615610fa157600080fd5b600101610f53565b8b8a148015610fb757508b88145b151561100d576040805160e560020a62461bcd02815260206004820152601e60248201527f706172616d65746572206c656e6774687320646f206e6f74206d617463680000604482015290519081900360640190fd5b600096505b8b87101561127d578c8c8881811061102657fe5b60209081029290920135600160a060020a0316600081815260079093526040909220600401549197505060ff16156110a8576040805160e560020a62461bcd02815260206004820152601460248201527f746f6b656e20616c726561647920657869737473000000000000000000000000604482015290519081900360640190fd5b6110ce6110c98c8c8a8181106110ba57fe5b602002919091013590506128fa565b612926565b94508888888181106110dc57fe5b6040805160a08101825289815260209283029490940135848301819052600085830181905242606087015260016080870152600160a060020a038c16815260078452919091208451805192995090935061113a9284929101906148b7565b50602082810151600183810191909155604080850151600285015560608086015160038601556080958601516004909501805460ff19169515159590951790945560088054928301815560009081527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39092018054600160a060020a031916600160a060020a038d1690811790915581519081529081018990528083018481528a519482019490945289517fb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d7316958c958c958c95919392850192908701918190849084905b8381101561123657818101518382015260200161121e565b50505050905090810190601f1680156112635780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600190960195611012565b50505050505050505050505050565b60076020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156113235780601f106112f857610100808354040283529160200191611323565b820191906000526020600020905b81548152906001019060200180831161130657829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b600554600654604080517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481019290925251600092600160a060020a031691630178b8bf91602480830192602092919082900301818787803b1580156113b257600080fd5b505af11580156113c6573d6000803e3d6000fd5b505050506040513d60208110156113dc57600080fd5b5051600654604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561144557600080fd5b505af1158015611459573d6000803e3d6000fd5b505050506040513d602081101561146f57600080fd5b5051604080517fb429afeb000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b429afeb9160248083019260209291908290030181600087803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b505050506040513d602081101561150057600080fd5b505190505b919050565b60008054600160a060020a03161580611535575060005461153390600160a060020a0316612979565b155b1561154657611544600061297d565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561159857600080fd5b505af11580156115ac573d6000803e3d6000fd5b505050506040513d60208110156115c257600080fd5b5051600154600160a060020a03908116911614611677576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561162b57600080fd5b505af115801561163f573d6000803e3d6000fd5b505050506040513d602081101561165557600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600160009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156116ca57600080fd5b505af11580156116de573d6000803e3d6000fd5b505050506040513d60208110156116f457600080fd5b505190505b90565b6000806060600060608060606000808b600181518110151561171a57fe5b90602001015160f860020a900460f860020a0260f860020a90049750876040519080825280601f01601f191660200182016040528015611764578160200160208202803883390190505b5096506117768c60028a8a600061298d565b8c519097508c9060038a0190811061178a57fe5b90602001015160f860020a900460f860020a0260f860020a90048c896002018151811015156117b557fe5b90602001015160f860020a900460f860020a0260f860020a900461010002019550856040519080825280601f01601f191660200182016040528015611804578160200160208202803883390190505b5094506118188c896004018888600061298d565b60408051601e808252818301909252919650602082016103c08038833901905050935061184b856005601e87600061298d565b9350611857848b6129e2565b151561199b577f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8b8e60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b838110156118c55781810151838201526020016118ad565b50505050905090810190601f1680156118f25780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b8381101561192557818101518382015260200161190d565b50505050905090810190601f1680156119525780820380516001836020036101000a031916815260200191505b5093840390525050600481527f6461746500000000000000000000000000000000000000000000000000000000602082015260408051918290030192509050a160009850611f7d565b603486036040519080825280601f01601f1916602001820160405280156119cc578160200160208202803883390190505b5092506119e085603480890386600061298d565b92506119eb83612cda565b6040518082805190602001908083835b60208310611a1a5780518252601f1990920191602091820191016119fb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660028e6040518082805190602001908083835b60208310611a7d5780518252601f199092019160209182019101611a5e565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611abe573d6000803e3d6000fd5b5050506040513d6020811015611ad357600080fd5b5051604080519182525190819003602001902014611c29577f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8b8e60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015611b53578181015183820152602001611b3b565b50505050905090810190601f168015611b805780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b83811015611bb3578181015183820152602001611b9b565b50505050905090810190601f168015611be05780820380516001836020036101000a031916815260200191505b5093840390525050600481527f6861736800000000000000000000000000000000000000000000000000000000602082015260408051918290030192509050a160009850611f7d565b611cbc6002866040518082805190602001908083835b60208310611c5e5780518252601f199092019160209182019101611c3f565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611c9f573d6000803e3d6000fd5b5050506040513d6020811015611cb457600080fd5b50518861359d565b92509050808015611d3557508a6040518082805190602001908083835b60208310611cf85780518252601f199092019160209182019101611cd9565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600160a060020a0390811690861614925050505b15611e43577f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98b8e604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611d9e578181015183820152602001611d86565b50505050905090810190601f168015611dcb5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611dfe578181015183820152602001611de6565b50505050905090810190601f168015611e2b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160019850611f7d565b7f723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c8b8e60405180806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015611eab578181015183820152602001611e93565b50505050905090810190601f168015611ed85780820380516001836020036101000a031916815260200191505b50848103835285518152855160209182019187019080838360005b83811015611f0b578181015183820152602001611ef3565b50505050905090810190601f168015611f385780820380516001836020036101000a031916815260200191505b5093840390525050600981527f7369676e61747572650000000000000000000000000000000000000000000000602082015260408051918290030192509050a1600098505b5050505050505050949350505050565b6060611f97614925565b611f9f614925565b611fa7614925565b611fb086613625565b9250612000611ff36040805190810160405280600181526020017f7b00000000000000000000000000000000000000000000000000000000000000815250613625565b849063ffffffff61364e16565b5061204f6120426040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250613625565b849063ffffffff6136b616565b5061208e6040805190810160405280600181526020017f2200000000000000000000000000000000000000000000000000000000000000815250613625565b91506120d46120c76120b6846120bb6120b66120a98b613625565b889063ffffffff61371c16565b613625565b9063ffffffff61371c16565b849063ffffffff61379316565b506121246121166040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250613625565b84908363ffffffff6137d116565b506121736121666040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250613625565b829063ffffffff61384216565b5061217d81612926565b9695505050505050565b6000828180805b83518110156122dc5783517f3000000000000000000000000000000000000000000000000000000000000000908590839081106121c757fe5b90602001015160f860020a900460f860020a02600160f860020a0319161015801561223d575083517f39000000000000000000000000000000000000000000000000000000000000009085908390811061221d57fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b1561229657811561225c57851515612254576122dc565b600019909501945b600a830292506030848281518110151561227257fe5b90602001015160f860020a900460f860020a0260f860020a900403830192506122d4565b83818151811015156122a457fe5b90602001015160f860020a900460f860020a02600160f860020a031916602e60f860020a0214156122d457600191505b60010161218e565b60008611156122ee5785600a0a830292505b509095945050505050565b60008083151561230c576000915061232b565b5082820282848281151561231c57fe5b041461232757600080fd5b8091505b5092915050565b60008080831161234157600080fd5b828481151561234c57fe5b04949350505050565b6000808383111561236557600080fd5b5050900390565b612374614925565b61237c614925565b600080612387614925565b60085460408051808201909152600381527f55524c000000000000000000000000000000000000000000000000000000000060208201526000913031916123cd90613855565b02111561243957604080516020808252600c908201527f7a65726f2062616c616e636500000000000000000000000000000000000000008183015290517f4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e9181900360600190a1612709565b61249e606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d0000000000000000000000000000815250613625565b95506124de6040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250613625565b9450621e84809350600092505b600854831015612709576125bf6007600060088681548110151561250b57fe5b600091825260208083209190910154600160a060020a0316835282810193909352604091820190208054825160026101006001841615026000190190921691909104601f8101859004850282018501909352828152929091908301828280156125b55780601f1061258a576101008083540402835291602001916125b5565b820191906000526020600020905b81548152906001019060200180831161259857829003601f168201915b5050505050613625565b60408051808201909152600381527f55524c0000000000000000000000000000000000000000000000000000000000602082015290925061261790612611876120bb6120b68b8863ffffffff61371c16565b86613a87565b905060088381548110151561262857fe5b6000918252602080832090910154838352600a90915260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c0561268a83612926565b6040805160208082528351818301528351919283929083019185019080838360005b838110156126c45781810151838201526020016126ac565b50505050905090810190601f1680156126f15780820380516001836020036101000a031916815260200191505b509250505060405180910390a16001909201916124eb565b505050505050565b600054600160a060020a0316158061273b575060005461273990600160a060020a0316612979565b155b1561274c5761274a600061297d565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561279e57600080fd5b505af11580156127b2573d6000803e3d6000fd5b505050506040513d60208110156127c857600080fd5b5051600154600160a060020a0390811691161461287d576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561283157600080fd5b505af1158015612845573d6000803e3d6000fd5b505050506040513d602081101561285b57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156128e357600080fd5b505af1158015610760573d6000803e3d6000fd5b50565b612902614925565b604051602081016040528281528060208301525061291f82613e86565b8152919050565b606080600083600001516040519080825280601f01601f19166020018201604052801561295d578160200160208202803883390190505b50915060208201905061232b8185602001518660000151613f38565b3b90565b6000612987613f7c565b92915050565b606060008060008487019250828651101515156129a957600080fd5b505060208087019084015b8688602001018210156129d5578882015186820152602091820191016129b4565b5093979650505050505050565b60006129ec614925565b6129f4614925565b6129fc614925565b600080600080600080600080612a1061493c565b612a198f613625565b9b50612a596040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250613625565b9a50612a996040805190810160405280600181526020017f2000000000000000000000000000000000000000000000000000000000000000815250613625565b9950612ae9612adc6040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250613625565b8d9063ffffffff61384216565b50612afa8c8b63ffffffff61384216565b50612b18612b116110c98e8d63ffffffff61384216565b6000612187565b9850612b35612b306110c98e8d63ffffffff61384216565b6142a4565b9750612b4d612b116110c98e8d63ffffffff61384216565b9650612b65612b116110c98e8e63ffffffff61384216565b9550612b7d612b116110c98e8e63ffffffff61384216565b9450612b95612b116110c98e8e63ffffffff61384216565b93506107b291505b8661ffff168261ffff161015612bde57612bb682614671565b15612bc9576301e2850083019250612bd3565b6301e13380830192505b600190910190612b9d565b601f8152612beb87614671565b15612bfc57601d6020820152612c04565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8760ff168261ffff161015612c94578061ffff600019840116600c8110612c7657fe5b602002015160ff166201518002830192508180600101925050612c53565b6001890360ff166201518002830192508560ff16610e1002830192508460ff16603c02830192508360ff16830192508d83119c5050505050505050505050505092915050565b60606000806000806000606060008060008a519450846040519080825280601f01601f191660200182016040528015612d1d578160200160208202803883390190505b50604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208c51919550908c906001198801908110612d6657fe5b016020015160408051600160f860020a031960f860020a93849004909302929092168252519081900360010190201415612da557600285039450612e24565b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906000198801908110612de957fe5b016020015160408051600160f860020a031960f860020a93849004909302929092168252519081900360010190201415612e24576001850394505b505060048084040260005b81811015613186576040805160a081018252607b815260006020820152600080516020614997833981519152918101919091526000805160206149d7833981519152606082015260008051602061497783398151915260808201528b5160018301928d918110612e9b57fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612ec157fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061499783398151915281526020016000805160206149d783398151915281526020016000805160206149778339815191528152508b82806001019350815181101515612f3e57fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612f6457fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b81526020016000815260200160008051602061499783398151915281526020016000805160206149d783398151915281526020016000805160206149778339815191528152508b82806001019350815181101515612fe157fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561300757fe5b90602001015160f860020a900460f860020a02965060a060405190810160405280607b81526020016000815260200160008051602061499783398151915281526020016000805160206149d783398151915281526020016000805160206149778339815191528152508b8280600101935081518110151561308457fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156130aa57fe5b0160200151845160f860020a9182900490910296506001840193600160f860020a03198b81166004026010828d160417169186919081106130e757fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c1604171691869190811061312c57fe5b906020010190600160f860020a031916908160001a90535083516001840193600160f860020a031989811660400289171691869190811061316957fe5b906020010190600160f860020a031916908160001a905350612e2f565b81850360021415613318576040805160a081018252607b815260006020820152600080516020614997833981519152918101919091526000805160206149d7833981519152606082015260008051602061497783398151915260808201528b5160018301928d9181106131f557fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561321b57fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061499783398151915281526020016000805160206149d783398151915281526020016000805160206149778339815191528152508b8280600101935081518110151561329857fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156132be57fe5b0160200151845160f860020a9182900490910298506001840193600160f860020a03198b81166004026010828d160417169186919081106132fb57fe5b906020010190600160f860020a031916908160001a90535061358e565b8185036003141561358e576040805160a081018252607b815260006020820152600080516020614997833981519152918101919091526000805160206149d7833981519152606082015260008051602061497783398151915260808201528b5160018301928d91811061338757fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156133ad57fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061499783398151915281526020016000805160206149d783398151915281526020016000805160206149778339815191528152508b8280600101935081518110151561342a57fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561345057fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b81526020016000815260200160008051602061499783398151915281526020016000805160206149d783398151915281526020016000805160206149778339815191528152508b828060010193508151811015156134cd57fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156134f357fe5b0160200151845160f860020a9182900490910297506001840193600160f860020a03198b81166004026010828d1604171691869190811061353057fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c1604171691869190811061357557fe5b906020010190600160f860020a031916908160001a9053505b50508152979650505050505050565b6000806000806000855160411415156135bc576000945084935061361b565b50505060208301516040840151606085015160001a601b60ff821610156135e157601b015b8060ff16601b141580156135f957508060ff16601c14155b1561360a576000945084935061361b565b613616878285856146bf565b945094505b5050509250929050565b61362d614925565b50604080518082019091528151815260208281019082018190525b50919050565b613656614925565b81518351600091111561366b5783915061232b565b5060208083015190840151600191146136935750815160208481015190840151829020919020145b80156136ae5782518451038452825160208501805190910190525b509192915050565b6136be614925565b81518351600091829110156136d55784925061086a565b50508151835160208086015190850151910191909103906001908214613705575082516020840151819020908220145b801561371357835185510385525b50929392505050565b606080600083600001518560000151016040519080825280601f01601f191660200182016040528015613759578160200160208202803883390190505b5091506020820190506137758186602001518760000151613f38565b84516020850151855161378b9284019190613f38565b509392505050565b61379b614925565b60006137b984600001518560200151856000015186602001516146fc565b60208501805186519083039003865252509192915050565b6137d9614925565b60006137f785600001518660200151866000015187602001516146fc565b602080870180519186019190915280518203855286519051919250018114156138235760008552613839565b8351835186519101900385528351810160208601525b50909392505050565b61384a614925565b61232b8383836137d1565b60008054600160a060020a03161580613880575060005461387e90600160a060020a0316612979565b155b156138915761388f600061297d565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156138e357600080fd5b505af11580156138f7573d6000803e3d6000fd5b505050506040513d602081101561390d57600080fd5b5051600154600160a060020a039081169116146139c2576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561397657600080fd5b505af115801561398a573d6000803e3d6000fd5b505050506040513d60208110156139a057600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b83811015613a3b578181015183820152602001613a23565b50505050905090810190601f168015613a685780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156114d657600080fd5b600080548190600160a060020a03161580613ab45750600054613ab290600160a060020a0316612979565b155b15613ac557613ac3600061297d565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613b1757600080fd5b505af1158015613b2b573d6000803e3d6000fd5b505050506040513d6020811015613b4157600080fd5b5051600154600160a060020a03908116911614613bf6576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613baa57600080fd5b505af1158015613bbe573d6000803e3d6000fd5b505050506040513d6020811015613bd457600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810186905260048101918252875160448201528751600160a060020a0390931692632ef3accc9289928892829160640190602086019080838360005b83811015613c76578181015183820152602001613c5e565b50505050905090810190601f168015613ca35780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613cc357600080fd5b505af1158015613cd7573d6000803e3d6000fd5b505050506040513d6020811015613ced57600080fd5b50519050670de0b6b3a76400003a840201811115613d0e576000915061378b565b6001546040517fc51be90f00000000000000000000000000000000000000000000000000000000815260006004820181815260648301879052608060248401908152895160848501528951600160a060020a039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b83811015613da1578181015183820152602001613d89565b50505050905090810190601f168015613dce5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015613e01578181015183820152602001613de9565b50505050905090810190601f168015613e2e5780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b158015613e5057600080fd5b505af1158015613e64573d6000803e3d6000fd5b50505050506040513d6020811015613e7b57600080fd5b505195945050505050565b600080821515613e995760009150613648565b6fffffffffffffffffffffffffffffffff83161515613ecc57601001700100000000000000000000000000000000830492505b67ffffffffffffffff83161515613eef5760080168010000000000000000830492505b63ffffffff83161515613f0a57600401640100000000830492505b61ffff83161515613f215760020162010000830492505b60ff83161515613f2f576001015b60200392915050565b60005b60208210613f5d578251845260209384019390920191601f1990910190613f3b565b50905182516020929092036101000a6000190180199091169116179052565b600080613f9c731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612979565b111561400d5760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152614005906147b9565b5060016116f9565b600061402c73c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612979565b11156140955760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152614005906147b9565b60006140b473b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612979565b111561411d5760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152614005906147b9565b600061413c73146500cfd35b22e4a392fe0adc06de1a1368ed48612979565b11156141a55760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152614005906147b9565b60006141c4736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612979565b11156141f8575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016116f9565b60006142177320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612979565b111561424b575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016116f9565b600061426a7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612979565b111561429e575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016116f9565b50600090565b600080826040518082805190602001908083835b602083106142d75780518252601f1990920191602091820191016142b8565b5181516000196020949094036101000a93909301928316921916919091179052604080519390910183900383207f4a616e0000000000000000000000000000000000000000000000000000000000845290519283900360030190922091945050831415915061434b90505760019150613648565b604080517f46656200000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561438d5760029150613648565b604080517f4d61720000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156143cf5760039150613648565b604080517f4170720000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156144115760049150613648565b604080517f4d61790000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156144535760059150613648565b604080517f4a756e0000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156144955760069150613648565b604080517f4a756c0000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156144d75760079150613648565b604080517f4175670000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156145195760089150613648565b604080517f53657000000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561455b5760099150613648565b604080517f4f637400000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561459d57600a9150613648565b604080517f4e6f760000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156145df57600b9150613648565b604080517f44656300000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561462157600c9150613648565b6040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420612076616c6964206d6f6e7468000000000000000000000000000000604482015290519081900360640190fd5b6000600382161561468457506000611505565b606461ffff83160661ffff161561469d57506001611505565b61019061ffff83160661ffff16156146b757506000611505565b506001919050565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b600083818080808080808c8b116147a65760208b1161476f5760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461476757838810614754578c8c019850611f7d565b878060010198505085885116925061473c565b879850611f7d565b8a8a209150600096505b8a8d0387116147a657508987208181141561479657879850611f7d565b6001978801979690960195614779565b5050509790980198975050505050505050565b805161050d9060029060208401906148b7565b50805460018160011615610100020316600290046000825580601f106147f257506128f7565b601f0160209004906000526020600020908101906128f7919061495c565b8154818355818111156148345760008381526020902061483491810190830161495c565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061487a5782800160ff198235161785556148a7565b828001600101855582156148a7579182015b828111156148a757823582559160200191906001019061488c565b506148b392915061495c565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106148f857805160ff19168380011785556148a7565b828001600101855582156148a7579182015b828111156148a757825182559160200191906001019061490a565b604080518082019091526000808252602082015290565b61018060405190810160405280600c906020820280388339509192915050565b6116f991905b808211156148b357600081556001016149625600001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000073656e646572206973206e6f74206120636f6e74726f6c6c657200000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003fa165627a7a72305820d5faaa0ef7965165e8184aa68ff3a05ab33a488a194379382f671ae467102d670029`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver common.Address, _ens common.Address, _controllerName [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver, _ens, _controllerName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) APIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "APIPublicKey")
	return *ret0, err
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCaller) Convert(opts *bind.CallOpts, _token common.Address, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "convert", _token, _amount)
	return *ret0, err
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCallerSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, expDecimals uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCaller) Tokens(opts *bind.CallOpts, arg0 common.Address) (struct {
	Label       string
	ExpDecimals *big.Int
	Rate        *big.Int
	LastUpdate  *big.Int
	Exists      bool
}, error) {
	ret := new(struct {
		Label       string
		ExpDecimals *big.Int
		Rate        *big.Int
		LastUpdate  *big.Int
		Exists      bool
	})
	out := ret
	err := _Oracle.contract.Call(opts, out, "tokens", arg0)
	return *ret, err
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, expDecimals uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleSession) Tokens(arg0 common.Address) (struct {
	Label       string
	ExpDecimals *big.Int
	Rate        *big.Int
	LastUpdate  *big.Int
	Exists      bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, expDecimals uint256, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCallerSession) Tokens(arg0 common.Address) (struct {
	Label       string
	ExpDecimals *big.Int
	Rate        *big.Int
	LastUpdate  *big.Int
	Exists      bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// AddTokens is a paid mutator transaction binding the contract method 0xe115cd51.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _expDecimals uint256[]) returns()
func (_Oracle *OracleTransactor) AddTokens(opts *bind.TransactOpts, _tokens []common.Address, _labels [][32]byte, _expDecimals []*big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "addTokens", _tokens, _labels, _expDecimals)
}

// AddTokens is a paid mutator transaction binding the contract method 0xe115cd51.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _expDecimals uint256[]) returns()
func (_Oracle *OracleSession) AddTokens(_tokens []common.Address, _labels [][32]byte, _expDecimals []*big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _labels, _expDecimals)
}

// AddTokens is a paid mutator transaction binding the contract method 0xe115cd51.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _expDecimals uint256[]) returns()
func (_Oracle *OracleTransactorSession) AddTokens(_tokens []common.Address, _labels [][32]byte, _expDecimals []*big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _labels, _expDecimals)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactor) RemoveTokens(opts *bind.TransactOpts, _tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "removeTokens", _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactorSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactor) UpdateAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateAPIPublicKey", _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactorSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleTransactor) UpdateTokenRate(opts *bind.TransactOpts, _token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRate", _token, _rate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleSession) UpdateTokenRate(_token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRate(_token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates")
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// OracleAddedTokenIterator is returned from FilterAddedToken and is used to iterate over the raw logs and unpacked data for AddedToken events raised by the Oracle contract.
type OracleAddedTokenIterator struct {
	Event *OracleAddedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleAddedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleAddedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleAddedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleAddedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleAddedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleAddedToken represents a AddedToken event raised by the Oracle contract.
type OracleAddedToken struct {
	Token       common.Address
	Label       string
	ExpDecimals *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAddedToken is a free log retrieval operation binding the contract event 0xb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d7316.
//
// Solidity: e AddedToken(_token address, _label string, _expDecimals uint256)
func (_Oracle *OracleFilterer) FilterAddedToken(opts *bind.FilterOpts) (*OracleAddedTokenIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "AddedToken")
	if err != nil {
		return nil, err
	}
	return &OracleAddedTokenIterator{contract: _Oracle.contract, event: "AddedToken", logs: logs, sub: sub}, nil
}

// WatchAddedToken is a free log subscription operation binding the contract event 0xb6f2706d3a69834d15fc9ebeb046d989f3156d51c469fd99b9f899af1a2d7316.
//
// Solidity: e AddedToken(_token address, _label string, _expDecimals uint256)
func (_Oracle *OracleFilterer) WatchAddedToken(opts *bind.WatchOpts, sink chan<- *OracleAddedToken) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "AddedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleAddedToken)
				if err := _Oracle.contract.UnpackLog(event, "AddedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleConvertedIterator is returned from FilterConverted and is used to iterate over the raw logs and unpacked data for Converted events raised by the Oracle contract.
type OracleConvertedIterator struct {
	Event *OracleConverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleConvertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleConverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleConverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleConvertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleConvertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleConverted represents a Converted event raised by the Oracle contract.
type OracleConverted struct {
	Token  common.Address
	Amount *big.Int
	Ether  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConverted is a free log retrieval operation binding the contract event 0xe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6.
//
// Solidity: e Converted(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) FilterConverted(opts *bind.FilterOpts) (*OracleConvertedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return &OracleConvertedIterator{contract: _Oracle.contract, event: "Converted", logs: logs, sub: sub}, nil
}

// WatchConverted is a free log subscription operation binding the contract event 0xe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6.
//
// Solidity: e Converted(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) WatchConverted(opts *bind.WatchOpts, sink chan<- *OracleConverted) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleConverted)
				if err := _Oracle.contract.UnpackLog(event, "Converted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedProofVerificationIterator is returned from FilterFailedProofVerification and is used to iterate over the raw logs and unpacked data for FailedProofVerification events raised by the Oracle contract.
type OracleFailedProofVerificationIterator struct {
	Event *OracleFailedProofVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedProofVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedProofVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedProofVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedProofVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedProofVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedProofVerification represents a FailedProofVerification event raised by the Oracle contract.
type OracleFailedProofVerification struct {
	PublicKey []byte
	Result    string
	Reason    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterFailedProofVerification is a free log retrieval operation binding the contract event 0x723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c.
//
// Solidity: e FailedProofVerification(_publicKey bytes, _result string, _reason string)
func (_Oracle *OracleFilterer) FilterFailedProofVerification(opts *bind.FilterOpts) (*OracleFailedProofVerificationIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedProofVerification")
	if err != nil {
		return nil, err
	}
	return &OracleFailedProofVerificationIterator{contract: _Oracle.contract, event: "FailedProofVerification", logs: logs, sub: sub}, nil
}

// WatchFailedProofVerification is a free log subscription operation binding the contract event 0x723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c.
//
// Solidity: e FailedProofVerification(_publicKey bytes, _result string, _reason string)
func (_Oracle *OracleFilterer) WatchFailedProofVerification(opts *bind.WatchOpts, sink chan<- *OracleFailedProofVerification) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedProofVerification")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedProofVerification)
				if err := _Oracle.contract.UnpackLog(event, "FailedProofVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: e FailedUpdateRequest(_reason string)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: e FailedUpdateRequest(_reason string)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRemovedTokenIterator is returned from FilterRemovedToken and is used to iterate over the raw logs and unpacked data for RemovedToken events raised by the Oracle contract.
type OracleRemovedTokenIterator struct {
	Event *OracleRemovedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRemovedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRemovedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRemovedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRemovedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRemovedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRemovedToken represents a RemovedToken event raised by the Oracle contract.
type OracleRemovedToken struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRemovedToken is a free log retrieval operation binding the contract event 0xc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d748.
//
// Solidity: e RemovedToken(_token address)
func (_Oracle *OracleFilterer) FilterRemovedToken(opts *bind.FilterOpts) (*OracleRemovedTokenIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RemovedToken")
	if err != nil {
		return nil, err
	}
	return &OracleRemovedTokenIterator{contract: _Oracle.contract, event: "RemovedToken", logs: logs, sub: sub}, nil
}

// WatchRemovedToken is a free log subscription operation binding the contract event 0xc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d748.
//
// Solidity: e RemovedToken(_token address)
func (_Oracle *OracleFilterer) WatchRemovedToken(opts *bind.WatchOpts, sink chan<- *OracleRemovedToken) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RemovedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRemovedToken)
				if err := _Oracle.contract.UnpackLog(event, "RemovedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: e RequestedUpdate(_label string)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: e RequestedUpdate(_label string)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePrivateKeyIterator is returned from FilterSetCryptoComparePrivateKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePrivateKey events raised by the Oracle contract.
type OracleSetCryptoComparePrivateKeyIterator struct {
	Event *OracleSetCryptoComparePrivateKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePrivateKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePrivateKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePrivateKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePrivateKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePrivateKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePrivateKey represents a SetCryptoComparePrivateKey event raised by the Oracle contract.
type OracleSetCryptoComparePrivateKey struct {
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePrivateKey is a free log retrieval operation binding the contract event 0xbcddb45ee2ba1a718ddbfdeb2a5b711ffd29487c0fecb1f1a0670dbe97fb7e61.
//
// Solidity: e SetCryptoComparePrivateKey(_publicKey bytes)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePrivateKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePrivateKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePrivateKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePrivateKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePrivateKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePrivateKey is a free log subscription operation binding the contract event 0xbcddb45ee2ba1a718ddbfdeb2a5b711ffd29487c0fecb1f1a0670dbe97fb7e61.
//
// Solidity: e SetCryptoComparePrivateKey(_publicKey bytes)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePrivateKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePrivateKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePrivateKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePrivateKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePrivateKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleUpdatedTokenRateIterator is returned from FilterUpdatedTokenRate and is used to iterate over the raw logs and unpacked data for UpdatedTokenRate events raised by the Oracle contract.
type OracleUpdatedTokenRateIterator struct {
	Event *OracleUpdatedTokenRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleUpdatedTokenRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleUpdatedTokenRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleUpdatedTokenRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleUpdatedTokenRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleUpdatedTokenRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleUpdatedTokenRate represents a UpdatedTokenRate event raised by the Oracle contract.
type OracleUpdatedTokenRate struct {
	Token common.Address
	Rate  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterUpdatedTokenRate is a free log retrieval operation binding the contract event 0x0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf06.
//
// Solidity: e UpdatedTokenRate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) FilterUpdatedTokenRate(opts *bind.FilterOpts) (*OracleUpdatedTokenRateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "UpdatedTokenRate")
	if err != nil {
		return nil, err
	}
	return &OracleUpdatedTokenRateIterator{contract: _Oracle.contract, event: "UpdatedTokenRate", logs: logs, sub: sub}, nil
}

// WatchUpdatedTokenRate is a free log subscription operation binding the contract event 0x0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf06.
//
// Solidity: e UpdatedTokenRate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) WatchUpdatedTokenRate(opts *bind.WatchOpts, sink chan<- *OracleUpdatedTokenRate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "UpdatedTokenRate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleUpdatedTokenRate)
				if err := _Oracle.contract.UnpackLog(event, "UpdatedTokenRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: e VerifiedProof(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: e VerifiedProof(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
