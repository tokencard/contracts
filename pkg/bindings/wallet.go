// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// WalletABI is the input ABI used to generate the binding from.
const WalletABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"pendingTopupLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelWhitelistAddition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submittedWhitelistAddition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWhitelistRemoval\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submittedTopupLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmWhitelistAddition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWhitelistAddition\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmWhitelistRemoval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelWhitelistRemoval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelSpendLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedSpendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"initializeSpendLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"submitWhitelistRemoval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topupAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"submitWhitelistAddition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmTopupLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"initializeTopupLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelTopupLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmSpendLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNewOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingSpendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"newController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedTopupLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"submitTopupLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submittedSpendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topupLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"submitSpendLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spendAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submittedWhitelistRemoval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topupGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"initializeWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_spendLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TopupLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TopupLimitSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"TopupLimitCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TopupGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SpendLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SpendLimitSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"SpendLimitCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"WhitelistAdditionSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"WhitelistAdditionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"WhitelistRemovalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"WhitelistRemovalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ControllerResolverChanged\",\"type\":\"event\"}]"

// WalletBin is the compiled bytecode used for deploying new contracts.
const WalletBin = `608060405234801561001057600080fd5b50604051608080612b5c833981016040908152815160208301519183015160609093015160008054600160a060020a03958616600160a060020a031991821617909155600180549386169390911692909217909155600781905542600855600955600b80549290911662010000026201000060b060020a03199092169190911790556706f05b59d3b20000600c819055600e55612aaa806100b26000396000f3006080604052600436106101df5763ffffffff60e060020a6000350416630978f5a0811461021b57806322401bde1461024257806326d05ab214610259578063294f4025146102825780633671bb0d146102e75780633af32abf146102fc5780633b98fe841461031d57806347b55a9d146103325780634b730408146103475780635204110c1461035c57806354f599d7146103715780635658eff014610386578063584535691461039b5780636137d670146103b35780636fc95b89146103d357806379ba5097146103e85780637fd004fa146103fd5780638da5cb5b1461041d5780638e112cf91461044e5780638f32d59b146104635780638ff3bf331461047857806395eccddb1461049057806396136585146104a5578063aceaf92d146104ba578063afa0fd9b146104cf578063bbc34f2a146104e4578063beabacc8146104f9578063c8ecaddb14610523578063ca57cb7814610538578063cd96895c14610559578063d3a605861461056e578063d4ee1d9014610586578063d56665901461059b578063d87d2a39146105b0578063d9ec3018146105c5578063dae37fac146105dd578063de212bf3146105f2578063e3d670d714610607578063eca7179214610628578063f2fde38b14610640578063f4199bb814610661575b6040805133815234602082015281517f9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e929181900390910190a1005b34801561022757600080fd5b50610230610681565b60408051918252519081900360200190f35b34801561024e57600080fd5b50610257610687565b005b34801561026557600080fd5b5061026e61071f565b604080519115158252519081900360200190f35b34801561028e57600080fd5b50610297610728565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102d35781810151838201526020016102bb565b505050509050019250505060405180910390f35b3480156102f357600080fd5b5061026e61078b565b34801561030857600080fd5b5061026e600160a060020a0360043516610794565b34801561032957600080fd5b506102576107a9565b34801561033e57600080fd5b50610297610a0c565b34801561035357600080fd5b50610257610a6c565b34801561036857600080fd5b50610257610cd5565b34801561037d57600080fd5b50610257610d6e565b34801561039257600080fd5b5061026e610dff565b3480156103a757600080fd5b50610257600435610e0d565b3480156103bf57600080fd5b506102576004803560248101910135610f35565b3480156103df57600080fd5b5061023061108e565b3480156103f457600080fd5b506102576110b1565b34801561040957600080fd5b506102576004803560248101910135611230565b34801561042957600080fd5b50610432611499565b60408051600160a060020a039092168252519081900360200190f35b34801561045a57600080fd5b506102576114a8565b34801561046f57600080fd5b5061026e6115fc565b34801561048457600080fd5b5061025760043561160d565b34801561049c57600080fd5b506102576117d0565b3480156104b157600080fd5b50610257611861565b3480156104c657600080fd5b5061023061198a565b3480156104db57600080fd5b5061026e611990565b3480156104f057600080fd5b5061026e61199f565b34801561050557600080fd5b50610257600160a060020a03600435811690602435166044356119b0565b34801561052f57600080fd5b50610230611de3565b34801561054457600080fd5b50610257600160a060020a0360043516611de9565b34801561056557600080fd5b5061026e611ead565b34801561057a57600080fd5b50610257600435611ebb565b34801561059257600080fd5b5061043261208b565b3480156105a757600080fd5b5061026e61209a565b3480156105bc57600080fd5b506102306120a3565b3480156105d157600080fd5b506102576004356120a9565b3480156105e957600080fd5b506102306121de565b3480156105fe57600080fd5b5061026e612201565b34801561061357600080fd5b50610230600160a060020a036004351661220f565b34801561063457600080fd5b506102576004356122bd565b34801561064c57600080fd5b50610257600160a060020a03600435166124e7565b34801561066d57600080fd5b50610257600480356024810191013561259a565b600f5481565b61069033612830565b15156106d4576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b6106e060046000612965565b6006805460ff191690556040805133815290517f52b0bc9c244e000beb0e24535b386411b96be4257d9738097806172fb2224b669181900360200190a1565b60065460ff1681565b6060600580548060200260200160405190810160405280929190818152602001828054801561078057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610762575b505050505090505b90565b60105460ff1681565b60036020526000908152604090205460ff1681565b60006107b433612830565b15156107f8576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b60065460ff16151561087a576040805160e560020a62461bcd02815260206004820152602960248201527f77686974656c697374206164646974696f6e20686173206e6f74206265656e2060448201527f7375626d69747465640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6004546000106108fa576040805160e560020a62461bcd02815260206004820152602360248201527f70656e64696e672077686974656c697374206164646974696f6e20697320656d60448201527f7074790000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060005b6004548110156109595760016003600060048481548110151561091d57fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff19169115159190911790556001016108fe565b7fd98606aaa487d6600d0ccc0412dcdf79adc4f37f1deb6a6f9710ee6f458a7fb33360046040518083600160a060020a0316600160a060020a031681526020018060200182810382528381815481526020019150805480156109e457602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116109c6575b5050935050505060405180910390a16109ff60046000612965565b506006805460ff19169055565b6060600480548060200260200160405190810160405280929190818152602001828054801561078057602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610762575050505050905090565b6000610a7733612830565b1515610abb576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b600654610100900460ff161515610b42576040805160e560020a62461bcd02815260206004820152602860248201527f77686974656c6973742072656d6f76616c20686173206e6f74206265656e207360448201527f75626d6974746564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600554600010610bc2576040805160e560020a62461bcd02815260206004820152602260248201527f70656e64696e672077686974656c6973742072656d6f76616c20697320656d7060448201527f7479000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060005b600554811015610c2157600060036000600584815481101515610be557fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff1916911515919091179055600101610bc6565b7f8dcc5cbf3fad6045849f4884bb2e80fc9e15ece7a07ae215b197123807847a0d3360056040518083600160a060020a0316600160a060020a03168152602001806020018281038252838181548152602001915080548015610cac57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610c8e575b5050935050505060405180910390a1610cc760056000612965565b506006805461ff0019169055565b610cde33612830565b1515610d22576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b610d2e60056000612965565b6006805461ff00191690556040805133815290517f8629df681796168db65daa22769456c33e3e8eaf0f9c80e13efff7905e2903819181900360200190a1565b610d7733612830565b1515610dbb576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b6000600a55600b805460ff191690556040805133815290517f18a837b2338e54e45f66b65e880c92515fe1fcbb3ea7f1710674ed479ada749f9181900360200190a1565b600b54610100900460ff1681565b610e156115fc565b1515610e59576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b600b54610100900460ff1615610edf576040805160e560020a62461bcd02815260206004820152602860248201527f7370656e64206c696d69742068617320616c7265616479206265656e20696e6960448201527f7469616c697a6564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610ee8816128ca565b600b805461ff001916610100179055604080513381526020810183905281517f13693f63ecb2f7da8178b895e26f5d32ce3fbd6bba8832ccd970d75116b25f1a929181900390910190a150565b610f3d6115fc565b1515610f81576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b600654610100900460ff16158015610f9c575060065460ff16155b1515611018576040805160e560020a62461bcd02815260206004820152602e60248201527f77686974656c697374206f7065726174696f6e2068617320616c72656164792060448201527f6265656e207375626d6974746564000000000000000000000000000000000000606482015290519081900360840190fd5b61102460058383612983565b506006805461ff0019166101001790556040805160208082528082018490527f56c8087c53ba3bd97430c1270719f4e10315cfb883bd92aacb97effe531f062492859285929091829190820190859085028082843760405192018290039550909350505050a15050565b6000600d5462015180014211156110a85750600c54610788565b50600e54610788565b6110b961199f565b151561110f576040805160e560020a62461bcd02815260206004820152601b60248201527f73656e646572206973206e6f7420746865206e6577206f776e65720000000000604482015290519081900360640190fd5b600254600160a060020a031615156111bd576040805160e560020a62461bcd02815260206004820152604160248201527f6f776e65722063616e6e6f742062652073657420746f2030783030303030303060448201527f303030303030303030303030303030303030303030303030303030303030303060648201527f3000000000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60015460408051600160a060020a039092168252517fb27970c1714b28277b78cc17ac2fe9556e7f048cd48358cffe3dc7d547608fdc9181900360200190a1600280546001805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b6112386115fc565b151561127c576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b815181101561136c576112be611499565b600160a060020a031682828151811015156112d557fe5b60209081029091010151600160a060020a03161415611364576040805160e560020a62461bcd02815260206004820152602d60248201527f70726f76696465642077686974656c69737420636f6e7461696e73207468652060448201527f6f776e6572206164647265737300000000000000000000000000000000000000606482015290519081900360840190fd5b6001016112ad565b60065460ff161580156113875750600654610100900460ff16155b1515611403576040805160e560020a62461bcd02815260206004820152602e60248201527f77686974656c697374206f7065726174696f6e2068617320616c72656164792060448201527f6265656e207375626d6974746564000000000000000000000000000000000000606482015290519081900360840190fd5b61140f60048585612983565b506006805460ff19166001179081905562010000900460ff161515611440576006805462ff00001916620100001790555b7fd9a6feb0b6b0bf85f02a1e3cea31a41fb2b7a92cf5aec53cf6162d30829ce0e884846040518080602001828103825284848281815260200192506020028082843760405192018290039550909350505050a150505050565b600154600160a060020a031690565b6114b133612830565b15156114f5576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b60105460ff161515611577576040805160e560020a62461bcd02815260206004820152602260248201527f746f707570206c696d697420686173206e6f74206265656e207375626d69747460448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600f5466038d7ea4c680001115801561159a57506706f05b59d3b20000600f5411155b15156115a257fe5b6115ad600f546128eb565b600f5460408051338152602081019290925280517f30cdfef434cd0bf85708997856f523c20b62eebe0d780dc0c1d4896a7efd8f2f9281900390910190a16000600f556010805460ff19169055565b600154600160a060020a0316331490565b6116156115fc565b1515611659576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b601054610100900460ff16156116df576040805160e560020a62461bcd02815260206004820152602860248201527f746f707570206c696d69742068617320616c7265616479206265656e20696e6960448201527f7469616c697a6564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8066038d7ea4c68000111580156116fe57506706f05b59d3b200008111155b151561177a576040805160e560020a62461bcd02815260206004820152602c60248201527f746f70757020616d6f756e74206973206f757473696465206f6620746865206d60448201527f696e2f6d61782072616e67650000000000000000000000000000000000000000606482015290519081900360840190fd5b611783816128eb565b6010805461ff001916610100179055604080513381526020810183905281517f30cdfef434cd0bf85708997856f523c20b62eebe0d780dc0c1d4896a7efd8f2f929181900390910190a150565b6117d933612830565b151561181d576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b6000600f556010805460ff191690556040805133815290517f206d7706b533d822ed2b6463324b95061754aa9141df1f79a034250914a6c1829181900360200190a1565b61186a33612830565b15156118ae576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b600b5460ff161515611930576040805160e560020a62461bcd02815260206004820152602260248201527f7370656e64206c696d697420686173206e6f74206265656e207375626d69747460448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61193b600a546128ca565b600a5460408051338152602081019290925280517f13693f63ecb2f7da8178b895e26f5d32ce3fbd6bba8832ccd970d75116b25f1a9281900390910190a1600b805460ff191690556000600a55565b60075481565b60065462010000900460ff1681565b600254600160a060020a0316331490565b60006119ba6115fc565b15156119fe576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b81801515611a56576040805160e560020a62461bcd02815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b600160a060020a03851660009081526003602052604090205460ff161515611c3b57611a8061290b565b600160a060020a03841615611bad57600b60029054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611ae257600080fd5b505af1158015611af6573d6000803e3d6000fd5b505050506040513d6020811015611b0c57600080fd5b5051604080517f67c6e39c000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201879052915191909216916367c6e39c9160448083019260209291908290030181600087803b158015611b7a57600080fd5b505af1158015611b8e573d6000803e3d6000fd5b505050506040513d6020811015611ba457600080fd5b50519150611bb1565b8291505b600954821115611c31576040805160e560020a62461bcd02815260206004820152602d60248201527f7472616e7366657220616d6f756e74206578636565647320617661696c61626c60448201527f65207370656e64206c696d697400000000000000000000000000000000000000606482015290519081900360840190fd5b6009805483900390555b600160a060020a03841615611d5a5783600160a060020a031663a9059cbb86856040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611cad57600080fd5b505af1158015611cc1573d6000803e3d6000fd5b505050506040513d6020811015611cd757600080fd5b50511515611d55576040805160e560020a62461bcd02815260206004820152602560248201527f455243323020746f6b656e207472616e736665722077617320756e737563636560448201527f737366756c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b611d92565b604051600160a060020a0386169084156108fc029085906000818181858888f19350505050158015611d90573d6000803e3d6000fd5b505b60408051600160a060020a0380881682528616602082015280820185905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a15050505050565b600a5481565b611df233612830565b1515611e36576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612a5f833981519152604482015290519081900360640190fd5b60005460408051600160a060020a039283168152918316602083015280517f95d5e19ddf857cd05ebf87d06d1bef8ceab83305a3f833ff72d6cfafbf76f8259281900390910190a16000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b601054610100900460ff1681565b611ec36115fc565b1515611f07576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b60105460ff1615611f88576040805160e560020a62461bcd02815260206004820152602660248201527f746f707570206c696d69742068617320616c7265616479206265656e2073756260448201527f6d69747465640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8066038d7ea4c6800011158015611fa757506706f05b59d3b200008111155b1515612023576040805160e560020a62461bcd02815260206004820152602c60248201527f746f70757020616d6f756e74206973206f757473696465206f6620746865206d60448201527f696e2f6d61782072616e67650000000000000000000000000000000000000000606482015290519081900360840190fd5b600f8190556010805460ff191660011790819055610100900460ff161515612055576010805461ff0019166101001790555b6040805182815290517f58f80b6bbdc1ed8f57adb757fea1942dc103ee0e8145f6c6af899e00e6d1c7649181900360200190a150565b600254600160a060020a031690565b600b5460ff1681565b600c5481565b6120b16115fc565b15156120f5576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b600b5460ff1615612176576040805160e560020a62461bcd02815260206004820152602660248201527f7370656e64206c696d69742068617320616c7265616479206265656e2073756260448201527f6d69747465640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600a819055600b805460ff191660011790819055610100900460ff1615156121a857600b805461ff0019166101001790555b6040805182815290517f5a9022428d76bcf4eea69f5b951c7a06e03f68b46ad277a0f9f91e3aa447b62a9181900360200190a150565b600060085462015180014211156121f85750600754610788565b50600954610788565b600654610100900460ff1681565b6000600160a060020a038216156122b457604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561228157600080fd5b505af1158015612295573d6000803e3d6000fd5b505050506040513d60208110156122ab57600080fd5b505190506122b8565b5030315b919050565b600081801515612317576040805160e560020a62461bcd02815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b61231f6115fc565b8061232e575061232e33612830565b15156123aa576040805160e560020a62461bcd02815260206004820152602b60248201527f73656e646572206973206e65697468657220616e206f776e6572206e6f72206160448201527f20636f6e74726f6c6c6572000000000000000000000000000000000000000000606482015290519081900360840190fd5b6123b2612938565b600e541515612430576040805160e560020a62461bcd028152602060048201526024808201527f617661696c61626c6520746f707570206c696d69742063616e6e6f742062652060448201527f7a65726f00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b829150600e5482111561244357600e5491505b600e80548390039055612454611499565b600160a060020a03166108fc839081150290604051600060405180830381858888f1935050505015801561248c573d6000803e3d6000fd5b507f11bb310b94280c15845698b8ce945817e14456a5d1582e387e6e4a01ef2c6742326124b7611499565b60408051600160a060020a03938416815291909216602082015280820185905290519081900360600190a1505050565b6124ef6115fc565b1515612533576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc686163916020908290030190a150565b60006125a46115fc565b15156125e8576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612a3f833981519152604482015290519081900360640190fd5b8282808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b81518110156126d85761262a611499565b600160a060020a0316828281518110151561264157fe5b60209081029091010151600160a060020a031614156126d0576040805160e560020a62461bcd02815260206004820152602d60248201527f70726f76696465642077686974656c69737420636f6e7461696e73207468652060448201527f6f776e6572206164647265737300000000000000000000000000000000000000606482015290519081900360840190fd5b600101612619565b60065462010000900460ff161561275f576040805160e560020a62461bcd02815260206004820152602660248201527f77686974656c6973742068617320616c7265616479206265656e20696e69746960448201527f616c697a65640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600092505b838310156127bb5760016003600087878781811061277e57fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff191691151591909117905560019290920191612764565b6006805462ff0000191662010000179055604080513380825260208083018481529383018890527fd98606aaa487d6600d0ccc0412dcdf79adc4f37f1deb6a6f9710ee6f458a7fb393919289928992606083019085908502808284376040519201829003965090945050505050a15050505050565b60008054604080517fb429afeb000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b429afeb91602480830192602092919082900301818787803b15801561289857600080fd5b505af11580156128ac573d6000803e3d6000fd5b505050506040513d60208110156128c257600080fd5b505192915050565b6128d261290b565b60078190556009548110156128e8576007546009555b50565b6128f3612938565b600c819055600e548110156128e857600c54600e5550565b600060085462015180014211156128e8575060088054620151804282900381900402019055600754600955565b6000600d5462015180014211156128e85750600d8054620151804282900381900402019055600c54600e55565b50805460008255906000526020600020908101906128e891906129f3565b8280548282559060005260206000209081019282156129e3579160200282015b828111156129e357815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038435161782556020909201916001909101906129a3565b506129ef929150612a0d565b5090565b61078891905b808211156129ef57600081556001016129f9565b61078891905b808211156129ef57805473ffffffffffffffffffffffffffffffffffffffff19168155600101612a13560073656e646572206973206e6f7420616e206f776e65720000000000000000000073656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000a165627a7a72305820b22694123673acc590bf133be8d898b64259dc5f0251e17f56019a6ca77bd4b80029`

// DeployWallet deploys a new Ethereum contract, binding an instance of Wallet to it.
func DeployWallet(auth *bind.TransactOpts, backend bind.ContractBackend, _owner common.Address, _resolver common.Address, _controller common.Address, _spendLimit *big.Int) (common.Address, *types.Transaction, *Wallet, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletBin), backend, _owner, _resolver, _controller, _spendLimit)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Wallet{WalletCaller: WalletCaller{contract: contract}, WalletTransactor: WalletTransactor{contract: contract}, WalletFilterer: WalletFilterer{contract: contract}}, nil
}

// Wallet is an auto generated Go binding around an Ethereum contract.
type Wallet struct {
	WalletCaller     // Read-only binding to the contract
	WalletTransactor // Write-only binding to the contract
	WalletFilterer   // Log filterer for contract events
}

// WalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletSession struct {
	Contract     *Wallet           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletCallerSession struct {
	Contract *WalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// WalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletTransactorSession struct {
	Contract     *WalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletRaw struct {
	Contract *Wallet // Generic contract binding to access the raw methods on
}

// WalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletCallerRaw struct {
	Contract *WalletCaller // Generic read-only contract binding to access the raw methods on
}

// WalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletTransactorRaw struct {
	Contract *WalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWallet creates a new instance of Wallet, bound to a specific deployed contract.
func NewWallet(address common.Address, backend bind.ContractBackend) (*Wallet, error) {
	contract, err := bindWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Wallet{WalletCaller: WalletCaller{contract: contract}, WalletTransactor: WalletTransactor{contract: contract}, WalletFilterer: WalletFilterer{contract: contract}}, nil
}

// NewWalletCaller creates a new read-only instance of Wallet, bound to a specific deployed contract.
func NewWalletCaller(address common.Address, caller bind.ContractCaller) (*WalletCaller, error) {
	contract, err := bindWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCaller{contract: contract}, nil
}

// NewWalletTransactor creates a new write-only instance of Wallet, bound to a specific deployed contract.
func NewWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletTransactor, error) {
	contract, err := bindWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletTransactor{contract: contract}, nil
}

// NewWalletFilterer creates a new log filterer instance of Wallet, bound to a specific deployed contract.
func NewWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletFilterer, error) {
	contract, err := bindWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletFilterer{contract: contract}, nil
}

// bindWallet binds a generic wrapper to an already deployed contract.
func bindWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wallet *WalletRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Wallet.Contract.WalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wallet *WalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.Contract.WalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wallet *WalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wallet.Contract.WalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wallet *WalletCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Wallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wallet *WalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wallet *WalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wallet.Contract.contract.Transact(opts, method, params...)
}

// Balance is a free data retrieval call binding the contract method 0xe3d670d7.
//
// Solidity: function balance(_asset address) constant returns(uint256)
func (_Wallet *WalletCaller) Balance(opts *bind.CallOpts, _asset common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "balance", _asset)
	return *ret0, err
}

// Balance is a free data retrieval call binding the contract method 0xe3d670d7.
//
// Solidity: function balance(_asset address) constant returns(uint256)
func (_Wallet *WalletSession) Balance(_asset common.Address) (*big.Int, error) {
	return _Wallet.Contract.Balance(&_Wallet.CallOpts, _asset)
}

// Balance is a free data retrieval call binding the contract method 0xe3d670d7.
//
// Solidity: function balance(_asset address) constant returns(uint256)
func (_Wallet *WalletCallerSession) Balance(_asset common.Address) (*big.Int, error) {
	return _Wallet.Contract.Balance(&_Wallet.CallOpts, _asset)
}

// InitializedSpendLimit is a free data retrieval call binding the contract method 0x5658eff0.
//
// Solidity: function initializedSpendLimit() constant returns(bool)
func (_Wallet *WalletCaller) InitializedSpendLimit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "initializedSpendLimit")
	return *ret0, err
}

// InitializedSpendLimit is a free data retrieval call binding the contract method 0x5658eff0.
//
// Solidity: function initializedSpendLimit() constant returns(bool)
func (_Wallet *WalletSession) InitializedSpendLimit() (bool, error) {
	return _Wallet.Contract.InitializedSpendLimit(&_Wallet.CallOpts)
}

// InitializedSpendLimit is a free data retrieval call binding the contract method 0x5658eff0.
//
// Solidity: function initializedSpendLimit() constant returns(bool)
func (_Wallet *WalletCallerSession) InitializedSpendLimit() (bool, error) {
	return _Wallet.Contract.InitializedSpendLimit(&_Wallet.CallOpts)
}

// InitializedTopupLimit is a free data retrieval call binding the contract method 0xcd96895c.
//
// Solidity: function initializedTopupLimit() constant returns(bool)
func (_Wallet *WalletCaller) InitializedTopupLimit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "initializedTopupLimit")
	return *ret0, err
}

// InitializedTopupLimit is a free data retrieval call binding the contract method 0xcd96895c.
//
// Solidity: function initializedTopupLimit() constant returns(bool)
func (_Wallet *WalletSession) InitializedTopupLimit() (bool, error) {
	return _Wallet.Contract.InitializedTopupLimit(&_Wallet.CallOpts)
}

// InitializedTopupLimit is a free data retrieval call binding the contract method 0xcd96895c.
//
// Solidity: function initializedTopupLimit() constant returns(bool)
func (_Wallet *WalletCallerSession) InitializedTopupLimit() (bool, error) {
	return _Wallet.Contract.InitializedTopupLimit(&_Wallet.CallOpts)
}

// InitializedWhitelist is a free data retrieval call binding the contract method 0xafa0fd9b.
//
// Solidity: function initializedWhitelist() constant returns(bool)
func (_Wallet *WalletCaller) InitializedWhitelist(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "initializedWhitelist")
	return *ret0, err
}

// InitializedWhitelist is a free data retrieval call binding the contract method 0xafa0fd9b.
//
// Solidity: function initializedWhitelist() constant returns(bool)
func (_Wallet *WalletSession) InitializedWhitelist() (bool, error) {
	return _Wallet.Contract.InitializedWhitelist(&_Wallet.CallOpts)
}

// InitializedWhitelist is a free data retrieval call binding the contract method 0xafa0fd9b.
//
// Solidity: function initializedWhitelist() constant returns(bool)
func (_Wallet *WalletCallerSession) InitializedWhitelist() (bool, error) {
	return _Wallet.Contract.InitializedWhitelist(&_Wallet.CallOpts)
}

// IsNewOwner is a free data retrieval call binding the contract method 0xbbc34f2a.
//
// Solidity: function isNewOwner() constant returns(bool)
func (_Wallet *WalletCaller) IsNewOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "isNewOwner")
	return *ret0, err
}

// IsNewOwner is a free data retrieval call binding the contract method 0xbbc34f2a.
//
// Solidity: function isNewOwner() constant returns(bool)
func (_Wallet *WalletSession) IsNewOwner() (bool, error) {
	return _Wallet.Contract.IsNewOwner(&_Wallet.CallOpts)
}

// IsNewOwner is a free data retrieval call binding the contract method 0xbbc34f2a.
//
// Solidity: function isNewOwner() constant returns(bool)
func (_Wallet *WalletCallerSession) IsNewOwner() (bool, error) {
	return _Wallet.Contract.IsNewOwner(&_Wallet.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Wallet *WalletCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Wallet *WalletSession) IsOwner() (bool, error) {
	return _Wallet.Contract.IsOwner(&_Wallet.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Wallet *WalletCallerSession) IsOwner() (bool, error) {
	return _Wallet.Contract.IsOwner(&_Wallet.CallOpts)
}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted( address) constant returns(bool)
func (_Wallet *WalletCaller) IsWhitelisted(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "isWhitelisted", arg0)
	return *ret0, err
}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted( address) constant returns(bool)
func (_Wallet *WalletSession) IsWhitelisted(arg0 common.Address) (bool, error) {
	return _Wallet.Contract.IsWhitelisted(&_Wallet.CallOpts, arg0)
}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted( address) constant returns(bool)
func (_Wallet *WalletCallerSession) IsWhitelisted(arg0 common.Address) (bool, error) {
	return _Wallet.Contract.IsWhitelisted(&_Wallet.CallOpts, arg0)
}

// NewOwner is a free data retrieval call binding the contract method 0xd4ee1d90.
//
// Solidity: function newOwner() constant returns(address)
func (_Wallet *WalletCaller) NewOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "newOwner")
	return *ret0, err
}

// NewOwner is a free data retrieval call binding the contract method 0xd4ee1d90.
//
// Solidity: function newOwner() constant returns(address)
func (_Wallet *WalletSession) NewOwner() (common.Address, error) {
	return _Wallet.Contract.NewOwner(&_Wallet.CallOpts)
}

// NewOwner is a free data retrieval call binding the contract method 0xd4ee1d90.
//
// Solidity: function newOwner() constant returns(address)
func (_Wallet *WalletCallerSession) NewOwner() (common.Address, error) {
	return _Wallet.Contract.NewOwner(&_Wallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Wallet *WalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Wallet *WalletSession) Owner() (common.Address, error) {
	return _Wallet.Contract.Owner(&_Wallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Wallet *WalletCallerSession) Owner() (common.Address, error) {
	return _Wallet.Contract.Owner(&_Wallet.CallOpts)
}

// PendingSpendLimit is a free data retrieval call binding the contract method 0xc8ecaddb.
//
// Solidity: function pendingSpendLimit() constant returns(uint256)
func (_Wallet *WalletCaller) PendingSpendLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "pendingSpendLimit")
	return *ret0, err
}

// PendingSpendLimit is a free data retrieval call binding the contract method 0xc8ecaddb.
//
// Solidity: function pendingSpendLimit() constant returns(uint256)
func (_Wallet *WalletSession) PendingSpendLimit() (*big.Int, error) {
	return _Wallet.Contract.PendingSpendLimit(&_Wallet.CallOpts)
}

// PendingSpendLimit is a free data retrieval call binding the contract method 0xc8ecaddb.
//
// Solidity: function pendingSpendLimit() constant returns(uint256)
func (_Wallet *WalletCallerSession) PendingSpendLimit() (*big.Int, error) {
	return _Wallet.Contract.PendingSpendLimit(&_Wallet.CallOpts)
}

// PendingTopupLimit is a free data retrieval call binding the contract method 0x0978f5a0.
//
// Solidity: function pendingTopupLimit() constant returns(uint256)
func (_Wallet *WalletCaller) PendingTopupLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "pendingTopupLimit")
	return *ret0, err
}

// PendingTopupLimit is a free data retrieval call binding the contract method 0x0978f5a0.
//
// Solidity: function pendingTopupLimit() constant returns(uint256)
func (_Wallet *WalletSession) PendingTopupLimit() (*big.Int, error) {
	return _Wallet.Contract.PendingTopupLimit(&_Wallet.CallOpts)
}

// PendingTopupLimit is a free data retrieval call binding the contract method 0x0978f5a0.
//
// Solidity: function pendingTopupLimit() constant returns(uint256)
func (_Wallet *WalletCallerSession) PendingTopupLimit() (*big.Int, error) {
	return _Wallet.Contract.PendingTopupLimit(&_Wallet.CallOpts)
}

// PendingWhitelistAddition is a free data retrieval call binding the contract method 0x47b55a9d.
//
// Solidity: function pendingWhitelistAddition() constant returns(address[])
func (_Wallet *WalletCaller) PendingWhitelistAddition(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "pendingWhitelistAddition")
	return *ret0, err
}

// PendingWhitelistAddition is a free data retrieval call binding the contract method 0x47b55a9d.
//
// Solidity: function pendingWhitelistAddition() constant returns(address[])
func (_Wallet *WalletSession) PendingWhitelistAddition() ([]common.Address, error) {
	return _Wallet.Contract.PendingWhitelistAddition(&_Wallet.CallOpts)
}

// PendingWhitelistAddition is a free data retrieval call binding the contract method 0x47b55a9d.
//
// Solidity: function pendingWhitelistAddition() constant returns(address[])
func (_Wallet *WalletCallerSession) PendingWhitelistAddition() ([]common.Address, error) {
	return _Wallet.Contract.PendingWhitelistAddition(&_Wallet.CallOpts)
}

// PendingWhitelistRemoval is a free data retrieval call binding the contract method 0x294f4025.
//
// Solidity: function pendingWhitelistRemoval() constant returns(address[])
func (_Wallet *WalletCaller) PendingWhitelistRemoval(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "pendingWhitelistRemoval")
	return *ret0, err
}

// PendingWhitelistRemoval is a free data retrieval call binding the contract method 0x294f4025.
//
// Solidity: function pendingWhitelistRemoval() constant returns(address[])
func (_Wallet *WalletSession) PendingWhitelistRemoval() ([]common.Address, error) {
	return _Wallet.Contract.PendingWhitelistRemoval(&_Wallet.CallOpts)
}

// PendingWhitelistRemoval is a free data retrieval call binding the contract method 0x294f4025.
//
// Solidity: function pendingWhitelistRemoval() constant returns(address[])
func (_Wallet *WalletCallerSession) PendingWhitelistRemoval() ([]common.Address, error) {
	return _Wallet.Contract.PendingWhitelistRemoval(&_Wallet.CallOpts)
}

// SpendAvailable is a free data retrieval call binding the contract method 0xdae37fac.
//
// Solidity: function spendAvailable() constant returns(uint256)
func (_Wallet *WalletCaller) SpendAvailable(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "spendAvailable")
	return *ret0, err
}

// SpendAvailable is a free data retrieval call binding the contract method 0xdae37fac.
//
// Solidity: function spendAvailable() constant returns(uint256)
func (_Wallet *WalletSession) SpendAvailable() (*big.Int, error) {
	return _Wallet.Contract.SpendAvailable(&_Wallet.CallOpts)
}

// SpendAvailable is a free data retrieval call binding the contract method 0xdae37fac.
//
// Solidity: function spendAvailable() constant returns(uint256)
func (_Wallet *WalletCallerSession) SpendAvailable() (*big.Int, error) {
	return _Wallet.Contract.SpendAvailable(&_Wallet.CallOpts)
}

// SpendLimit is a free data retrieval call binding the contract method 0xaceaf92d.
//
// Solidity: function spendLimit() constant returns(uint256)
func (_Wallet *WalletCaller) SpendLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "spendLimit")
	return *ret0, err
}

// SpendLimit is a free data retrieval call binding the contract method 0xaceaf92d.
//
// Solidity: function spendLimit() constant returns(uint256)
func (_Wallet *WalletSession) SpendLimit() (*big.Int, error) {
	return _Wallet.Contract.SpendLimit(&_Wallet.CallOpts)
}

// SpendLimit is a free data retrieval call binding the contract method 0xaceaf92d.
//
// Solidity: function spendLimit() constant returns(uint256)
func (_Wallet *WalletCallerSession) SpendLimit() (*big.Int, error) {
	return _Wallet.Contract.SpendLimit(&_Wallet.CallOpts)
}

// SubmittedSpendLimit is a free data retrieval call binding the contract method 0xd5666590.
//
// Solidity: function submittedSpendLimit() constant returns(bool)
func (_Wallet *WalletCaller) SubmittedSpendLimit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "submittedSpendLimit")
	return *ret0, err
}

// SubmittedSpendLimit is a free data retrieval call binding the contract method 0xd5666590.
//
// Solidity: function submittedSpendLimit() constant returns(bool)
func (_Wallet *WalletSession) SubmittedSpendLimit() (bool, error) {
	return _Wallet.Contract.SubmittedSpendLimit(&_Wallet.CallOpts)
}

// SubmittedSpendLimit is a free data retrieval call binding the contract method 0xd5666590.
//
// Solidity: function submittedSpendLimit() constant returns(bool)
func (_Wallet *WalletCallerSession) SubmittedSpendLimit() (bool, error) {
	return _Wallet.Contract.SubmittedSpendLimit(&_Wallet.CallOpts)
}

// SubmittedTopupLimit is a free data retrieval call binding the contract method 0x3671bb0d.
//
// Solidity: function submittedTopupLimit() constant returns(bool)
func (_Wallet *WalletCaller) SubmittedTopupLimit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "submittedTopupLimit")
	return *ret0, err
}

// SubmittedTopupLimit is a free data retrieval call binding the contract method 0x3671bb0d.
//
// Solidity: function submittedTopupLimit() constant returns(bool)
func (_Wallet *WalletSession) SubmittedTopupLimit() (bool, error) {
	return _Wallet.Contract.SubmittedTopupLimit(&_Wallet.CallOpts)
}

// SubmittedTopupLimit is a free data retrieval call binding the contract method 0x3671bb0d.
//
// Solidity: function submittedTopupLimit() constant returns(bool)
func (_Wallet *WalletCallerSession) SubmittedTopupLimit() (bool, error) {
	return _Wallet.Contract.SubmittedTopupLimit(&_Wallet.CallOpts)
}

// SubmittedWhitelistAddition is a free data retrieval call binding the contract method 0x26d05ab2.
//
// Solidity: function submittedWhitelistAddition() constant returns(bool)
func (_Wallet *WalletCaller) SubmittedWhitelistAddition(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "submittedWhitelistAddition")
	return *ret0, err
}

// SubmittedWhitelistAddition is a free data retrieval call binding the contract method 0x26d05ab2.
//
// Solidity: function submittedWhitelistAddition() constant returns(bool)
func (_Wallet *WalletSession) SubmittedWhitelistAddition() (bool, error) {
	return _Wallet.Contract.SubmittedWhitelistAddition(&_Wallet.CallOpts)
}

// SubmittedWhitelistAddition is a free data retrieval call binding the contract method 0x26d05ab2.
//
// Solidity: function submittedWhitelistAddition() constant returns(bool)
func (_Wallet *WalletCallerSession) SubmittedWhitelistAddition() (bool, error) {
	return _Wallet.Contract.SubmittedWhitelistAddition(&_Wallet.CallOpts)
}

// SubmittedWhitelistRemoval is a free data retrieval call binding the contract method 0xde212bf3.
//
// Solidity: function submittedWhitelistRemoval() constant returns(bool)
func (_Wallet *WalletCaller) SubmittedWhitelistRemoval(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "submittedWhitelistRemoval")
	return *ret0, err
}

// SubmittedWhitelistRemoval is a free data retrieval call binding the contract method 0xde212bf3.
//
// Solidity: function submittedWhitelistRemoval() constant returns(bool)
func (_Wallet *WalletSession) SubmittedWhitelistRemoval() (bool, error) {
	return _Wallet.Contract.SubmittedWhitelistRemoval(&_Wallet.CallOpts)
}

// SubmittedWhitelistRemoval is a free data retrieval call binding the contract method 0xde212bf3.
//
// Solidity: function submittedWhitelistRemoval() constant returns(bool)
func (_Wallet *WalletCallerSession) SubmittedWhitelistRemoval() (bool, error) {
	return _Wallet.Contract.SubmittedWhitelistRemoval(&_Wallet.CallOpts)
}

// TopupAvailable is a free data retrieval call binding the contract method 0x6fc95b89.
//
// Solidity: function topupAvailable() constant returns(uint256)
func (_Wallet *WalletCaller) TopupAvailable(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "topupAvailable")
	return *ret0, err
}

// TopupAvailable is a free data retrieval call binding the contract method 0x6fc95b89.
//
// Solidity: function topupAvailable() constant returns(uint256)
func (_Wallet *WalletSession) TopupAvailable() (*big.Int, error) {
	return _Wallet.Contract.TopupAvailable(&_Wallet.CallOpts)
}

// TopupAvailable is a free data retrieval call binding the contract method 0x6fc95b89.
//
// Solidity: function topupAvailable() constant returns(uint256)
func (_Wallet *WalletCallerSession) TopupAvailable() (*big.Int, error) {
	return _Wallet.Contract.TopupAvailable(&_Wallet.CallOpts)
}

// TopupLimit is a free data retrieval call binding the contract method 0xd87d2a39.
//
// Solidity: function topupLimit() constant returns(uint256)
func (_Wallet *WalletCaller) TopupLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Wallet.contract.Call(opts, out, "topupLimit")
	return *ret0, err
}

// TopupLimit is a free data retrieval call binding the contract method 0xd87d2a39.
//
// Solidity: function topupLimit() constant returns(uint256)
func (_Wallet *WalletSession) TopupLimit() (*big.Int, error) {
	return _Wallet.Contract.TopupLimit(&_Wallet.CallOpts)
}

// TopupLimit is a free data retrieval call binding the contract method 0xd87d2a39.
//
// Solidity: function topupLimit() constant returns(uint256)
func (_Wallet *WalletCallerSession) TopupLimit() (*big.Int, error) {
	return _Wallet.Contract.TopupLimit(&_Wallet.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Wallet *WalletTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Wallet *WalletSession) AcceptOwnership() (*types.Transaction, error) {
	return _Wallet.Contract.AcceptOwnership(&_Wallet.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_Wallet *WalletTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Wallet.Contract.AcceptOwnership(&_Wallet.TransactOpts)
}

// CancelSpendLimit is a paid mutator transaction binding the contract method 0x54f599d7.
//
// Solidity: function cancelSpendLimit() returns()
func (_Wallet *WalletTransactor) CancelSpendLimit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "cancelSpendLimit")
}

// CancelSpendLimit is a paid mutator transaction binding the contract method 0x54f599d7.
//
// Solidity: function cancelSpendLimit() returns()
func (_Wallet *WalletSession) CancelSpendLimit() (*types.Transaction, error) {
	return _Wallet.Contract.CancelSpendLimit(&_Wallet.TransactOpts)
}

// CancelSpendLimit is a paid mutator transaction binding the contract method 0x54f599d7.
//
// Solidity: function cancelSpendLimit() returns()
func (_Wallet *WalletTransactorSession) CancelSpendLimit() (*types.Transaction, error) {
	return _Wallet.Contract.CancelSpendLimit(&_Wallet.TransactOpts)
}

// CancelTopupLimit is a paid mutator transaction binding the contract method 0x95eccddb.
//
// Solidity: function cancelTopupLimit() returns()
func (_Wallet *WalletTransactor) CancelTopupLimit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "cancelTopupLimit")
}

// CancelTopupLimit is a paid mutator transaction binding the contract method 0x95eccddb.
//
// Solidity: function cancelTopupLimit() returns()
func (_Wallet *WalletSession) CancelTopupLimit() (*types.Transaction, error) {
	return _Wallet.Contract.CancelTopupLimit(&_Wallet.TransactOpts)
}

// CancelTopupLimit is a paid mutator transaction binding the contract method 0x95eccddb.
//
// Solidity: function cancelTopupLimit() returns()
func (_Wallet *WalletTransactorSession) CancelTopupLimit() (*types.Transaction, error) {
	return _Wallet.Contract.CancelTopupLimit(&_Wallet.TransactOpts)
}

// CancelWhitelistAddition is a paid mutator transaction binding the contract method 0x22401bde.
//
// Solidity: function cancelWhitelistAddition() returns()
func (_Wallet *WalletTransactor) CancelWhitelistAddition(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "cancelWhitelistAddition")
}

// CancelWhitelistAddition is a paid mutator transaction binding the contract method 0x22401bde.
//
// Solidity: function cancelWhitelistAddition() returns()
func (_Wallet *WalletSession) CancelWhitelistAddition() (*types.Transaction, error) {
	return _Wallet.Contract.CancelWhitelistAddition(&_Wallet.TransactOpts)
}

// CancelWhitelistAddition is a paid mutator transaction binding the contract method 0x22401bde.
//
// Solidity: function cancelWhitelistAddition() returns()
func (_Wallet *WalletTransactorSession) CancelWhitelistAddition() (*types.Transaction, error) {
	return _Wallet.Contract.CancelWhitelistAddition(&_Wallet.TransactOpts)
}

// CancelWhitelistRemoval is a paid mutator transaction binding the contract method 0x5204110c.
//
// Solidity: function cancelWhitelistRemoval() returns()
func (_Wallet *WalletTransactor) CancelWhitelistRemoval(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "cancelWhitelistRemoval")
}

// CancelWhitelistRemoval is a paid mutator transaction binding the contract method 0x5204110c.
//
// Solidity: function cancelWhitelistRemoval() returns()
func (_Wallet *WalletSession) CancelWhitelistRemoval() (*types.Transaction, error) {
	return _Wallet.Contract.CancelWhitelistRemoval(&_Wallet.TransactOpts)
}

// CancelWhitelistRemoval is a paid mutator transaction binding the contract method 0x5204110c.
//
// Solidity: function cancelWhitelistRemoval() returns()
func (_Wallet *WalletTransactorSession) CancelWhitelistRemoval() (*types.Transaction, error) {
	return _Wallet.Contract.CancelWhitelistRemoval(&_Wallet.TransactOpts)
}

// ConfirmSpendLimit is a paid mutator transaction binding the contract method 0x96136585.
//
// Solidity: function confirmSpendLimit() returns()
func (_Wallet *WalletTransactor) ConfirmSpendLimit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "confirmSpendLimit")
}

// ConfirmSpendLimit is a paid mutator transaction binding the contract method 0x96136585.
//
// Solidity: function confirmSpendLimit() returns()
func (_Wallet *WalletSession) ConfirmSpendLimit() (*types.Transaction, error) {
	return _Wallet.Contract.ConfirmSpendLimit(&_Wallet.TransactOpts)
}

// ConfirmSpendLimit is a paid mutator transaction binding the contract method 0x96136585.
//
// Solidity: function confirmSpendLimit() returns()
func (_Wallet *WalletTransactorSession) ConfirmSpendLimit() (*types.Transaction, error) {
	return _Wallet.Contract.ConfirmSpendLimit(&_Wallet.TransactOpts)
}

// ConfirmTopupLimit is a paid mutator transaction binding the contract method 0x8e112cf9.
//
// Solidity: function confirmTopupLimit() returns()
func (_Wallet *WalletTransactor) ConfirmTopupLimit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "confirmTopupLimit")
}

// ConfirmTopupLimit is a paid mutator transaction binding the contract method 0x8e112cf9.
//
// Solidity: function confirmTopupLimit() returns()
func (_Wallet *WalletSession) ConfirmTopupLimit() (*types.Transaction, error) {
	return _Wallet.Contract.ConfirmTopupLimit(&_Wallet.TransactOpts)
}

// ConfirmTopupLimit is a paid mutator transaction binding the contract method 0x8e112cf9.
//
// Solidity: function confirmTopupLimit() returns()
func (_Wallet *WalletTransactorSession) ConfirmTopupLimit() (*types.Transaction, error) {
	return _Wallet.Contract.ConfirmTopupLimit(&_Wallet.TransactOpts)
}

// ConfirmWhitelistAddition is a paid mutator transaction binding the contract method 0x3b98fe84.
//
// Solidity: function confirmWhitelistAddition() returns()
func (_Wallet *WalletTransactor) ConfirmWhitelistAddition(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "confirmWhitelistAddition")
}

// ConfirmWhitelistAddition is a paid mutator transaction binding the contract method 0x3b98fe84.
//
// Solidity: function confirmWhitelistAddition() returns()
func (_Wallet *WalletSession) ConfirmWhitelistAddition() (*types.Transaction, error) {
	return _Wallet.Contract.ConfirmWhitelistAddition(&_Wallet.TransactOpts)
}

// ConfirmWhitelistAddition is a paid mutator transaction binding the contract method 0x3b98fe84.
//
// Solidity: function confirmWhitelistAddition() returns()
func (_Wallet *WalletTransactorSession) ConfirmWhitelistAddition() (*types.Transaction, error) {
	return _Wallet.Contract.ConfirmWhitelistAddition(&_Wallet.TransactOpts)
}

// ConfirmWhitelistRemoval is a paid mutator transaction binding the contract method 0x4b730408.
//
// Solidity: function confirmWhitelistRemoval() returns()
func (_Wallet *WalletTransactor) ConfirmWhitelistRemoval(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "confirmWhitelistRemoval")
}

// ConfirmWhitelistRemoval is a paid mutator transaction binding the contract method 0x4b730408.
//
// Solidity: function confirmWhitelistRemoval() returns()
func (_Wallet *WalletSession) ConfirmWhitelistRemoval() (*types.Transaction, error) {
	return _Wallet.Contract.ConfirmWhitelistRemoval(&_Wallet.TransactOpts)
}

// ConfirmWhitelistRemoval is a paid mutator transaction binding the contract method 0x4b730408.
//
// Solidity: function confirmWhitelistRemoval() returns()
func (_Wallet *WalletTransactorSession) ConfirmWhitelistRemoval() (*types.Transaction, error) {
	return _Wallet.Contract.ConfirmWhitelistRemoval(&_Wallet.TransactOpts)
}

// InitializeSpendLimit is a paid mutator transaction binding the contract method 0x58453569.
//
// Solidity: function initializeSpendLimit(_amount uint256) returns()
func (_Wallet *WalletTransactor) InitializeSpendLimit(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "initializeSpendLimit", _amount)
}

// InitializeSpendLimit is a paid mutator transaction binding the contract method 0x58453569.
//
// Solidity: function initializeSpendLimit(_amount uint256) returns()
func (_Wallet *WalletSession) InitializeSpendLimit(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.InitializeSpendLimit(&_Wallet.TransactOpts, _amount)
}

// InitializeSpendLimit is a paid mutator transaction binding the contract method 0x58453569.
//
// Solidity: function initializeSpendLimit(_amount uint256) returns()
func (_Wallet *WalletTransactorSession) InitializeSpendLimit(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.InitializeSpendLimit(&_Wallet.TransactOpts, _amount)
}

// InitializeTopupLimit is a paid mutator transaction binding the contract method 0x8ff3bf33.
//
// Solidity: function initializeTopupLimit(_amount uint256) returns()
func (_Wallet *WalletTransactor) InitializeTopupLimit(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "initializeTopupLimit", _amount)
}

// InitializeTopupLimit is a paid mutator transaction binding the contract method 0x8ff3bf33.
//
// Solidity: function initializeTopupLimit(_amount uint256) returns()
func (_Wallet *WalletSession) InitializeTopupLimit(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.InitializeTopupLimit(&_Wallet.TransactOpts, _amount)
}

// InitializeTopupLimit is a paid mutator transaction binding the contract method 0x8ff3bf33.
//
// Solidity: function initializeTopupLimit(_amount uint256) returns()
func (_Wallet *WalletTransactorSession) InitializeTopupLimit(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.InitializeTopupLimit(&_Wallet.TransactOpts, _amount)
}

// InitializeWhitelist is a paid mutator transaction binding the contract method 0xf4199bb8.
//
// Solidity: function initializeWhitelist(_addresses address[]) returns()
func (_Wallet *WalletTransactor) InitializeWhitelist(opts *bind.TransactOpts, _addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "initializeWhitelist", _addresses)
}

// InitializeWhitelist is a paid mutator transaction binding the contract method 0xf4199bb8.
//
// Solidity: function initializeWhitelist(_addresses address[]) returns()
func (_Wallet *WalletSession) InitializeWhitelist(_addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.InitializeWhitelist(&_Wallet.TransactOpts, _addresses)
}

// InitializeWhitelist is a paid mutator transaction binding the contract method 0xf4199bb8.
//
// Solidity: function initializeWhitelist(_addresses address[]) returns()
func (_Wallet *WalletTransactorSession) InitializeWhitelist(_addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.InitializeWhitelist(&_Wallet.TransactOpts, _addresses)
}

// NewController is a paid mutator transaction binding the contract method 0xca57cb78.
//
// Solidity: function newController(_controller address) returns()
func (_Wallet *WalletTransactor) NewController(opts *bind.TransactOpts, _controller common.Address) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "newController", _controller)
}

// NewController is a paid mutator transaction binding the contract method 0xca57cb78.
//
// Solidity: function newController(_controller address) returns()
func (_Wallet *WalletSession) NewController(_controller common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.NewController(&_Wallet.TransactOpts, _controller)
}

// NewController is a paid mutator transaction binding the contract method 0xca57cb78.
//
// Solidity: function newController(_controller address) returns()
func (_Wallet *WalletTransactorSession) NewController(_controller common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.NewController(&_Wallet.TransactOpts, _controller)
}

// SubmitSpendLimit is a paid mutator transaction binding the contract method 0xd9ec3018.
//
// Solidity: function submitSpendLimit(_amount uint256) returns()
func (_Wallet *WalletTransactor) SubmitSpendLimit(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "submitSpendLimit", _amount)
}

// SubmitSpendLimit is a paid mutator transaction binding the contract method 0xd9ec3018.
//
// Solidity: function submitSpendLimit(_amount uint256) returns()
func (_Wallet *WalletSession) SubmitSpendLimit(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.SubmitSpendLimit(&_Wallet.TransactOpts, _amount)
}

// SubmitSpendLimit is a paid mutator transaction binding the contract method 0xd9ec3018.
//
// Solidity: function submitSpendLimit(_amount uint256) returns()
func (_Wallet *WalletTransactorSession) SubmitSpendLimit(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.SubmitSpendLimit(&_Wallet.TransactOpts, _amount)
}

// SubmitTopupLimit is a paid mutator transaction binding the contract method 0xd3a60586.
//
// Solidity: function submitTopupLimit(_amount uint256) returns()
func (_Wallet *WalletTransactor) SubmitTopupLimit(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "submitTopupLimit", _amount)
}

// SubmitTopupLimit is a paid mutator transaction binding the contract method 0xd3a60586.
//
// Solidity: function submitTopupLimit(_amount uint256) returns()
func (_Wallet *WalletSession) SubmitTopupLimit(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.SubmitTopupLimit(&_Wallet.TransactOpts, _amount)
}

// SubmitTopupLimit is a paid mutator transaction binding the contract method 0xd3a60586.
//
// Solidity: function submitTopupLimit(_amount uint256) returns()
func (_Wallet *WalletTransactorSession) SubmitTopupLimit(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.SubmitTopupLimit(&_Wallet.TransactOpts, _amount)
}

// SubmitWhitelistAddition is a paid mutator transaction binding the contract method 0x7fd004fa.
//
// Solidity: function submitWhitelistAddition(_addresses address[]) returns()
func (_Wallet *WalletTransactor) SubmitWhitelistAddition(opts *bind.TransactOpts, _addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "submitWhitelistAddition", _addresses)
}

// SubmitWhitelistAddition is a paid mutator transaction binding the contract method 0x7fd004fa.
//
// Solidity: function submitWhitelistAddition(_addresses address[]) returns()
func (_Wallet *WalletSession) SubmitWhitelistAddition(_addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.SubmitWhitelistAddition(&_Wallet.TransactOpts, _addresses)
}

// SubmitWhitelistAddition is a paid mutator transaction binding the contract method 0x7fd004fa.
//
// Solidity: function submitWhitelistAddition(_addresses address[]) returns()
func (_Wallet *WalletTransactorSession) SubmitWhitelistAddition(_addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.SubmitWhitelistAddition(&_Wallet.TransactOpts, _addresses)
}

// SubmitWhitelistRemoval is a paid mutator transaction binding the contract method 0x6137d670.
//
// Solidity: function submitWhitelistRemoval(_addresses address[]) returns()
func (_Wallet *WalletTransactor) SubmitWhitelistRemoval(opts *bind.TransactOpts, _addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "submitWhitelistRemoval", _addresses)
}

// SubmitWhitelistRemoval is a paid mutator transaction binding the contract method 0x6137d670.
//
// Solidity: function submitWhitelistRemoval(_addresses address[]) returns()
func (_Wallet *WalletSession) SubmitWhitelistRemoval(_addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.SubmitWhitelistRemoval(&_Wallet.TransactOpts, _addresses)
}

// SubmitWhitelistRemoval is a paid mutator transaction binding the contract method 0x6137d670.
//
// Solidity: function submitWhitelistRemoval(_addresses address[]) returns()
func (_Wallet *WalletTransactorSession) SubmitWhitelistRemoval(_addresses []common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.SubmitWhitelistRemoval(&_Wallet.TransactOpts, _addresses)
}

// TopupGas is a paid mutator transaction binding the contract method 0xeca71792.
//
// Solidity: function topupGas(_amount uint256) returns()
func (_Wallet *WalletTransactor) TopupGas(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "topupGas", _amount)
}

// TopupGas is a paid mutator transaction binding the contract method 0xeca71792.
//
// Solidity: function topupGas(_amount uint256) returns()
func (_Wallet *WalletSession) TopupGas(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.TopupGas(&_Wallet.TransactOpts, _amount)
}

// TopupGas is a paid mutator transaction binding the contract method 0xeca71792.
//
// Solidity: function topupGas(_amount uint256) returns()
func (_Wallet *WalletTransactorSession) TopupGas(_amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.TopupGas(&_Wallet.TransactOpts, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(_to address, _asset address, _amount uint256) returns()
func (_Wallet *WalletTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "transfer", _to, _asset, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(_to address, _asset address, _amount uint256) returns()
func (_Wallet *WalletSession) Transfer(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.Transfer(&_Wallet.TransactOpts, _to, _asset, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(_to address, _asset address, _amount uint256) returns()
func (_Wallet *WalletTransactorSession) Transfer(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Wallet.Contract.Transfer(&_Wallet.TransactOpts, _to, _asset, _amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_account address) returns()
func (_Wallet *WalletTransactor) TransferOwnership(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _Wallet.contract.Transact(opts, "transferOwnership", _account)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_account address) returns()
func (_Wallet *WalletSession) TransferOwnership(_account common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.TransferOwnership(&_Wallet.TransactOpts, _account)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_account address) returns()
func (_Wallet *WalletTransactorSession) TransferOwnership(_account common.Address) (*types.Transaction, error) {
	return _Wallet.Contract.TransferOwnership(&_Wallet.TransactOpts, _account)
}

// WalletControllerResolverChangedIterator is returned from FilterControllerResolverChanged and is used to iterate over the raw logs and unpacked data for ControllerResolverChanged events raised by the Wallet contract.
type WalletControllerResolverChangedIterator struct {
	Event *WalletControllerResolverChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletControllerResolverChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletControllerResolverChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletControllerResolverChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletControllerResolverChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletControllerResolverChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletControllerResolverChanged represents a ControllerResolverChanged event raised by the Wallet contract.
type WalletControllerResolverChanged struct {
	Old common.Address
	New common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterControllerResolverChanged is a free log retrieval operation binding the contract event 0x95d5e19ddf857cd05ebf87d06d1bef8ceab83305a3f833ff72d6cfafbf76f825.
//
// Solidity: e ControllerResolverChanged(_old address, _new address)
func (_Wallet *WalletFilterer) FilterControllerResolverChanged(opts *bind.FilterOpts) (*WalletControllerResolverChangedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "ControllerResolverChanged")
	if err != nil {
		return nil, err
	}
	return &WalletControllerResolverChangedIterator{contract: _Wallet.contract, event: "ControllerResolverChanged", logs: logs, sub: sub}, nil
}

// WatchControllerResolverChanged is a free log subscription operation binding the contract event 0x95d5e19ddf857cd05ebf87d06d1bef8ceab83305a3f833ff72d6cfafbf76f825.
//
// Solidity: e ControllerResolverChanged(_old address, _new address)
func (_Wallet *WalletFilterer) WatchControllerResolverChanged(opts *bind.WatchOpts, sink chan<- *WalletControllerResolverChanged) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "ControllerResolverChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletControllerResolverChanged)
				if err := _Wallet.contract.UnpackLog(event, "ControllerResolverChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the Wallet contract.
type WalletDepositReceivedIterator struct {
	Event *WalletDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletDepositReceived represents a DepositReceived event raised by the Wallet contract.
type WalletDepositReceived struct {
	From   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e.
//
// Solidity: e DepositReceived(_from address, _amount uint256)
func (_Wallet *WalletFilterer) FilterDepositReceived(opts *bind.FilterOpts) (*WalletDepositReceivedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return &WalletDepositReceivedIterator{contract: _Wallet.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e.
//
// Solidity: e DepositReceived(_from address, _amount uint256)
func (_Wallet *WalletFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *WalletDepositReceived) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletDepositReceived)
				if err := _Wallet.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletOwnershipAcceptedIterator is returned from FilterOwnershipAccepted and is used to iterate over the raw logs and unpacked data for OwnershipAccepted events raised by the Wallet contract.
type WalletOwnershipAcceptedIterator struct {
	Event *WalletOwnershipAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletOwnershipAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletOwnershipAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletOwnershipAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletOwnershipAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletOwnershipAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletOwnershipAccepted represents a OwnershipAccepted event raised by the Wallet contract.
type WalletOwnershipAccepted struct {
	From common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOwnershipAccepted is a free log retrieval operation binding the contract event 0xb27970c1714b28277b78cc17ac2fe9556e7f048cd48358cffe3dc7d547608fdc.
//
// Solidity: e OwnershipAccepted(_from address)
func (_Wallet *WalletFilterer) FilterOwnershipAccepted(opts *bind.FilterOpts) (*WalletOwnershipAcceptedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "OwnershipAccepted")
	if err != nil {
		return nil, err
	}
	return &WalletOwnershipAcceptedIterator{contract: _Wallet.contract, event: "OwnershipAccepted", logs: logs, sub: sub}, nil
}

// WatchOwnershipAccepted is a free log subscription operation binding the contract event 0xb27970c1714b28277b78cc17ac2fe9556e7f048cd48358cffe3dc7d547608fdc.
//
// Solidity: e OwnershipAccepted(_from address)
func (_Wallet *WalletFilterer) WatchOwnershipAccepted(opts *bind.WatchOpts, sink chan<- *WalletOwnershipAccepted) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "OwnershipAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletOwnershipAccepted)
				if err := _Wallet.contract.UnpackLog(event, "OwnershipAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Wallet contract.
type WalletOwnershipTransferredIterator struct {
	Event *WalletOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletOwnershipTransferred represents a OwnershipTransferred event raised by the Wallet contract.
type WalletOwnershipTransferred struct {
	To  common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc686163.
//
// Solidity: e OwnershipTransferred(_to address)
func (_Wallet *WalletFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts) (*WalletOwnershipTransferredIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "OwnershipTransferred")
	if err != nil {
		return nil, err
	}
	return &WalletOwnershipTransferredIterator{contract: _Wallet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc686163.
//
// Solidity: e OwnershipTransferred(_to address)
func (_Wallet *WalletFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WalletOwnershipTransferred) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "OwnershipTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletOwnershipTransferred)
				if err := _Wallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletSpendLimitCancelledIterator is returned from FilterSpendLimitCancelled and is used to iterate over the raw logs and unpacked data for SpendLimitCancelled events raised by the Wallet contract.
type WalletSpendLimitCancelledIterator struct {
	Event *WalletSpendLimitCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletSpendLimitCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletSpendLimitCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletSpendLimitCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletSpendLimitCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletSpendLimitCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletSpendLimitCancelled represents a SpendLimitCancelled event raised by the Wallet contract.
type WalletSpendLimitCancelled struct {
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSpendLimitCancelled is a free log retrieval operation binding the contract event 0x18a837b2338e54e45f66b65e880c92515fe1fcbb3ea7f1710674ed479ada749f.
//
// Solidity: e SpendLimitCancelled(_sender address)
func (_Wallet *WalletFilterer) FilterSpendLimitCancelled(opts *bind.FilterOpts) (*WalletSpendLimitCancelledIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "SpendLimitCancelled")
	if err != nil {
		return nil, err
	}
	return &WalletSpendLimitCancelledIterator{contract: _Wallet.contract, event: "SpendLimitCancelled", logs: logs, sub: sub}, nil
}

// WatchSpendLimitCancelled is a free log subscription operation binding the contract event 0x18a837b2338e54e45f66b65e880c92515fe1fcbb3ea7f1710674ed479ada749f.
//
// Solidity: e SpendLimitCancelled(_sender address)
func (_Wallet *WalletFilterer) WatchSpendLimitCancelled(opts *bind.WatchOpts, sink chan<- *WalletSpendLimitCancelled) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "SpendLimitCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletSpendLimitCancelled)
				if err := _Wallet.contract.UnpackLog(event, "SpendLimitCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletSpendLimitSetIterator is returned from FilterSpendLimitSet and is used to iterate over the raw logs and unpacked data for SpendLimitSet events raised by the Wallet contract.
type WalletSpendLimitSetIterator struct {
	Event *WalletSpendLimitSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletSpendLimitSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletSpendLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletSpendLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletSpendLimitSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletSpendLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletSpendLimitSet represents a SpendLimitSet event raised by the Wallet contract.
type WalletSpendLimitSet struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSpendLimitSet is a free log retrieval operation binding the contract event 0x13693f63ecb2f7da8178b895e26f5d32ce3fbd6bba8832ccd970d75116b25f1a.
//
// Solidity: e SpendLimitSet(_sender address, _amount uint256)
func (_Wallet *WalletFilterer) FilterSpendLimitSet(opts *bind.FilterOpts) (*WalletSpendLimitSetIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "SpendLimitSet")
	if err != nil {
		return nil, err
	}
	return &WalletSpendLimitSetIterator{contract: _Wallet.contract, event: "SpendLimitSet", logs: logs, sub: sub}, nil
}

// WatchSpendLimitSet is a free log subscription operation binding the contract event 0x13693f63ecb2f7da8178b895e26f5d32ce3fbd6bba8832ccd970d75116b25f1a.
//
// Solidity: e SpendLimitSet(_sender address, _amount uint256)
func (_Wallet *WalletFilterer) WatchSpendLimitSet(opts *bind.WatchOpts, sink chan<- *WalletSpendLimitSet) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "SpendLimitSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletSpendLimitSet)
				if err := _Wallet.contract.UnpackLog(event, "SpendLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletSpendLimitSubmittedIterator is returned from FilterSpendLimitSubmitted and is used to iterate over the raw logs and unpacked data for SpendLimitSubmitted events raised by the Wallet contract.
type WalletSpendLimitSubmittedIterator struct {
	Event *WalletSpendLimitSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletSpendLimitSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletSpendLimitSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletSpendLimitSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletSpendLimitSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletSpendLimitSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletSpendLimitSubmitted represents a SpendLimitSubmitted event raised by the Wallet contract.
type WalletSpendLimitSubmitted struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSpendLimitSubmitted is a free log retrieval operation binding the contract event 0x5a9022428d76bcf4eea69f5b951c7a06e03f68b46ad277a0f9f91e3aa447b62a.
//
// Solidity: e SpendLimitSubmitted(_amount uint256)
func (_Wallet *WalletFilterer) FilterSpendLimitSubmitted(opts *bind.FilterOpts) (*WalletSpendLimitSubmittedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "SpendLimitSubmitted")
	if err != nil {
		return nil, err
	}
	return &WalletSpendLimitSubmittedIterator{contract: _Wallet.contract, event: "SpendLimitSubmitted", logs: logs, sub: sub}, nil
}

// WatchSpendLimitSubmitted is a free log subscription operation binding the contract event 0x5a9022428d76bcf4eea69f5b951c7a06e03f68b46ad277a0f9f91e3aa447b62a.
//
// Solidity: e SpendLimitSubmitted(_amount uint256)
func (_Wallet *WalletFilterer) WatchSpendLimitSubmitted(opts *bind.WatchOpts, sink chan<- *WalletSpendLimitSubmitted) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "SpendLimitSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletSpendLimitSubmitted)
				if err := _Wallet.contract.UnpackLog(event, "SpendLimitSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletTopupGasIterator is returned from FilterTopupGas and is used to iterate over the raw logs and unpacked data for TopupGas events raised by the Wallet contract.
type WalletTopupGasIterator struct {
	Event *WalletTopupGas // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletTopupGasIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletTopupGas)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletTopupGas)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletTopupGasIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletTopupGasIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletTopupGas represents a TopupGas event raised by the Wallet contract.
type WalletTopupGas struct {
	Sender common.Address
	Owner  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTopupGas is a free log retrieval operation binding the contract event 0x11bb310b94280c15845698b8ce945817e14456a5d1582e387e6e4a01ef2c6742.
//
// Solidity: e TopupGas(_sender address, _owner address, _amount uint256)
func (_Wallet *WalletFilterer) FilterTopupGas(opts *bind.FilterOpts) (*WalletTopupGasIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "TopupGas")
	if err != nil {
		return nil, err
	}
	return &WalletTopupGasIterator{contract: _Wallet.contract, event: "TopupGas", logs: logs, sub: sub}, nil
}

// WatchTopupGas is a free log subscription operation binding the contract event 0x11bb310b94280c15845698b8ce945817e14456a5d1582e387e6e4a01ef2c6742.
//
// Solidity: e TopupGas(_sender address, _owner address, _amount uint256)
func (_Wallet *WalletFilterer) WatchTopupGas(opts *bind.WatchOpts, sink chan<- *WalletTopupGas) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "TopupGas")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletTopupGas)
				if err := _Wallet.contract.UnpackLog(event, "TopupGas", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletTopupLimitCancelledIterator is returned from FilterTopupLimitCancelled and is used to iterate over the raw logs and unpacked data for TopupLimitCancelled events raised by the Wallet contract.
type WalletTopupLimitCancelledIterator struct {
	Event *WalletTopupLimitCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletTopupLimitCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletTopupLimitCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletTopupLimitCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletTopupLimitCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletTopupLimitCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletTopupLimitCancelled represents a TopupLimitCancelled event raised by the Wallet contract.
type WalletTopupLimitCancelled struct {
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTopupLimitCancelled is a free log retrieval operation binding the contract event 0x206d7706b533d822ed2b6463324b95061754aa9141df1f79a034250914a6c182.
//
// Solidity: e TopupLimitCancelled(_sender address)
func (_Wallet *WalletFilterer) FilterTopupLimitCancelled(opts *bind.FilterOpts) (*WalletTopupLimitCancelledIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "TopupLimitCancelled")
	if err != nil {
		return nil, err
	}
	return &WalletTopupLimitCancelledIterator{contract: _Wallet.contract, event: "TopupLimitCancelled", logs: logs, sub: sub}, nil
}

// WatchTopupLimitCancelled is a free log subscription operation binding the contract event 0x206d7706b533d822ed2b6463324b95061754aa9141df1f79a034250914a6c182.
//
// Solidity: e TopupLimitCancelled(_sender address)
func (_Wallet *WalletFilterer) WatchTopupLimitCancelled(opts *bind.WatchOpts, sink chan<- *WalletTopupLimitCancelled) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "TopupLimitCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletTopupLimitCancelled)
				if err := _Wallet.contract.UnpackLog(event, "TopupLimitCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletTopupLimitSetIterator is returned from FilterTopupLimitSet and is used to iterate over the raw logs and unpacked data for TopupLimitSet events raised by the Wallet contract.
type WalletTopupLimitSetIterator struct {
	Event *WalletTopupLimitSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletTopupLimitSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletTopupLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletTopupLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletTopupLimitSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletTopupLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletTopupLimitSet represents a TopupLimitSet event raised by the Wallet contract.
type WalletTopupLimitSet struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTopupLimitSet is a free log retrieval operation binding the contract event 0x30cdfef434cd0bf85708997856f523c20b62eebe0d780dc0c1d4896a7efd8f2f.
//
// Solidity: e TopupLimitSet(_sender address, _amount uint256)
func (_Wallet *WalletFilterer) FilterTopupLimitSet(opts *bind.FilterOpts) (*WalletTopupLimitSetIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "TopupLimitSet")
	if err != nil {
		return nil, err
	}
	return &WalletTopupLimitSetIterator{contract: _Wallet.contract, event: "TopupLimitSet", logs: logs, sub: sub}, nil
}

// WatchTopupLimitSet is a free log subscription operation binding the contract event 0x30cdfef434cd0bf85708997856f523c20b62eebe0d780dc0c1d4896a7efd8f2f.
//
// Solidity: e TopupLimitSet(_sender address, _amount uint256)
func (_Wallet *WalletFilterer) WatchTopupLimitSet(opts *bind.WatchOpts, sink chan<- *WalletTopupLimitSet) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "TopupLimitSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletTopupLimitSet)
				if err := _Wallet.contract.UnpackLog(event, "TopupLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletTopupLimitSubmittedIterator is returned from FilterTopupLimitSubmitted and is used to iterate over the raw logs and unpacked data for TopupLimitSubmitted events raised by the Wallet contract.
type WalletTopupLimitSubmittedIterator struct {
	Event *WalletTopupLimitSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletTopupLimitSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletTopupLimitSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletTopupLimitSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletTopupLimitSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletTopupLimitSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletTopupLimitSubmitted represents a TopupLimitSubmitted event raised by the Wallet contract.
type WalletTopupLimitSubmitted struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTopupLimitSubmitted is a free log retrieval operation binding the contract event 0x58f80b6bbdc1ed8f57adb757fea1942dc103ee0e8145f6c6af899e00e6d1c764.
//
// Solidity: e TopupLimitSubmitted(_amount uint256)
func (_Wallet *WalletFilterer) FilterTopupLimitSubmitted(opts *bind.FilterOpts) (*WalletTopupLimitSubmittedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "TopupLimitSubmitted")
	if err != nil {
		return nil, err
	}
	return &WalletTopupLimitSubmittedIterator{contract: _Wallet.contract, event: "TopupLimitSubmitted", logs: logs, sub: sub}, nil
}

// WatchTopupLimitSubmitted is a free log subscription operation binding the contract event 0x58f80b6bbdc1ed8f57adb757fea1942dc103ee0e8145f6c6af899e00e6d1c764.
//
// Solidity: e TopupLimitSubmitted(_amount uint256)
func (_Wallet *WalletFilterer) WatchTopupLimitSubmitted(opts *bind.WatchOpts, sink chan<- *WalletTopupLimitSubmitted) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "TopupLimitSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletTopupLimitSubmitted)
				if err := _Wallet.contract.UnpackLog(event, "TopupLimitSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletTransferredIterator is returned from FilterTransferred and is used to iterate over the raw logs and unpacked data for Transferred events raised by the Wallet contract.
type WalletTransferredIterator struct {
	Event *WalletTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletTransferred represents a Transferred event raised by the Wallet contract.
type WalletTransferred struct {
	To     common.Address
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransferred is a free log retrieval operation binding the contract event 0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee.
//
// Solidity: e Transferred(_to address, _asset address, _amount uint256)
func (_Wallet *WalletFilterer) FilterTransferred(opts *bind.FilterOpts) (*WalletTransferredIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "Transferred")
	if err != nil {
		return nil, err
	}
	return &WalletTransferredIterator{contract: _Wallet.contract, event: "Transferred", logs: logs, sub: sub}, nil
}

// WatchTransferred is a free log subscription operation binding the contract event 0xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee.
//
// Solidity: e Transferred(_to address, _asset address, _amount uint256)
func (_Wallet *WalletFilterer) WatchTransferred(opts *bind.WatchOpts, sink chan<- *WalletTransferred) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "Transferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletTransferred)
				if err := _Wallet.contract.UnpackLog(event, "Transferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletWhitelistAddedIterator is returned from FilterWhitelistAdded and is used to iterate over the raw logs and unpacked data for WhitelistAdded events raised by the Wallet contract.
type WalletWhitelistAddedIterator struct {
	Event *WalletWhitelistAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletWhitelistAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletWhitelistAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletWhitelistAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletWhitelistAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletWhitelistAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletWhitelistAdded represents a WhitelistAdded event raised by the Wallet contract.
type WalletWhitelistAdded struct {
	Sender    common.Address
	Addresses []common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWhitelistAdded is a free log retrieval operation binding the contract event 0xd98606aaa487d6600d0ccc0412dcdf79adc4f37f1deb6a6f9710ee6f458a7fb3.
//
// Solidity: e WhitelistAdded(_sender address, _addresses address[])
func (_Wallet *WalletFilterer) FilterWhitelistAdded(opts *bind.FilterOpts) (*WalletWhitelistAddedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "WhitelistAdded")
	if err != nil {
		return nil, err
	}
	return &WalletWhitelistAddedIterator{contract: _Wallet.contract, event: "WhitelistAdded", logs: logs, sub: sub}, nil
}

// WatchWhitelistAdded is a free log subscription operation binding the contract event 0xd98606aaa487d6600d0ccc0412dcdf79adc4f37f1deb6a6f9710ee6f458a7fb3.
//
// Solidity: e WhitelistAdded(_sender address, _addresses address[])
func (_Wallet *WalletFilterer) WatchWhitelistAdded(opts *bind.WatchOpts, sink chan<- *WalletWhitelistAdded) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "WhitelistAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletWhitelistAdded)
				if err := _Wallet.contract.UnpackLog(event, "WhitelistAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletWhitelistAdditionCancelledIterator is returned from FilterWhitelistAdditionCancelled and is used to iterate over the raw logs and unpacked data for WhitelistAdditionCancelled events raised by the Wallet contract.
type WalletWhitelistAdditionCancelledIterator struct {
	Event *WalletWhitelistAdditionCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletWhitelistAdditionCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletWhitelistAdditionCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletWhitelistAdditionCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletWhitelistAdditionCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletWhitelistAdditionCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletWhitelistAdditionCancelled represents a WhitelistAdditionCancelled event raised by the Wallet contract.
type WalletWhitelistAdditionCancelled struct {
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWhitelistAdditionCancelled is a free log retrieval operation binding the contract event 0x52b0bc9c244e000beb0e24535b386411b96be4257d9738097806172fb2224b66.
//
// Solidity: e WhitelistAdditionCancelled(_sender address)
func (_Wallet *WalletFilterer) FilterWhitelistAdditionCancelled(opts *bind.FilterOpts) (*WalletWhitelistAdditionCancelledIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "WhitelistAdditionCancelled")
	if err != nil {
		return nil, err
	}
	return &WalletWhitelistAdditionCancelledIterator{contract: _Wallet.contract, event: "WhitelistAdditionCancelled", logs: logs, sub: sub}, nil
}

// WatchWhitelistAdditionCancelled is a free log subscription operation binding the contract event 0x52b0bc9c244e000beb0e24535b386411b96be4257d9738097806172fb2224b66.
//
// Solidity: e WhitelistAdditionCancelled(_sender address)
func (_Wallet *WalletFilterer) WatchWhitelistAdditionCancelled(opts *bind.WatchOpts, sink chan<- *WalletWhitelistAdditionCancelled) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "WhitelistAdditionCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletWhitelistAdditionCancelled)
				if err := _Wallet.contract.UnpackLog(event, "WhitelistAdditionCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletWhitelistAdditionSubmittedIterator is returned from FilterWhitelistAdditionSubmitted and is used to iterate over the raw logs and unpacked data for WhitelistAdditionSubmitted events raised by the Wallet contract.
type WalletWhitelistAdditionSubmittedIterator struct {
	Event *WalletWhitelistAdditionSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletWhitelistAdditionSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletWhitelistAdditionSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletWhitelistAdditionSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletWhitelistAdditionSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletWhitelistAdditionSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletWhitelistAdditionSubmitted represents a WhitelistAdditionSubmitted event raised by the Wallet contract.
type WalletWhitelistAdditionSubmitted struct {
	Addresses []common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWhitelistAdditionSubmitted is a free log retrieval operation binding the contract event 0xd9a6feb0b6b0bf85f02a1e3cea31a41fb2b7a92cf5aec53cf6162d30829ce0e8.
//
// Solidity: e WhitelistAdditionSubmitted(_addresses address[])
func (_Wallet *WalletFilterer) FilterWhitelistAdditionSubmitted(opts *bind.FilterOpts) (*WalletWhitelistAdditionSubmittedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "WhitelistAdditionSubmitted")
	if err != nil {
		return nil, err
	}
	return &WalletWhitelistAdditionSubmittedIterator{contract: _Wallet.contract, event: "WhitelistAdditionSubmitted", logs: logs, sub: sub}, nil
}

// WatchWhitelistAdditionSubmitted is a free log subscription operation binding the contract event 0xd9a6feb0b6b0bf85f02a1e3cea31a41fb2b7a92cf5aec53cf6162d30829ce0e8.
//
// Solidity: e WhitelistAdditionSubmitted(_addresses address[])
func (_Wallet *WalletFilterer) WatchWhitelistAdditionSubmitted(opts *bind.WatchOpts, sink chan<- *WalletWhitelistAdditionSubmitted) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "WhitelistAdditionSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletWhitelistAdditionSubmitted)
				if err := _Wallet.contract.UnpackLog(event, "WhitelistAdditionSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletWhitelistRemovalCancelledIterator is returned from FilterWhitelistRemovalCancelled and is used to iterate over the raw logs and unpacked data for WhitelistRemovalCancelled events raised by the Wallet contract.
type WalletWhitelistRemovalCancelledIterator struct {
	Event *WalletWhitelistRemovalCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletWhitelistRemovalCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletWhitelistRemovalCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletWhitelistRemovalCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletWhitelistRemovalCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletWhitelistRemovalCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletWhitelistRemovalCancelled represents a WhitelistRemovalCancelled event raised by the Wallet contract.
type WalletWhitelistRemovalCancelled struct {
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWhitelistRemovalCancelled is a free log retrieval operation binding the contract event 0x8629df681796168db65daa22769456c33e3e8eaf0f9c80e13efff7905e290381.
//
// Solidity: e WhitelistRemovalCancelled(_sender address)
func (_Wallet *WalletFilterer) FilterWhitelistRemovalCancelled(opts *bind.FilterOpts) (*WalletWhitelistRemovalCancelledIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "WhitelistRemovalCancelled")
	if err != nil {
		return nil, err
	}
	return &WalletWhitelistRemovalCancelledIterator{contract: _Wallet.contract, event: "WhitelistRemovalCancelled", logs: logs, sub: sub}, nil
}

// WatchWhitelistRemovalCancelled is a free log subscription operation binding the contract event 0x8629df681796168db65daa22769456c33e3e8eaf0f9c80e13efff7905e290381.
//
// Solidity: e WhitelistRemovalCancelled(_sender address)
func (_Wallet *WalletFilterer) WatchWhitelistRemovalCancelled(opts *bind.WatchOpts, sink chan<- *WalletWhitelistRemovalCancelled) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "WhitelistRemovalCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletWhitelistRemovalCancelled)
				if err := _Wallet.contract.UnpackLog(event, "WhitelistRemovalCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletWhitelistRemovalSubmittedIterator is returned from FilterWhitelistRemovalSubmitted and is used to iterate over the raw logs and unpacked data for WhitelistRemovalSubmitted events raised by the Wallet contract.
type WalletWhitelistRemovalSubmittedIterator struct {
	Event *WalletWhitelistRemovalSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletWhitelistRemovalSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletWhitelistRemovalSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletWhitelistRemovalSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletWhitelistRemovalSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletWhitelistRemovalSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletWhitelistRemovalSubmitted represents a WhitelistRemovalSubmitted event raised by the Wallet contract.
type WalletWhitelistRemovalSubmitted struct {
	Addresses []common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWhitelistRemovalSubmitted is a free log retrieval operation binding the contract event 0x56c8087c53ba3bd97430c1270719f4e10315cfb883bd92aacb97effe531f0624.
//
// Solidity: e WhitelistRemovalSubmitted(_addresses address[])
func (_Wallet *WalletFilterer) FilterWhitelistRemovalSubmitted(opts *bind.FilterOpts) (*WalletWhitelistRemovalSubmittedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "WhitelistRemovalSubmitted")
	if err != nil {
		return nil, err
	}
	return &WalletWhitelistRemovalSubmittedIterator{contract: _Wallet.contract, event: "WhitelistRemovalSubmitted", logs: logs, sub: sub}, nil
}

// WatchWhitelistRemovalSubmitted is a free log subscription operation binding the contract event 0x56c8087c53ba3bd97430c1270719f4e10315cfb883bd92aacb97effe531f0624.
//
// Solidity: e WhitelistRemovalSubmitted(_addresses address[])
func (_Wallet *WalletFilterer) WatchWhitelistRemovalSubmitted(opts *bind.WatchOpts, sink chan<- *WalletWhitelistRemovalSubmitted) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "WhitelistRemovalSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletWhitelistRemovalSubmitted)
				if err := _Wallet.contract.UnpackLog(event, "WhitelistRemovalSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// WalletWhitelistRemovedIterator is returned from FilterWhitelistRemoved and is used to iterate over the raw logs and unpacked data for WhitelistRemoved events raised by the Wallet contract.
type WalletWhitelistRemovedIterator struct {
	Event *WalletWhitelistRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletWhitelistRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletWhitelistRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletWhitelistRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletWhitelistRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletWhitelistRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletWhitelistRemoved represents a WhitelistRemoved event raised by the Wallet contract.
type WalletWhitelistRemoved struct {
	Sender    common.Address
	Addresses []common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWhitelistRemoved is a free log retrieval operation binding the contract event 0x8dcc5cbf3fad6045849f4884bb2e80fc9e15ece7a07ae215b197123807847a0d.
//
// Solidity: e WhitelistRemoved(_sender address, _addresses address[])
func (_Wallet *WalletFilterer) FilterWhitelistRemoved(opts *bind.FilterOpts) (*WalletWhitelistRemovedIterator, error) {

	logs, sub, err := _Wallet.contract.FilterLogs(opts, "WhitelistRemoved")
	if err != nil {
		return nil, err
	}
	return &WalletWhitelistRemovedIterator{contract: _Wallet.contract, event: "WhitelistRemoved", logs: logs, sub: sub}, nil
}

// WatchWhitelistRemoved is a free log subscription operation binding the contract event 0x8dcc5cbf3fad6045849f4884bb2e80fc9e15ece7a07ae215b197123807847a0d.
//
// Solidity: e WhitelistRemoved(_sender address, _addresses address[])
func (_Wallet *WalletFilterer) WatchWhitelistRemoved(opts *bind.WatchOpts, sink chan<- *WalletWhitelistRemoved) (event.Subscription, error) {

	logs, sub, err := _Wallet.contract.WatchLogs(opts, "WhitelistRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletWhitelistRemoved)
				if err := _Wallet.contract.UnpackLog(event, "WhitelistRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
